#ifdef ZZ_INCLUDE_CODE
ZZ_3ECB4:
	A0 = EMU_ReadU32(V1 + 300); //+ 0x12C
	T8 = 0x7F0000;
	T8 |= 0x7F7F;
	T9 ^= A0;
	if ((int32_t)T9 < 0)
	{
		A0 = T5 >> 1;
		ZZ_CLOCKCYCLES(6,0x8003ED64);
		goto ZZ_3ECB4_B0;
	}
	A0 = T5 >> 1;
	A0 &= T8;
	T5 = A0 >> 1;
	T5 &= T8;
	T5 += A0;
	A0 = T6 >> 1;
	A0 &= T8;
	T6 = A0 >> 1;
	T6 &= T8;
	T6 += A0;
	A0 = T7 >> 1;
	A0 &= T8;
	T7 = A0 >> 1;
	T7 &= T8;
	T7 += A0;
	T9 = GTE_GetRegister(GTE_DREG_SXY0);
	T8 = 0xFFFF0000;
	A0 = T9 & 0xFFFF;
	T9 &= T8;
	A0 = EMU_CheckedAdd(A0,3);
	A0 &= 0xFFFF;
	T9 |= A0;
	GTE_SetRegister(GTE_DREG_SXY0,T9);
	T9 = GTE_GetRegister(GTE_DREG_SXY1);
	A0 = T9 & 0xFFFF;
	T9 &= T8;
	A0 = EMU_CheckedAdd(A0,3);
	A0 &= 0xFFFF;
	T9 |= A0;
	GTE_SetRegister(GTE_DREG_SXY1,T9);
	T9 = GTE_GetRegister(GTE_DREG_SXY2);
	A0 = T9 & 0xFFFF;
	T9 &= T8;
	A0 = EMU_CheckedAdd(A0,3);
	A0 &= 0xFFFF;
	T9 |= A0;
	GTE_SetRegister(GTE_DREG_SXY2,T9);
	ZZ_CLOCKCYCLES(44,0x8003ED64);
ZZ_3ECB4_B0:
	ZZ_JUMPREGISTER_BEGIN(S3);
	ZZ_CLOCKCYCLES_JR(2);
	// UNIMPLEMENTED INDIRECT JUMP (S3,8003ED64)
	// PC IS 8003ED64
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8003ECB4,0x8003ED64,ZZ_3ECB4);
ZZ_MARK_TARGET(0x8003ED64,0x8003ED6C,ZZ_3ECB4_B0);
