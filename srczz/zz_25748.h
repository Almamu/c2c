#ifdef ZZ_INCLUDE_CODE
ZZ_25748:
	SP -= 152;
	EMU_Write32(SP + 112,S0); //+ 0x70
	S0 = A0;
	EMU_Write32(SP + 148,RA); //+ 0x94
	EMU_Write32(SP + 144,FP); //+ 0x90
	EMU_Write32(SP + 140,S7); //+ 0x8C
	EMU_Write32(SP + 136,S6); //+ 0x88
	EMU_Write32(SP + 132,S5); //+ 0x84
	EMU_Write32(SP + 128,S4); //+ 0x80
	EMU_Write32(SP + 124,S3); //+ 0x7C
	EMU_Write32(SP + 120,S2); //+ 0x78
	EMU_Write32(SP + 116,S1); //+ 0x74
	EMU_Write32(SP + 88,A3); //+ 0x58
	T1 = EMU_ReadU32(S0 + 4); //+ 0x4
	EMU_Write32(SP + 104,T1); //+ 0x68
	V0 = EMU_ReadU32(A1);
	S2 = EMU_ReadU32(S0 + 8); //+ 0x8
	V0 = (int32_t)V0 >> 8;
	EMU_Write32(SP + 40,V0); //+ 0x28
	V0 = EMU_ReadU32(A1 + 4); //+ 0x4
	V0 = (int32_t)V0 >> 8;
	EMU_Write32(SP + 44,V0); //+ 0x2C
	V0 = EMU_ReadU32(A1 + 8); //+ 0x8
	S6 = A2;
	A2 = R0;
	A3 = 0x2;
	V0 = (int32_t)V0 >> 8;
	EMU_Write32(SP + 48,V0); //+ 0x30
	V0 = EMU_ReadU32(T1 + 4); //+ 0x4
	A0 = EMU_ReadU32(SP + 104); //+ 0x68
	S3 = (int32_t)S2 >> 8;
	S7 = EMU_ReadU32(V0 + 20); //+ 0x14
	RA = 0x800257D8; //ZZ_25748_90
	A1 = 0x4B;
	ZZ_CLOCKCYCLES(36,0x800325CC);
	goto ZZ_325CC;
ZZ_25748_90:
	A0 = EMU_ReadU32(SP + 104); //+ 0x68
	A1 = 0x4B;
	A2 = R0;
	A3 = S3;
	V1 = 0x2;
	V0 -= 1;
	EMU_Write32(SP + 16,R0); //+ 0x10
	EMU_Write32(SP + 20,V1); //+ 0x14
	EMU_Write32(SP + 24,R0); //+ 0x18
	EMU_Write32(SP + 28,R0); //+ 0x1C
	EMU_Write32(SP + 32,R0); //+ 0x20
	RA = 0x8002580C; //ZZ_25748_C4
	EMU_Write32(SP + 96,V0); //+ 0x60
	ZZ_CLOCKCYCLES(13,0x80031DF4);
	goto ZZ_31DF4;
ZZ_25748_C4:
	T1 = EMU_ReadU32(SP + 96); //+ 0x60
	A0 = V0;
	V0 = (int32_t)S3 < (int32_t)T1;
	if (V0)
	{
		S5 = S3 + 1;
		ZZ_CLOCKCYCLES(5,0x8002582C);
		goto ZZ_25748_E4;
	}
	S5 = S3 + 1;
	S5 = S3;
	A3 = A0;
	ZZ_CLOCKCYCLES(8,0x80025830);
	goto ZZ_25748_E8;
ZZ_25748_E4:
	A3 = A0 + 6;
	ZZ_CLOCKCYCLES(1,0x80025830);
ZZ_25748_E8:
	T1 = EMU_ReadU32(SP + 172); //+ 0xAC
	V0 = T1 & 0x5;
	if (!V0)
	{
		A2 = S2 & 0xFF;
		ZZ_CLOCKCYCLES(5,0x80025938);
		goto ZZ_25748_1F0;
	}
	A2 = S2 & 0xFF;
	A1 = EMU_ReadS16(A0);
	V0 = EMU_ReadU32(S7);
	A1 += V0;
	EMU_Write32(SP + 56,A1); //+ 0x38
	A0 = EMU_ReadS16(A0 + 4); //+ 0x4
	V0 = EMU_ReadU32(S7 + 8); //+ 0x8
	A0 += V0;
	EMU_Write32(SP + 64,A0); //+ 0x40
	V0 = EMU_ReadS16(A3);
	V1 = EMU_ReadU32(S7);
	V0 += V1;
	V1 = V0 - A1;
	EMU_SMultiply(V1,A2);
	EMU_Write32(SP + 72,V0); //+ 0x48
	V0 = EMU_ReadS16(A3 + 4); //+ 0x4
	V1 = EMU_ReadU32(S7 + 8); //+ 0x8
	T0 = LO;
	V0 += V1;
	V1 = V0 - A0;
	EMU_SMultiply(V1,A2);
	EMU_Write32(SP + 80,V0); //+ 0x50
	V1 = EMU_ReadU32(SP + 40); //+ 0x28
	V0 = (int32_t)T0 >> 8;
	A1 += V0;
	A2 = EMU_ReadU32(SP + 48); //+ 0x30
	A3 = V1 - A1;
	T2 = LO;
	V0 = (int32_t)T2 >> 8;
	A0 += V0;
	V0 = 0x1;
	if (T1 != V0)
	{
		V1 = A2 - A0;
		ZZ_CLOCKCYCLES(40,0x80025904);
		goto ZZ_25748_1BC;
	}
	V1 = A2 - A0;
	T1 = EMU_ReadU32(SP + 168); //+ 0xA8
	EMU_SMultiply(V1,T1);
	T1 = EMU_ReadU32(SP + 88); //+ 0x58
	V1 = LO;
	EMU_SMultiply(A3,T1);
	V1 = (int32_t)V1 >> 4;
	V0 = LO;
	V0 = (int32_t)V0 >> 4;
	A2 = V1 + V0;
	ZZ_CLOCKCYCLES(53,0x80025980);
	goto ZZ_25748_238;
ZZ_25748_1BC:
	T1 = EMU_ReadU32(SP + 88); //+ 0x58
	EMU_SMultiply(V1,T1);
	T1 = EMU_ReadU32(SP + 168); //+ 0xA8
	V1 = LO;
	EMU_SMultiply(A3,T1);
	V1 = (int32_t)V1 >> 4;
	V0 = LO;
	V0 = (int32_t)V0 >> 4;
	A2 = V0 - V1;
	ZZ_CLOCKCYCLES(13,0x80025980);
	goto ZZ_25748_238;
ZZ_25748_1F0:
	V0 = EMU_ReadS16(A0 + 2); //+ 0x2
	V1 = EMU_ReadU32(S7 + 4); //+ 0x4
	V0 += V1;
	EMU_Write32(SP + 60,V0); //+ 0x3C
	A0 = EMU_ReadS16(A3 + 2); //+ 0x2
	V1 = EMU_ReadU32(S7 + 4); //+ 0x4
	A0 += V1;
	V1 = A0 - V0;
	EMU_SMultiply(V1,A2);
	A1 = EMU_ReadU32(SP + 44); //+ 0x2C
	EMU_Write32(SP + 76,A0); //+ 0x4C
	T1 = LO;
	V1 = (int32_t)T1 >> 8;
	V0 += V1;
	V0 = V0 - A1;
	A2 = V0 << 8;
	ZZ_CLOCKCYCLES(18,0x80025980);
ZZ_25748_238:
	V0 = (int32_t)A2 < (int32_t)S6;
	if (V0)
	{
		S4 = S6 - A2;
		ZZ_CLOCKCYCLES(3,0x8002599C);
		goto ZZ_25748_254;
	}
	S4 = S6 - A2;
	T1 = EMU_ReadU32(SP + 176); //+ 0xB0
	V0 = A2 - S6;
	EMU_Write32(T1,S2);
	ZZ_CLOCKCYCLES(7,0x80025F58);
	goto ZZ_25748_810;
ZZ_25748_254:
	V1 = EMU_ReadU32(S0 + 12); //+ 0xC
	V0 = 0x2;
	if (V1 != V0)
	{
		FP = S2;
		ZZ_CLOCKCYCLES(4,0x80025C1C);
		goto ZZ_25748_4D4;
	}
	FP = S2;
	T1 = EMU_ReadU32(SP + 172); //+ 0xAC
	V0 = T1 & 0x5;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(9,0x80025A4C);
		goto ZZ_25748_304;
	}
	A1 = EMU_ReadU32(SP + 40); //+ 0x28
	V1 = EMU_ReadU32(SP + 72); //+ 0x48
	A0 = EMU_ReadU32(SP + 48); //+ 0x30
	V0 = EMU_ReadU32(SP + 80); //+ 0x50
	A3 = A1 - V1;
	V1 = A0 - V0;
	V0 = 0x1;
	if (T1 != V0)
	{
		ZZ_CLOCKCYCLES(18,0x80025A18);
		goto ZZ_25748_2D0;
	}
	T1 = EMU_ReadU32(SP + 168); //+ 0xA8
	EMU_SMultiply(V1,T1);
	T1 = EMU_ReadU32(SP + 88); //+ 0x58
	V1 = LO;
	EMU_SMultiply(A3,T1);
	V1 = (int32_t)V1 >> 4;
	V0 = LO;
	V0 = (int32_t)V0 >> 4;
	S1 = V1 + V0;
	ZZ_CLOCKCYCLES(31,0x80025A60);
	goto ZZ_25748_318;
ZZ_25748_2D0:
	T1 = EMU_ReadU32(SP + 88); //+ 0x58
	EMU_SMultiply(V1,T1);
	T1 = EMU_ReadU32(SP + 168); //+ 0xA8
	V1 = LO;
	EMU_SMultiply(A3,T1);
	V1 = (int32_t)V1 >> 4;
	V0 = LO;
	V0 = (int32_t)V0 >> 4;
	S1 = V0 - V1;
	ZZ_CLOCKCYCLES(13,0x80025A60);
	goto ZZ_25748_318;
ZZ_25748_304:
	V1 = EMU_ReadU32(SP + 44); //+ 0x2C
	V0 = EMU_ReadU32(SP + 76); //+ 0x4C
	V0 = V0 - V1;
	S1 = V0 << 8;
	ZZ_CLOCKCYCLES(5,0x80025A60);
ZZ_25748_318:
	V0 = (int32_t)S1 < (int32_t)S6;
	if (V0)
	{
		V1 = S6 - S1;
		ZZ_CLOCKCYCLES(3,0x80025ACC);
		goto ZZ_25748_384;
	}
	V1 = S6 - S1;
	V0 = S6 - A2;
	V0 <<= 8;
	V1 = S1 - A2;
	EMU_SDivide(V0,V1);
	if (V1)
	{
		ZZ_CLOCKCYCLES(9,0x80025A88);
		goto ZZ_25748_340;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(10,0x80025A88);
ZZ_25748_340:
	AT = -1;
	if (V1 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x80025AA0);
		goto ZZ_25748_358;
	}
	AT = 0x80000000;
	if (V0 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x80025AA0);
		goto ZZ_25748_358;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x80025AA0);
ZZ_25748_358:
	A2 = LO;
	V0 = S5 << 8;
	V0 = V0 - S2;
	EMU_SMultiply(V0,A2);
	T1 = LO;
	V1 = (int32_t)T1 >> 8;
	T1 = EMU_ReadU32(SP + 176); //+ 0xB0
	V0 = R0;
	V1 += S2;
	EMU_Write32(T1,V1);
	ZZ_CLOCKCYCLES(11,0x80025F58);
	goto ZZ_25748_810;
ZZ_25748_384:
	V0 = (int32_t)V1 < (int32_t)S4;
	if (!V0)
	{
		S2 = R0;
		ZZ_CLOCKCYCLES(3,0x80025AE4);
		goto ZZ_25748_39C;
	}
	S2 = R0;
	ZZ_CLOCKCYCLES(3,0x80025AD8);
ZZ_25748_390:
	S4 = V1;
	FP = S5 << 8;
	S2 = R0;
	ZZ_CLOCKCYCLES(3,0x80025AE4);
ZZ_25748_39C:
	T1 = EMU_ReadU32(SP + 96); //+ 0x60
	if (S5 == T1)
	{
		S3 = S5;
		ZZ_CLOCKCYCLES(4,0x80025EDC);
		goto ZZ_25748_794;
	}
	S3 = S5;
	S5 = S3 + 1;
	A0 = EMU_ReadU32(SP + 104); //+ 0x68
	A1 = 0x4B;
	A2 = R0;
	A3 = S5 << 8;
	A3 = (int32_t)A3 >> 8;
	V0 = 0x2;
	EMU_Write32(SP + 16,R0); //+ 0x10
	EMU_Write32(SP + 20,V0); //+ 0x14
	EMU_Write32(SP + 24,R0); //+ 0x18
	EMU_Write32(SP + 28,R0); //+ 0x1C
	RA = 0x80025B28; //ZZ_25748_3E0
	EMU_Write32(SP + 32,R0); //+ 0x20
	ZZ_CLOCKCYCLES(17,0x80031DF4);
	goto ZZ_31DF4;
ZZ_25748_3E0:
	T1 = EMU_ReadU32(SP + 172); //+ 0xAC
	A0 = V0;
	V0 = T1 & 0x5;
	if (!V0)
	{
		S0 = S1;
		ZZ_CLOCKCYCLES(5,0x80025BD8);
		goto ZZ_25748_490;
	}
	S0 = S1;
	V1 = EMU_ReadS16(A0);
	A2 = EMU_ReadU32(S7);
	A3 = EMU_ReadU32(SP + 40); //+ 0x28
	V0 = EMU_ReadS16(A0 + 4); //+ 0x4
	A0 = EMU_ReadU32(S7 + 8); //+ 0x8
	A1 = EMU_ReadU32(SP + 48); //+ 0x30
	V1 += A2;
	A3 = A3 - V1;
	V0 += A0;
	V1 = A1 - V0;
	V0 = 0x1;
	if (T1 != V0)
	{
		ZZ_CLOCKCYCLES(18,0x80025BA4);
		goto ZZ_25748_45C;
	}
	T1 = EMU_ReadU32(SP + 168); //+ 0xA8
	EMU_SMultiply(V1,T1);
	T1 = EMU_ReadU32(SP + 88); //+ 0x58
	T0 = LO;
	EMU_SMultiply(A3,T1);
	V1 = (int32_t)T0 >> 4;
	V0 = LO;
	V0 = (int32_t)V0 >> 4;
	S1 = V1 + V0;
	ZZ_CLOCKCYCLES(31,0x80025BF0);
	goto ZZ_25748_4A8;
ZZ_25748_45C:
	T1 = EMU_ReadU32(SP + 88); //+ 0x58
	EMU_SMultiply(V1,T1);
	T1 = EMU_ReadU32(SP + 168); //+ 0xA8
	T0 = LO;
	EMU_SMultiply(A3,T1);
	V1 = (int32_t)T0 >> 4;
	V0 = LO;
	V0 = (int32_t)V0 >> 4;
	S1 = V0 - V1;
	ZZ_CLOCKCYCLES(13,0x80025BF0);
	goto ZZ_25748_4A8;
ZZ_25748_490:
	V0 = EMU_ReadS16(A0 + 2); //+ 0x2
	V1 = EMU_ReadU32(S7 + 4); //+ 0x4
	A0 = EMU_ReadU32(SP + 44); //+ 0x2C
	V0 += V1;
	V0 = V0 - A0;
	S1 = V0 << 8;
	ZZ_CLOCKCYCLES(6,0x80025BF0);
ZZ_25748_4A8:
	V0 = (int32_t)S1 < (int32_t)S6;
	if (!V0)
	{
		V1 = S6 - S1;
		ZZ_CLOCKCYCLES(3,0x80025EEC);
		goto ZZ_25748_7A4;
	}
	V1 = S6 - S1;
	V0 = (int32_t)S4 < (int32_t)V1;
	if (!V0)
	{
		S2 += 1;
		ZZ_CLOCKCYCLES(6,0x80025AD8);
		goto ZZ_25748_390;
	}
	S2 += 1;
	V0 = (int32_t)S2 < 3;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(9,0x80025F48);
		goto ZZ_25748_800;
	}
	ZZ_CLOCKCYCLES(11,0x80025AE4);
	goto ZZ_25748_39C;
ZZ_25748_4D4:
	T1 = EMU_ReadU32(SP + 172); //+ 0xAC
	V0 = T1 & 0x5;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(5,0x80025CBC);
		goto ZZ_25748_574;
	}
	A1 = EMU_ReadU32(SP + 40); //+ 0x28
	V1 = EMU_ReadU32(SP + 56); //+ 0x38
	A0 = EMU_ReadU32(SP + 48); //+ 0x30
	V0 = EMU_ReadU32(SP + 64); //+ 0x40
	A3 = A1 - V1;
	V1 = A0 - V0;
	V0 = 0x1;
	if (T1 != V0)
	{
		ZZ_CLOCKCYCLES(14,0x80025C88);
		goto ZZ_25748_540;
	}
	T1 = EMU_ReadU32(SP + 168); //+ 0xA8
	EMU_SMultiply(V1,T1);
	T1 = EMU_ReadU32(SP + 88); //+ 0x58
	V1 = LO;
	EMU_SMultiply(A3,T1);
	V1 = (int32_t)V1 >> 4;
	V0 = LO;
	V0 = (int32_t)V0 >> 4;
	S0 = V1 + V0;
	ZZ_CLOCKCYCLES(27,0x80025CD0);
	goto ZZ_25748_588;
ZZ_25748_540:
	T1 = EMU_ReadU32(SP + 88); //+ 0x58
	EMU_SMultiply(V1,T1);
	T1 = EMU_ReadU32(SP + 168); //+ 0xA8
	V1 = LO;
	EMU_SMultiply(A3,T1);
	V1 = (int32_t)V1 >> 4;
	V0 = LO;
	V0 = (int32_t)V0 >> 4;
	S0 = V0 - V1;
	ZZ_CLOCKCYCLES(13,0x80025CD0);
	goto ZZ_25748_588;
ZZ_25748_574:
	V1 = EMU_ReadU32(SP + 44); //+ 0x2C
	V0 = EMU_ReadU32(SP + 60); //+ 0x3C
	V0 = V0 - V1;
	S0 = V0 << 8;
	ZZ_CLOCKCYCLES(5,0x80025CD0);
ZZ_25748_588:
	V0 = (int32_t)S0 < (int32_t)S6;
	if (V0)
	{
		V1 = S6 - S0;
		ZZ_CLOCKCYCLES(3,0x80025D3C);
		goto ZZ_25748_5F4;
	}
	V1 = S6 - S0;
	V0 = S6 - A2;
	V0 <<= 8;
	V1 = S0 - A2;
	EMU_SDivide(V0,V1);
	if (V1)
	{
		ZZ_CLOCKCYCLES(9,0x80025CF8);
		goto ZZ_25748_5B0;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(10,0x80025CF8);
ZZ_25748_5B0:
	AT = -1;
	if (V1 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x80025D10);
		goto ZZ_25748_5C8;
	}
	AT = 0x80000000;
	if (V0 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x80025D10);
		goto ZZ_25748_5C8;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x80025D10);
ZZ_25748_5C8:
	A2 = LO;
	V0 = S3 << 8;
	V0 = S2 - V0;
	EMU_SMultiply(V0,A2);
	T1 = LO;
	V1 = (int32_t)T1 >> 8;
	T1 = EMU_ReadU32(SP + 176); //+ 0xB0
	V0 = R0;
	V1 = S2 - V1;
	EMU_Write32(T1,V1);
	ZZ_CLOCKCYCLES(11,0x80025F58);
	goto ZZ_25748_810;
ZZ_25748_5F4:
	V0 = (int32_t)V1 < (int32_t)S4;
	if (!V0)
	{
		S2 = R0;
		ZZ_CLOCKCYCLES(3,0x80025D54);
		goto ZZ_25748_60C;
	}
	S2 = R0;
	S4 = V1;
	ZZ_CLOCKCYCLES(4,0x80025D4C);
ZZ_25748_604:
	FP = S3 << 8;
	S2 = R0;
	ZZ_CLOCKCYCLES(2,0x80025D54);
ZZ_25748_60C:
	if (S3)
	{
		S5 = S3;
		ZZ_CLOCKCYCLES(2,0x80025D70);
		goto ZZ_25748_628;
	}
	S5 = S3;
	T1 = EMU_ReadU32(SP + 176); //+ 0xB0
	EMU_Write32(T1,FP);
	V0 = S4;
	ZZ_CLOCKCYCLES(7,0x80025F58);
	goto ZZ_25748_810;
ZZ_25748_628:
	S3 -= 1;
	A0 = EMU_ReadU32(SP + 104); //+ 0x68
	A1 = 0x4B;
	A2 = R0;
	A3 = S3 << 8;
	A3 = (int32_t)A3 >> 8;
	V0 = 0x2;
	EMU_Write32(SP + 16,R0); //+ 0x10
	EMU_Write32(SP + 20,V0); //+ 0x14
	EMU_Write32(SP + 24,R0); //+ 0x18
	EMU_Write32(SP + 28,R0); //+ 0x1C
	RA = 0x80025DA4; //ZZ_25748_65C
	EMU_Write32(SP + 32,R0); //+ 0x20
	ZZ_CLOCKCYCLES(13,0x80031DF4);
	goto ZZ_31DF4;
ZZ_25748_65C:
	T1 = EMU_ReadU32(SP + 172); //+ 0xAC
	A0 = V0;
	V0 = T1 & 0x5;
	if (!V0)
	{
		S1 = S0;
		ZZ_CLOCKCYCLES(5,0x80025E54);
		goto ZZ_25748_70C;
	}
	S1 = S0;
	V1 = EMU_ReadS16(A0);
	A2 = EMU_ReadU32(S7);
	A3 = EMU_ReadU32(SP + 40); //+ 0x28
	V0 = EMU_ReadS16(A0 + 4); //+ 0x4
	A0 = EMU_ReadU32(S7 + 8); //+ 0x8
	A1 = EMU_ReadU32(SP + 48); //+ 0x30
	V1 += A2;
	A3 = A3 - V1;
	V0 += A0;
	V1 = A1 - V0;
	V0 = 0x1;
	if (T1 != V0)
	{
		ZZ_CLOCKCYCLES(18,0x80025E20);
		goto ZZ_25748_6D8;
	}
	T1 = EMU_ReadU32(SP + 168); //+ 0xA8
	EMU_SMultiply(V1,T1);
	T1 = EMU_ReadU32(SP + 88); //+ 0x58
	T0 = LO;
	EMU_SMultiply(A3,T1);
	V1 = (int32_t)T0 >> 4;
	V0 = LO;
	V0 = (int32_t)V0 >> 4;
	S0 = V1 + V0;
	ZZ_CLOCKCYCLES(31,0x80025E6C);
	goto ZZ_25748_724;
ZZ_25748_6D8:
	T1 = EMU_ReadU32(SP + 88); //+ 0x58
	EMU_SMultiply(V1,T1);
	T1 = EMU_ReadU32(SP + 168); //+ 0xA8
	T0 = LO;
	EMU_SMultiply(A3,T1);
	V1 = (int32_t)T0 >> 4;
	V0 = LO;
	V0 = (int32_t)V0 >> 4;
	S0 = V0 - V1;
	ZZ_CLOCKCYCLES(13,0x80025E6C);
	goto ZZ_25748_724;
ZZ_25748_70C:
	V0 = EMU_ReadS16(A0 + 2); //+ 0x2
	V1 = EMU_ReadU32(S7 + 4); //+ 0x4
	A0 = EMU_ReadU32(SP + 44); //+ 0x2C
	V0 += V1;
	V0 = V0 - A0;
	S0 = V0 << 8;
	ZZ_CLOCKCYCLES(6,0x80025E6C);
ZZ_25748_724:
	V0 = (int32_t)S0 < (int32_t)S6;
	if (V0)
	{
		V1 = S6 - S0;
		ZZ_CLOCKCYCLES(3,0x80025EC8);
		goto ZZ_25748_780;
	}
	V1 = S6 - S0;
	V1 = S6 - S1;
	V1 <<= 8;
	V0 = S0 - S1;
	EMU_SDivide(V1,V0);
	if (V0)
	{
		ZZ_CLOCKCYCLES(9,0x80025E94);
		goto ZZ_25748_74C;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(10,0x80025E94);
ZZ_25748_74C:
	AT = -1;
	if (V0 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x80025EAC);
		goto ZZ_25748_764;
	}
	AT = 0x80000000;
	if (V1 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x80025EAC);
		goto ZZ_25748_764;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x80025EAC);
ZZ_25748_764:
	A2 = LO;
	T1 = EMU_ReadU32(SP + 176); //+ 0xB0
	V0 = R0;
	V1 = S5 << 8;
	V1 = V1 - A2;
	EMU_Write32(T1,V1);
	ZZ_CLOCKCYCLES(7,0x80025F58);
	goto ZZ_25748_810;
ZZ_25748_780:
	V0 = (int32_t)V1 < (int32_t)S4;
	if (!V0)
	{
		S2 += 1;
		ZZ_CLOCKCYCLES(3,0x80025F3C);
		goto ZZ_25748_7F4;
	}
	S2 += 1;
	S4 = V1;
	ZZ_CLOCKCYCLES(5,0x80025D4C);
	goto ZZ_25748_604;
ZZ_25748_794:
	T1 = EMU_ReadU32(SP + 176); //+ 0xB0
	V0 = S4;
	EMU_Write32(T1,FP);
	ZZ_CLOCKCYCLES(4,0x80025F58);
	goto ZZ_25748_810;
ZZ_25748_7A4:
	V1 = S6 - S0;
	V1 <<= 8;
	V0 = S1 - S0;
	EMU_SDivide(V1,V0);
	if (V0)
	{
		ZZ_CLOCKCYCLES(6,0x80025F08);
		goto ZZ_25748_7C0;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(7,0x80025F08);
ZZ_25748_7C0:
	AT = -1;
	if (V0 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x80025F20);
		goto ZZ_25748_7D8;
	}
	AT = 0x80000000;
	if (V1 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x80025F20);
		goto ZZ_25748_7D8;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x80025F20);
ZZ_25748_7D8:
	A2 = LO;
	T1 = EMU_ReadU32(SP + 176); //+ 0xB0
	V0 = R0;
	V1 = S3 << 8;
	V1 += A2;
	EMU_Write32(T1,V1);
	ZZ_CLOCKCYCLES(7,0x80025F58);
	goto ZZ_25748_810;
ZZ_25748_7F4:
	V0 = (int32_t)S2 < 3;
	if (V0)
	{
		ZZ_CLOCKCYCLES(3,0x80025D54);
		goto ZZ_25748_60C;
	}
	ZZ_CLOCKCYCLES(3,0x80025F48);
ZZ_25748_800:
	T1 = EMU_ReadU32(SP + 176); //+ 0xB0
	EMU_Write32(T1,FP);
	V0 = -1;
	ZZ_CLOCKCYCLES(4,0x80025F58);
ZZ_25748_810:
	RA = EMU_ReadU32(SP + 148); //+ 0x94
	FP = EMU_ReadU32(SP + 144); //+ 0x90
	S7 = EMU_ReadU32(SP + 140); //+ 0x8C
	S6 = EMU_ReadU32(SP + 136); //+ 0x88
	S5 = EMU_ReadU32(SP + 132); //+ 0x84
	S4 = EMU_ReadU32(SP + 128); //+ 0x80
	S3 = EMU_ReadU32(SP + 124); //+ 0x7C
	S2 = EMU_ReadU32(SP + 120); //+ 0x78
	S1 = EMU_ReadU32(SP + 116); //+ 0x74
	S0 = EMU_ReadU32(SP + 112); //+ 0x70
	SP += 152;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(13);
	ZZ_JUMPREGISTER(0x80024A20,ZZ_248CC_154);
	ZZ_JUMPREGISTER(0x80025688,ZZ_25624_64);
	ZZ_JUMPREGISTER(0x80024B5C,ZZ_248CC_290);
	ZZ_JUMPREGISTER(0x800256BC,ZZ_25624_98);
	ZZ_JUMPREGISTER(0x80024BFC,ZZ_248CC_330);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80025748,0x800257D8,ZZ_25748);
ZZ_MARK_TARGET(0x800257D8,0x8002580C,ZZ_25748_90);
ZZ_MARK_TARGET(0x8002580C,0x8002582C,ZZ_25748_C4);
ZZ_MARK_TARGET(0x8002582C,0x80025830,ZZ_25748_E4);
ZZ_MARK_TARGET(0x80025830,0x80025904,ZZ_25748_E8);
ZZ_MARK_TARGET(0x80025904,0x80025938,ZZ_25748_1BC);
ZZ_MARK_TARGET(0x80025938,0x80025980,ZZ_25748_1F0);
ZZ_MARK_TARGET(0x80025980,0x8002599C,ZZ_25748_238);
ZZ_MARK_TARGET(0x8002599C,0x80025A18,ZZ_25748_254);
ZZ_MARK_TARGET(0x80025A18,0x80025A4C,ZZ_25748_2D0);
ZZ_MARK_TARGET(0x80025A4C,0x80025A60,ZZ_25748_304);
ZZ_MARK_TARGET(0x80025A60,0x80025A88,ZZ_25748_318);
ZZ_MARK_TARGET(0x80025A88,0x80025AA0,ZZ_25748_340);
ZZ_MARK_TARGET(0x80025AA0,0x80025ACC,ZZ_25748_358);
ZZ_MARK_TARGET(0x80025ACC,0x80025AD8,ZZ_25748_384);
ZZ_MARK_TARGET(0x80025AD8,0x80025AE4,ZZ_25748_390);
ZZ_MARK_TARGET(0x80025AE4,0x80025B28,ZZ_25748_39C);
ZZ_MARK_TARGET(0x80025B28,0x80025BA4,ZZ_25748_3E0);
ZZ_MARK_TARGET(0x80025BA4,0x80025BD8,ZZ_25748_45C);
ZZ_MARK_TARGET(0x80025BD8,0x80025BF0,ZZ_25748_490);
ZZ_MARK_TARGET(0x80025BF0,0x80025C1C,ZZ_25748_4A8);
ZZ_MARK_TARGET(0x80025C1C,0x80025C88,ZZ_25748_4D4);
ZZ_MARK_TARGET(0x80025C88,0x80025CBC,ZZ_25748_540);
ZZ_MARK_TARGET(0x80025CBC,0x80025CD0,ZZ_25748_574);
ZZ_MARK_TARGET(0x80025CD0,0x80025CF8,ZZ_25748_588);
ZZ_MARK_TARGET(0x80025CF8,0x80025D10,ZZ_25748_5B0);
ZZ_MARK_TARGET(0x80025D10,0x80025D3C,ZZ_25748_5C8);
ZZ_MARK_TARGET(0x80025D3C,0x80025D4C,ZZ_25748_5F4);
ZZ_MARK_TARGET(0x80025D4C,0x80025D54,ZZ_25748_604);
ZZ_MARK_TARGET(0x80025D54,0x80025D70,ZZ_25748_60C);
ZZ_MARK_TARGET(0x80025D70,0x80025DA4,ZZ_25748_628);
ZZ_MARK_TARGET(0x80025DA4,0x80025E20,ZZ_25748_65C);
ZZ_MARK_TARGET(0x80025E20,0x80025E54,ZZ_25748_6D8);
ZZ_MARK_TARGET(0x80025E54,0x80025E6C,ZZ_25748_70C);
ZZ_MARK_TARGET(0x80025E6C,0x80025E94,ZZ_25748_724);
ZZ_MARK_TARGET(0x80025E94,0x80025EAC,ZZ_25748_74C);
ZZ_MARK_TARGET(0x80025EAC,0x80025EC8,ZZ_25748_764);
ZZ_MARK_TARGET(0x80025EC8,0x80025EDC,ZZ_25748_780);
ZZ_MARK_TARGET(0x80025EDC,0x80025EEC,ZZ_25748_794);
ZZ_MARK_TARGET(0x80025EEC,0x80025F08,ZZ_25748_7A4);
ZZ_MARK_TARGET(0x80025F08,0x80025F20,ZZ_25748_7C0);
ZZ_MARK_TARGET(0x80025F20,0x80025F3C,ZZ_25748_7D8);
ZZ_MARK_TARGET(0x80025F3C,0x80025F48,ZZ_25748_7F4);
ZZ_MARK_TARGET(0x80025F48,0x80025F58,ZZ_25748_800);
ZZ_MARK_TARGET(0x80025F58,0x80025F8C,ZZ_25748_810);
