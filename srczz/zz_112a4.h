#ifdef ZZ_INCLUDE_CODE
ZZ_112A4:
	A1 += 3;
	V0 = -4;
	A1 &= V0;
	V0 = EMU_ReadU32(A0 - 4); //+ 0xFFFFFFFC
	V1 = -2;
	if (V0 != V1)
	{
		T1 = A0 - 4;
		ZZ_CLOCKCYCLES(7,0x800112C8);
		goto ZZ_112A4_24;
	}
	T1 = A0 - 4;
	V0 = R0;
	ZZ_CLOCKCYCLES(9,0x80011444);
	goto ZZ_112A4_1A0;
ZZ_112A4_24:
	V1 &= V0;
	V0 = V1 < A1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(4,0x800113A4);
		goto ZZ_112A4_100;
	}
	A3 = T1;
	T0 = V1;
	T2 = -2;
	ZZ_CLOCKCYCLES(7,0x800112E4);
ZZ_112A4_40:
	V0 = EMU_ReadU32(A3);
	V0 >>= 2;
	V0 <<= 2;
	A2 = A3 + V0;
	V0 = EMU_ReadU32(A2 + 4); //+ 0x4
	if (V0 == T2)
	{
		A3 = A2 + 4;
		ZZ_CLOCKCYCLES(9,0x8001131C);
		goto ZZ_112A4_78;
	}
	A3 = A2 + 4;
	V0 &= 0x1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(12,0x800113A4);
		goto ZZ_112A4_100;
	}
	ZZ_CLOCKCYCLES(14,0x80011374);
	goto ZZ_112A4_D0;
ZZ_112A4_78:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 2740); //+ 0xFFFFF54C
	V1 = A1 - T0;
	V0 = V0 - A3;
	V0 = (int32_t)V0 >> 2;
	V0 -= 4;
	V0 = V0 < V1;
	if (V0)
	{
		V0 = V1 | 0x1;
		ZZ_CLOCKCYCLES(9,0x800113A4);
		goto ZZ_112A4_100;
	}
	V0 = V1 | 0x1;
	EMU_Write32(A2 + 4,V0); //+ 0x4
	V0 = V1 >> 2;
	V0 <<= 2;
	V0 += A3;
	AT = 0x80060000;
	EMU_Write32(AT - 2756,V0); //+ 0xFFFFF53C
	EMU_Write32(V0,T2);
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 2756); //+ 0xFFFFF53C
	V0 += 4;
	AT = 0x80060000;
	EMU_Write32(AT - 2756,V0); //+ 0xFFFFF53C
	ZZ_CLOCKCYCLES(22,0x80011374);
ZZ_112A4_D0:
	V0 = EMU_ReadU32(A3);
	V1 = EMU_ReadU32(T1);
	V0 &= T2;
	V0 += V1;
	EMU_Write32(T1,V0);
	V0 = EMU_ReadU32(A3);
	V0 &= T2;
	T0 += V0;
	V0 = T0 < A1;
	if (V0)
	{
		ZZ_CLOCKCYCLES(12,0x800112E4);
		goto ZZ_112A4_40;
	}
	ZZ_CLOCKCYCLES(12,0x800113A4);
ZZ_112A4_100:
	A2 = EMU_ReadU32(T1);
	V0 = -4;
	V0 &= A2;
	V0 = A1 < V0;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(6,0x80011428);
		goto ZZ_112A4_184;
	}
	if ((int32_t)A1 >= 0)
	{
		V1 = A1;
		ZZ_CLOCKCYCLES(8,0x800113C8);
		goto ZZ_112A4_124;
	}
	V1 = A1;
	V1 = A1 + 3;
	ZZ_CLOCKCYCLES(9,0x800113C8);
ZZ_112A4_124:
	V1 = (int32_t)V1 >> 2;
	V1 <<= 2;
	V1 += T1;
	V0 = -2;
	V0 &= A2;
	V0 = V0 - A1;
	V0 -= 4;
	EMU_Write32(V1 + 4,V0); //+ 0x4
	if ((int32_t)A1 >= 0)
	{
		V0 = A1;
		ZZ_CLOCKCYCLES(10,0x800113F4);
		goto ZZ_112A4_150;
	}
	V0 = A1;
	V0 = A1 + 3;
	ZZ_CLOCKCYCLES(11,0x800113F4);
ZZ_112A4_150:
	V0 = (int32_t)V0 >> 2;
	V0 <<= 2;
	V0 += T1;
	V1 = EMU_ReadU32(V0 + 4); //+ 0x4
	V1 |= 0x1;
	EMU_Write32(V0 + 4,V1); //+ 0x4
	V0 = EMU_ReadU32(T1);
	V0 &= 0x1;
	V0 |= A1;
	EMU_Write32(T1,V0);
	ZZ_CLOCKCYCLES(13,0x80011440);
	goto ZZ_112A4_19C;
ZZ_112A4_184:
	V0 = -2;
	V0 &= A2;
	V0 = V0 < A1;
	if (!V0)
	{
		V0 = A0;
		ZZ_CLOCKCYCLES(5,0x80011444);
		goto ZZ_112A4_1A0;
	}
	V0 = A0;
	A0 = R0;
	ZZ_CLOCKCYCLES(6,0x80011440);
ZZ_112A4_19C:
	V0 = A0;
	ZZ_CLOCKCYCLES(1,0x80011444);
ZZ_112A4_1A0:
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(2);
	ZZ_JUMPREGISTER(0x80011714,ZZ_116D4_40);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x800112A4,ZZ_112A4);
ZZ_MARK(0x800112A8);
ZZ_MARK(0x800112AC);
ZZ_MARK(0x800112B0);
ZZ_MARK(0x800112B4);
ZZ_MARK(0x800112B8);
ZZ_MARK(0x800112BC);
ZZ_MARK(0x800112C0);
ZZ_MARK(0x800112C4);
ZZ_MARK_TARGET(0x800112C8,ZZ_112A4_24);
ZZ_MARK(0x800112CC);
ZZ_MARK(0x800112D0);
ZZ_MARK(0x800112D4);
ZZ_MARK(0x800112D8);
ZZ_MARK(0x800112DC);
ZZ_MARK(0x800112E0);
ZZ_MARK_TARGET(0x800112E4,ZZ_112A4_40);
ZZ_MARK(0x800112E8);
ZZ_MARK(0x800112EC);
ZZ_MARK(0x800112F0);
ZZ_MARK(0x800112F4);
ZZ_MARK(0x800112F8);
ZZ_MARK(0x800112FC);
ZZ_MARK(0x80011300);
ZZ_MARK(0x80011304);
ZZ_MARK(0x80011308);
ZZ_MARK(0x8001130C);
ZZ_MARK(0x80011310);
ZZ_MARK(0x80011314);
ZZ_MARK(0x80011318);
ZZ_MARK_TARGET(0x8001131C,ZZ_112A4_78);
ZZ_MARK(0x80011320);
ZZ_MARK(0x80011324);
ZZ_MARK(0x80011328);
ZZ_MARK(0x8001132C);
ZZ_MARK(0x80011330);
ZZ_MARK(0x80011334);
ZZ_MARK(0x80011338);
ZZ_MARK(0x8001133C);
ZZ_MARK(0x80011340);
ZZ_MARK(0x80011344);
ZZ_MARK(0x80011348);
ZZ_MARK(0x8001134C);
ZZ_MARK(0x80011350);
ZZ_MARK(0x80011354);
ZZ_MARK(0x80011358);
ZZ_MARK(0x8001135C);
ZZ_MARK(0x80011360);
ZZ_MARK(0x80011364);
ZZ_MARK(0x80011368);
ZZ_MARK(0x8001136C);
ZZ_MARK(0x80011370);
ZZ_MARK_TARGET(0x80011374,ZZ_112A4_D0);
ZZ_MARK(0x80011378);
ZZ_MARK(0x8001137C);
ZZ_MARK(0x80011380);
ZZ_MARK(0x80011384);
ZZ_MARK(0x80011388);
ZZ_MARK(0x8001138C);
ZZ_MARK(0x80011390);
ZZ_MARK(0x80011394);
ZZ_MARK(0x80011398);
ZZ_MARK(0x8001139C);
ZZ_MARK(0x800113A0);
ZZ_MARK_TARGET(0x800113A4,ZZ_112A4_100);
ZZ_MARK(0x800113A8);
ZZ_MARK(0x800113AC);
ZZ_MARK(0x800113B0);
ZZ_MARK(0x800113B4);
ZZ_MARK(0x800113B8);
ZZ_MARK(0x800113BC);
ZZ_MARK(0x800113C0);
ZZ_MARK(0x800113C4);
ZZ_MARK_TARGET(0x800113C8,ZZ_112A4_124);
ZZ_MARK(0x800113CC);
ZZ_MARK(0x800113D0);
ZZ_MARK(0x800113D4);
ZZ_MARK(0x800113D8);
ZZ_MARK(0x800113DC);
ZZ_MARK(0x800113E0);
ZZ_MARK(0x800113E4);
ZZ_MARK(0x800113E8);
ZZ_MARK(0x800113EC);
ZZ_MARK(0x800113F0);
ZZ_MARK_TARGET(0x800113F4,ZZ_112A4_150);
ZZ_MARK(0x800113F8);
ZZ_MARK(0x800113FC);
ZZ_MARK(0x80011400);
ZZ_MARK(0x80011404);
ZZ_MARK(0x80011408);
ZZ_MARK(0x8001140C);
ZZ_MARK(0x80011410);
ZZ_MARK(0x80011414);
ZZ_MARK(0x80011418);
ZZ_MARK(0x8001141C);
ZZ_MARK(0x80011420);
ZZ_MARK(0x80011424);
ZZ_MARK_TARGET(0x80011428,ZZ_112A4_184);
ZZ_MARK(0x8001142C);
ZZ_MARK(0x80011430);
ZZ_MARK(0x80011434);
ZZ_MARK(0x80011438);
ZZ_MARK(0x8001143C);
ZZ_MARK_TARGET(0x80011440,ZZ_112A4_19C);
ZZ_MARK_TARGET(0x80011444,ZZ_112A4_1A0);
ZZ_MARK(0x80011448);
