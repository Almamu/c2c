#ifdef ZZ_INCLUDE_CODE
ZZ_4B0D8:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 8400); //+ 0xFFFFDF30
	SP -= 32;
	EMU_Write32(SP + 20,S1); //+ 0x14
	S1 = R0;
	EMU_Write32(SP + 16,S0); //+ 0x10
	S0 = 0x80060000;
	S0 -= 8432;
	EMU_Write32(SP + 24,RA); //+ 0x18
	V0 += 1;
	AT = 0x80060000;
	EMU_Write32(AT - 8400,V0); //+ 0xFFFFDF30
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 8400); //+ 0xFFFFDF30
	ZZ_CLOCKCYCLES(14,0x8004B110);
ZZ_4B0D8_38:
	V0 = EMU_ReadU32(S0);
	if (!V0)
	{
		ZZ_CLOCKCYCLES(4,0x8004B128);
		goto ZZ_4B0D8_50;
	}
	ZZ_JUMPREGISTER_BEGIN(V0);
	RA = 0x8004B128; //ZZ_4B0D8_50
	ZZ_CLOCKCYCLES_JR(6);
	// UNIMPLEMENTED JUMP-TO-REGISTER-AND-LINK (V0,8004B120)
	ZZ_JUMPREGISTER_END();
ZZ_4B0D8_50:
	S1 += 1;
	V0 = (int32_t)S1 < 8;
	if (V0)
	{
		S0 += 4;
		ZZ_CLOCKCYCLES(4,0x8004B110);
		goto ZZ_4B0D8_38;
	}
	S0 += 4;
	RA = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 32;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(10);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8004B0D8,0x8004B110,ZZ_4B0D8);
ZZ_MARK_TARGET(0x8004B110,0x8004B128,ZZ_4B0D8_38);
ZZ_MARK_TARGET(0x8004B128,0x8004B150,ZZ_4B0D8_50);
