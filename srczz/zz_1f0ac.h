#ifdef ZZ_INCLUDE_CODE
ZZ_1F0AC:
	SP -= 24;
	EMU_Write32(SP + 20,RA); //+ 0x14
	EMU_Write32(SP + 16,S0); //+ 0x10
	AT = 0x80060000;
	EMU_Write32(AT - 2524,R0); //+ 0xFFFFF624
	RA = 0x8001F0C8; //ZZ_1F0AC_1C
	A0 = 0xD680;
	ZZ_CLOCKCYCLES(7,0x8001148C);
	goto ZZ_1148C;
ZZ_1F0AC_1C:
	A0 = 0x33C;
	S0 = 0x80070000;
	S0 -= 12884;
	RA = 0x8001F0DC; //ZZ_1F0AC_30
	EMU_Write32(S0,V0);
	ZZ_CLOCKCYCLES(5,0x8001148C);
	goto ZZ_1148C;
ZZ_1F0AC_30:
	V1 = EMU_ReadU32(S0);
	A0 = S0 - 4;
	if (!V1)
	{
		EMU_Write32(S0 - 4,V0); //+ 0xFFFFFFFC
		ZZ_CLOCKCYCLES(4,0x8001F0F4);
		goto ZZ_1F0AC_48;
	}
	EMU_Write32(S0 - 4,V0); //+ 0xFFFFFFFC
	if (V0)
	{
		A1 = R0;
		ZZ_CLOCKCYCLES(6,0x8001F0FC);
		goto ZZ_1F0AC_50;
	}
	A1 = R0;
	ZZ_CLOCKCYCLES(6,0x8001F0F4);
ZZ_1F0AC_48:
	V0 = -15;
	ZZ_CLOCKCYCLES(2,0x8001F20C);
	goto ZZ_1F0AC_160;
ZZ_1F0AC_50:
	V1 = 0x80070000;
	V1 = EMU_ReadU32(V1 - 12888); //+ 0xFFFFCDA8
	T0 = S0;
	T1 = A0 + 72;
	A3 = 0x23C;
	V0 = T0 + 5224;
	AT = 0x80070000;
	EMU_Write32(AT - 12808,R0); //+ 0xFFFFCDF8
	AT = 0x80070000;
	EMU_Write32(AT - 12804,R0); //+ 0xFFFFCDFC
	EMU_Write32(V1 + 8,V0); //+ 0x8
	V1 = EMU_ReadU32(T0);
	A2 = A0 + 5336;
	A0 = R0;
	V0 = 0x2;
	AT = 0x80070000;
	EMU_Write32(AT - 12816,V0); //+ 0xFFFFCDF0
	EMU_Write32(T0 + 72,V1); //+ 0x48
	ZZ_CLOCKCYCLES(18,0x8001F144);
ZZ_1F0AC_98:
	V0 = EMU_ReadU32(T0);
	V1 = V0 + A0;
	V0 = (int32_t)A1 < 95;
	EMU_Write32(V1 + 8,A2); //+ 0x8
	EMU_Write32(V1,R0);
	EMU_Write32(V1 + 68,T1); //+ 0x44
	if (!V0)
	{
		EMU_Write32(V1 + 76,R0); //+ 0x4C
		ZZ_CLOCKCYCLES(9,0x8001F17C);
		goto ZZ_1F0AC_D0;
	}
	EMU_Write32(V1 + 76,R0); //+ 0x4C
	V0 = EMU_ReadU32(T0);
	V0 += A3;
	EMU_Write32(V1 + 72,V0); //+ 0x48
	ZZ_CLOCKCYCLES(14,0x8001F180);
	goto ZZ_1F0AC_D4;
ZZ_1F0AC_D0:
	EMU_Write32(V1 + 72,R0); //+ 0x48
	ZZ_CLOCKCYCLES(1,0x8001F180);
ZZ_1F0AC_D4:
	A3 += 572;
	A2 += 48;
	A1 += 1;
	V0 = (int32_t)A1 < 96;
	if (V0)
	{
		A0 += 572;
		ZZ_CLOCKCYCLES(6,0x8001F144);
		goto ZZ_1F0AC_98;
	}
	A0 += 572;
	A1 = R0;
	A2 = 0x2;
	V0 = 0x80070000;
	V0 -= 12880;
	A0 = V0 + 4;
	V1 = V0;
	ZZ_CLOCKCYCLES(12,0x8001F1B0);
ZZ_1F0AC_104:
	EMU_Write32(V1,A2);
	EMU_Write32(A0,R0);
	A0 += 8;
	A1 += 1;
	V0 = (int32_t)A1 < 8;
	if (V0)
	{
		V1 += 8;
		ZZ_CLOCKCYCLES(7,0x8001F1B0);
		goto ZZ_1F0AC_104;
	}
	V1 += 8;
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 12888); //+ 0xFFFFCDA8
	EMU_Write32(V0,R0);
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 12888); //+ 0xFFFFCDA8
	EMU_Write32(V0 + 68,R0); //+ 0x44
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 12888); //+ 0xFFFFCDA8
	EMU_Write32(V0 + 76,R0); //+ 0x4C
	V1 = 0x80070000;
	V1 = EMU_ReadU32(V1 - 12888); //+ 0xFFFFCDA8
	V0 = -255;
	EMU_Write32(V1 + 72,R0); //+ 0x48
	ZZ_CLOCKCYCLES(23,0x8001F20C);
ZZ_1F0AC_160:
	RA = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 24;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(5);
	ZZ_JUMPREGISTER(0x80014FC8,ZZ_14D6C_25C);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8001F0AC,0x8001F0C8,ZZ_1F0AC);
ZZ_MARK_TARGET(0x8001F0C8,0x8001F0DC,ZZ_1F0AC_1C);
ZZ_MARK_TARGET(0x8001F0DC,0x8001F0F4,ZZ_1F0AC_30);
ZZ_MARK_TARGET(0x8001F0F4,0x8001F0FC,ZZ_1F0AC_48);
ZZ_MARK_TARGET(0x8001F0FC,0x8001F144,ZZ_1F0AC_50);
ZZ_MARK_TARGET(0x8001F144,0x8001F17C,ZZ_1F0AC_98);
ZZ_MARK_TARGET(0x8001F17C,0x8001F180,ZZ_1F0AC_D0);
ZZ_MARK_TARGET(0x8001F180,0x8001F1B0,ZZ_1F0AC_D4);
ZZ_MARK_TARGET(0x8001F1B0,0x8001F20C,ZZ_1F0AC_104);
ZZ_MARK_TARGET(0x8001F20C,0x8001F220,ZZ_1F0AC_160);
