#ifdef ZZ_INCLUDE_CODE
ZZ_58900:
	V1 = 0x80070000;
	V1 = EMU_ReadU16(V1 - 26606); //+ 0xFFFF9812
	SP -= 48;
	EMU_Write32(SP + 36,S3); //+ 0x24
	S3 = A0;
	EMU_Write32(SP + 40,RA); //+ 0x28
	EMU_Write32(SP + 32,S2); //+ 0x20
	EMU_Write32(SP + 28,S1); //+ 0x1C
	EMU_Write32(SP + 24,S0); //+ 0x18
	A0 = V1 & 0xFF;
	A0 <<= 2;
	V1 >>= 8;
	V0 = V1 << 1;
	V0 += V1;
	V0 <<= 2;
	V0 = V0 - V1;
	AT = 0x80070000;
	AT += A0;
	V1 = EMU_ReadU32(AT - 15268); //+ 0xFFFFC45C
	V0 <<= 4;
	V1 += V0;
	V0 = EMU_ReadU16(V1 + 88); //+ 0x58
	A0 = 0x80070000;
	A0 = EMU_ReadU8(A0 - 26618); //+ 0xFFFF9806
	A1 = V0 << 7;
	A1 += V0;
	EMU_SMultiply(A1,A0);
	V1 = EMU_ReadU16(V1 + 90); //+ 0x5A
	A1 = LO;
	V0 = V1 << 7;
	A3 = V0 + V1;
	EMU_SMultiply(A3,A0);
	A0 = LO;
	A2 = 0x2040000;
	A2 |= 0x811;
	EMU_UMultiply(A1,A2);
	V1 = HI;
	EMU_UMultiply(A0,A2);
	V0 = 0x80070000;
	V0 = EMU_ReadU8(V0 - 26615); //+ 0xFFFF9809
	A1 = A1 - V1;
	A1 >>= 1;
	A3 = HI;
	V1 += A1;
	A1 = V1 >> 6;
	EMU_SMultiply(A1,V0);
	A0 = A0 - A3;
	A0 >>= 1;
	A1 = LO;
	A3 += A0;
	A3 >>= 6;
	EMU_SMultiply(A3,V0);
	V0 = LO;
	EMU_UMultiply(A1,A2);
	V1 = HI;
	EMU_UMultiply(V0,A2);
	A0 = 0x80070000;
	A0 = EMU_ReadU8(A0 - 26614); //+ 0xFFFF980A
	A1 = A1 - V1;
	A1 >>= 1;
	V1 += A1;
	A1 = V1 >> 6;
	A2 = HI;
	V0 = V0 - A2;
	V0 >>= 1;
	A2 += V0;
	V0 = A0 < 64;
	if (!V0)
	{
		A3 = A2 >> 6;
		ZZ_CLOCKCYCLES(75,0x80058A5C);
		goto ZZ_58900_15C;
	}
	A3 = A2 >> 6;
	EMU_SMultiply(A3,A0);
	V0 = LO;
	V1 = 0x4100000;
	V1 |= 0x4105;
	EMU_UMultiply(V0,V1);
	S2 = A1;
	V1 = HI;
	V0 = V0 - V1;
	V0 >>= 1;
	V1 += V0;
	S1 = V1 >> 5;
	ZZ_CLOCKCYCLES(87,0x80058A90);
	goto ZZ_58900_190;
ZZ_58900_15C:
	V0 = 127;
	V0 = V0 - A0;
	EMU_SMultiply(A1,V0);
	V0 = LO;
	V1 = 0x4100000;
	V1 |= 0x4105;
	EMU_UMultiply(V0,V1);
	S1 = A3;
	V1 = HI;
	V0 = V0 - V1;
	V0 >>= 1;
	V1 += V0;
	S2 = V1 >> 5;
	ZZ_CLOCKCYCLES(13,0x80058A90);
ZZ_58900_190:
	A0 = 0x80070000;
	A0 = EMU_ReadU8(A0 - 26617); //+ 0xFFFF9807
	V0 = A0 < 64;
	if (!V0)
	{
		EMU_SMultiply(S1,A0);
		ZZ_CLOCKCYCLES(6,0x80058AD0);
		goto ZZ_58900_1D0;
	}
	EMU_SMultiply(S1,A0);
	V0 = LO;
	V1 = 0x4100000;
	V1 |= 0x4105;
	EMU_UMultiply(V0,V1);
	V1 = HI;
	V0 = V0 - V1;
	V0 >>= 1;
	V1 += V0;
	S1 = V1 >> 5;
	ZZ_CLOCKCYCLES(16,0x80058B00);
	goto ZZ_58900_200;
ZZ_58900_1D0:
	V0 = 127;
	V0 = V0 - A0;
	EMU_SMultiply(S2,V0);
	V0 = LO;
	V1 = 0x4100000;
	V1 |= 0x4105;
	EMU_UMultiply(V0,V1);
	V1 = HI;
	V0 = V0 - V1;
	V0 >>= 1;
	V1 += V0;
	S2 = V1 >> 5;
	ZZ_CLOCKCYCLES(12,0x80058B00);
ZZ_58900_200:
	A0 = 0x80070000;
	A0 = EMU_ReadU8(A0 - 26623); //+ 0xFFFF9801
	V0 = A0 < 64;
	if (!V0)
	{
		EMU_SMultiply(A0,S1);
		ZZ_CLOCKCYCLES(6,0x80058B40);
		goto ZZ_58900_240;
	}
	EMU_SMultiply(A0,S1);
	V0 = LO;
	V1 = 0x4100000;
	V1 |= 0x4105;
	EMU_UMultiply(V0,V1);
	V1 = HI;
	V0 = V0 - V1;
	V0 >>= 1;
	V1 += V0;
	S1 = V1 >> 5;
	ZZ_CLOCKCYCLES(16,0x80058B70);
	goto ZZ_58900_270;
ZZ_58900_240:
	V0 = 127;
	V0 = V0 - A0;
	EMU_SMultiply(S2,V0);
	V0 = LO;
	V1 = 0x4100000;
	V1 |= 0x4105;
	EMU_UMultiply(V0,V1);
	V1 = HI;
	V0 = V0 - V1;
	V0 >>= 1;
	V1 += V0;
	S2 = V1 >> 5;
	ZZ_CLOCKCYCLES(12,0x80058B70);
ZZ_58900_270:
	V1 = 0x80060000;
	V1 = EMU_ReadS16(V1 + 14048); //+ 0x36E0
	V0 = 1;
	if (V1 != V0)
	{
		V0 = S2 < S1;
		ZZ_CLOCKCYCLES(5,0x80058B98);
		goto ZZ_58900_298;
	}
	V0 = S2 < S1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(7,0x80058B94);
		goto ZZ_58900_294;
	}
	S2 = S1;
	ZZ_CLOCKCYCLES(9,0x80058B98);
	goto ZZ_58900_298;
ZZ_58900_294:
	S1 = S2;
	ZZ_CLOCKCYCLES(1,0x80058B98);
ZZ_58900_298:
	A0 = 0x80070000;
	A0 = EMU_ReadU8(A0 - 26626); //+ 0xFFFF97FE
	V0 = 0x80070000;
	V0 = EMU_ReadU8(V0 - 26612); //+ 0xFFFF980C
	A0 = A0 - V0;
	RA = 0x80058BB8; //ZZ_58900_2B8
	A0 &= 0x3F;
	ZZ_CLOCKCYCLES(8,0x80058DDC);
	goto ZZ_58DDC;
ZZ_58900_2B8:
	S0 = S3 & 0xFF;
	V1 = S0 << 4;
	AT = 0x80070000;
	AT += V1;
	EMU_Write16(AT - 26578,S1); //+ 0xFFFF982E
	AT = 0x80060000;
	AT += S0;
	V0 = EMU_ReadU8(AT + 2508); //+ 0x9CC
	AT = 0x80070000;
	AT += V1;
	EMU_Write16(AT - 26580,S2); //+ 0xFFFF982C
	V0 |= 0x3;
	AT = 0x80060000;
	AT += S0;
	EMU_Write8(AT + 2508,V0); //+ 0x9CC
	V0 = S0 < 16;
	if (!V0)
	{
		V0 = 1;
		ZZ_CLOCKCYCLES(18,0x80058C0C);
		goto ZZ_58900_30C;
	}
	V0 = 1;
	A1 = V0 << S0;
	A3 = R0;
	ZZ_CLOCKCYCLES(21,0x80058C18);
	goto ZZ_58900_318;
ZZ_58900_30C:
	A1 = R0;
	V1 = S0 - 16;
	A3 = V0 << V1;
	ZZ_CLOCKCYCLES(3,0x80058C18);
ZZ_58900_318:
	V1 = S3 & 0xFF;
	V0 = V1 << 3;
	V0 = V0 - V1;
	V0 <<= 2;
	V0 = V0 - V1;
	V0 <<= 1;
	A0 = 0x80070000;
	A0 = EMU_ReadU8(A0 - 32136); //+ 0xFFFF8278
	V1 = 10;
	AT = 0x80060000;
	AT += V0;
	EMU_Write16(AT + 1192,V1); //+ 0x4A8
	if (!A0)
	{
		A2 = R0;
		ZZ_CLOCKCYCLES(14,0x80058CAC);
		goto ZZ_58900_3AC;
	}
	A2 = R0;
	V1 = A2 << 16;
	ZZ_CLOCKCYCLES(15,0x80058C54);
ZZ_58900_354:
	V1 = (int32_t)V1 >> 16;
	V0 = V1 << 3;
	V0 = V0 - V1;
	V0 <<= 2;
	V0 = V0 - V1;
	V0 <<= 1;
	V1 = A2 + 1;
	A2 = V1;
	AT = 0x80060000;
	AT += V0;
	A0 = EMU_ReadU8(AT + 1217); //+ 0x4C1
	V1 <<= 16;
	A0 &= 0x1;
	AT = 0x80060000;
	AT += V0;
	EMU_Write8(AT + 1217,A0); //+ 0x4C1
	V0 = 0x80070000;
	V0 = EMU_ReadU8(V0 - 32136); //+ 0xFFFF8278
	V1 = (int32_t)V1 >> 16;
	V1 = (int32_t)V1 < (int32_t)V0;
	if (V1)
	{
		V1 = A2 << 16;
		ZZ_CLOCKCYCLES(22,0x80058C54);
		goto ZZ_58900_354;
	}
	V1 = A2 << 16;
	ZZ_CLOCKCYCLES(22,0x80058CAC);
ZZ_58900_3AC:
	V1 = S3 & 0xFF;
	V0 = V1 << 3;
	V0 = V0 - V1;
	V0 <<= 2;
	V0 = V0 - V1;
	V0 <<= 1;
	V1 = 2;
	AT = 0x80060000;
	AT += V0;
	EMU_Write8(AT + 1217,V1); //+ 0x4C1
	V1 = 0x80060000;
	V1 = EMU_ReadU16(V1 + 952); //+ 0x3B8
	A0 = 0x80060000;
	A0 = EMU_ReadU16(A0 + 956); //+ 0x3BC
	V0 = 0x80070000;
	V0 = EMU_ReadU16(V0 - 2944); //+ 0xFFFFF480
	V1 |= A1;
	A0 |= A3;
	AT = 0x80060000;
	EMU_Write16(AT + 952,V1); //+ 0x3B8
	V1 = ~V1;
	V0 &= V1;
	AT = 0x80060000;
	EMU_Write16(AT + 956,A0); //+ 0x3BC
	A0 = ~A0;
	AT = 0x80070000;
	EMU_Write16(AT - 2944,V0); //+ 0xFFFFF480
	V0 = 0x80070000;
	V0 = EMU_ReadU16(V0 - 2940); //+ 0xFFFFF484
	V1 = 0x80070000;
	V1 = EMU_ReadU8(V1 - 26608); //+ 0xFFFF9810
	V0 &= A0;
	V1 &= 0x4;
	AT = 0x80070000;
	EMU_Write16(AT - 2940,V0); //+ 0xFFFFF484
	if (!V1)
	{
		V1 = ~A1;
		ZZ_CLOCKCYCLES(37,0x80058D70);
		goto ZZ_58900_470;
	}
	V1 = ~A1;
	V0 = 0x80060000;
	V0 = EMU_ReadU16(V0 + 960); //+ 0x3C0
	V1 = 0x80060000;
	V1 = EMU_ReadU16(V1 + 964); //+ 0x3C4
	V0 |= A1;
	V1 |= A3;
	AT = 0x80060000;
	EMU_Write16(AT + 960,V0); //+ 0x3C0
	AT = 0x80060000;
	EMU_Write16(AT + 964,V1); //+ 0x3C4
	A0 = 1;
	ZZ_CLOCKCYCLES(49,0x80058DA4);
	goto ZZ_58900_4A4;
ZZ_58900_470:
	V0 = 0x80060000;
	V0 = EMU_ReadU16(V0 + 960); //+ 0x3C0
	V0 &= V1;
	AT = 0x80060000;
	EMU_Write16(AT + 960,V0); //+ 0x3C0
	V0 = 0x80060000;
	V0 = EMU_ReadU16(V0 + 964); //+ 0x3C4
	V1 = ~A3;
	V0 &= V1;
	AT = 0x80060000;
	EMU_Write16(AT + 964,V0); //+ 0x3C4
	A0 = 1;
	ZZ_CLOCKCYCLES(13,0x80058DA4);
ZZ_58900_4A4:
	V0 = A3 & 0xFF;
	V0 <<= 16;
	A1 <<= 16;
	A1 = (int32_t)A1 >> 16;
	RA = 0x80058DBC; //ZZ_58900_4BC
	A1 |= V0;
	ZZ_CLOCKCYCLES(6,0x800576FC);
	goto ZZ_576FC;
ZZ_58900_4BC:
	RA = EMU_ReadU32(SP + 40); //+ 0x28
	S3 = EMU_ReadU32(SP + 36); //+ 0x24
	S2 = EMU_ReadU32(SP + 32); //+ 0x20
	S1 = EMU_ReadU32(SP + 28); //+ 0x1C
	S0 = EMU_ReadU32(SP + 24); //+ 0x18
	SP += 48;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(8);
	ZZ_JUMPREGISTER(0x80057FA8,ZZ_57AAC_4FC);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80058900,0x80058A5C,ZZ_58900);
ZZ_MARK_TARGET(0x80058A5C,0x80058A90,ZZ_58900_15C);
ZZ_MARK_TARGET(0x80058A90,0x80058AD0,ZZ_58900_190);
ZZ_MARK_TARGET(0x80058AD0,0x80058B00,ZZ_58900_1D0);
ZZ_MARK_TARGET(0x80058B00,0x80058B40,ZZ_58900_200);
ZZ_MARK_TARGET(0x80058B40,0x80058B70,ZZ_58900_240);
ZZ_MARK_TARGET(0x80058B70,0x80058B94,ZZ_58900_270);
ZZ_MARK_TARGET(0x80058B94,0x80058B98,ZZ_58900_294);
ZZ_MARK_TARGET(0x80058B98,0x80058BB8,ZZ_58900_298);
ZZ_MARK_TARGET(0x80058BB8,0x80058C0C,ZZ_58900_2B8);
ZZ_MARK_TARGET(0x80058C0C,0x80058C18,ZZ_58900_30C);
ZZ_MARK_TARGET(0x80058C18,0x80058C54,ZZ_58900_318);
ZZ_MARK_TARGET(0x80058C54,0x80058CAC,ZZ_58900_354);
ZZ_MARK_TARGET(0x80058CAC,0x80058D70,ZZ_58900_3AC);
ZZ_MARK_TARGET(0x80058D70,0x80058DA4,ZZ_58900_470);
ZZ_MARK_TARGET(0x80058DA4,0x80058DBC,ZZ_58900_4A4);
ZZ_MARK_TARGET(0x80058DBC,0x80058DDC,ZZ_58900_4BC);
