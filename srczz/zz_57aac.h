#ifdef ZZ_INCLUDE_CODE
ZZ_57AAC:
	SP -= 336;
	V1 = A0;
	V0 = A1;
	EMU_Write32(SP + 308,S3); //+ 0x134
	S3 = R0;
	A0 = V0 << 16;
	A0 = (int32_t)A0 >> 16;
	A1 = A2 << 16;
	A1 = (int32_t)A1 >> 16;
	EMU_Write32(SP + 316,S5); //+ 0x13C
	S5 = V1;
	EMU_Write32(SP + 300,S1); //+ 0x12C
	S1 = V0;
	EMU_Write32(SP + 328,FP); //+ 0x148
	FP = A3;
	EMU_Write16(SP + 272,A2); //+ 0x110
	A2 = V1 & 0xFF;
	A2 <<= 2;
	V1 <<= 16;
	EMU_Write32(SP + 296,S0); //+ 0x128
	S0 = (int32_t)V1 >> 16;
	V1 >>= 24;
	V0 = V1 << 1;
	V0 += V1;
	V0 <<= 2;
	V0 = V0 - V1;
	V0 <<= 4;
	EMU_Write32(SP + 332,RA); //+ 0x14C
	EMU_Write32(SP + 324,S7); //+ 0x144
	EMU_Write32(SP + 320,S6); //+ 0x140
	EMU_Write32(SP + 312,S4); //+ 0x138
	EMU_Write32(SP + 304,S2); //+ 0x130
	AT = 0x80070000;
	AT += A2;
	V1 = EMU_ReadU32(AT - 15268); //+ 0xFFFFC45C
	S6 = EMU_ReadU16(SP + 352); //+ 0x160
	T0 = EMU_ReadU16(SP + 356); //+ 0x164
	S7 = V1 + V0;
	RA = 0x80057B4C; //ZZ_57AAC_A0
	EMU_Write16(SP + 280,T0); //+ 0x118
	ZZ_CLOCKCYCLES(40,0x8005A59C);
	goto ZZ_5A59C;
ZZ_57AAC_A0:
	if (V0)
	{
		V0 = -1;
		ZZ_CLOCKCYCLES(2,0x80057FFC);
		goto ZZ_57AAC_550;
	}
	V0 = -1;
	V0 = 33;
	AT = 0x80070000;
	EMU_Write16(AT - 26606,S5); //+ 0xFFFF9812
	AT = 0x80070000;
	EMU_Write8(AT - 26626,FP); //+ 0xFFFF97FE
	AT = 0x80070000;
	EMU_Write8(AT - 26625,R0); //+ 0xFFFF97FF
	if (S0 != V0)
	{
		V1 = 0x81020000;
		ZZ_CLOCKCYCLES(11,0x80057B88);
		goto ZZ_57AAC_DC;
	}
	V1 = 0x81020000;
	AT = 0x80070000;
	EMU_Write8(AT - 26624,S6); //+ 0xFFFF9800
	ZZ_CLOCKCYCLES(15,0x80057BD0);
	goto ZZ_57AAC_124;
ZZ_57AAC_DC:
	V0 = EMU_ReadU8(S7 + 23); //+ 0x17
	V0 <<= 1;
	V0 += S7;
	V0 = EMU_ReadS16(V0 + 96); //+ 0x60
	EMU_SMultiply(S6,V0);
	V0 = LO;
	V1 |= 0x409;
	EMU_SMultiply(V0,V1);
	T0 = HI;
	V1 = T0 + V0;
	V1 = (int32_t)V1 >> 6;
	V0 = (int32_t)V0 >> 31;
	V1 = V1 - V0;
	AT = 0x80070000;
	EMU_Write8(AT - 26624,V1); //+ 0xFFFF9800
	ZZ_CLOCKCYCLES(18,0x80057BD0);
ZZ_57AAC_124:
	S2 = 0x80070000;
	S2 -= 26623;
	T0 = EMU_ReadU8(SP + 280); //+ 0x118
	EMU_Write8(S2,T0);
	T0 = EMU_ReadU16(SP + 272); //+ 0x110
	V1 = 0x80070000;
	V1 = EMU_ReadU32(V1 - 32152); //+ 0xFFFF8268
	V0 = T0 << 16;
	A2 = (int32_t)V0 >> 16;
	V0 = A2 << 4;
	V0 += V1;
	V1 = EMU_ReadU8(V0 + 1); //+ 0x1
	AT = 0x80070000;
	EMU_Write8(AT - 26618,V1); //+ 0xFFFF9806
	V1 = EMU_ReadU8(V0 + 4); //+ 0x4
	AT = 0x80070000;
	EMU_Write8(AT - 26617,V1); //+ 0xFFFF9807
	V0 = EMU_ReadU8(V0);
	V1 = 0x80070000;
	V1 = EMU_ReadU32(V1 - 32144); //+ 0xFFFF8270
	AT = 0x80070000;
	EMU_Write8(AT - 26628,V0); //+ 0xFFFF97FC
	V0 = 0x80070000;
	V0 = EMU_ReadU8(V0 - 26621); //+ 0xFFFF9803
	V1 = EMU_ReadU16(V1 + 18); //+ 0x12
	V0 = V0 < V1;
	if (!V0)
	{
		V0 = -1;
		ZZ_CLOCKCYCLES(30,0x80057FFC);
		goto ZZ_57AAC_550;
	}
	V0 = -1;
	if (S6)
	{
		A0 = SP + 144;
		ZZ_CLOCKCYCLES(32,0x80057C70);
		goto ZZ_57AAC_1C4;
	}
	A0 = SP + 144;
	A0 = S5 << 16;
	A0 = (int32_t)A0 >> 16;
	A1 = S1 << 16;
	A1 = (int32_t)A1 >> 16;
	RA = 0x80057C68; //ZZ_57AAC_1BC
	A3 = FP & 0xFFFF;
	ZZ_CLOCKCYCLES(38,0x80058030);
	goto ZZ_58030;
ZZ_57AAC_1BC:
	S3 = V0;
	ZZ_CLOCKCYCLES(2,0x80057FF8);
	goto ZZ_57AAC_54C;
ZZ_57AAC_1C4:
	RA = 0x80057C78; //ZZ_57AAC_1CC
	A1 = SP + 16;
	ZZ_CLOCKCYCLES(2,0x80059F6C);
	goto ZZ_59F6C;
ZZ_57AAC_1CC:
	S4 = V0;
	V0 = S4 & 0xFF;
	if (!V0)
	{
		S1 = R0;
		ZZ_CLOCKCYCLES(4,0x80057FF8);
		goto ZZ_57AAC_54C;
	}
	S1 = R0;
	S0 = S2 + 19;
	S2 += 21;
	V1 = S1 & 0xFF;
	ZZ_CLOCKCYCLES(7,0x80057C94);
ZZ_57AAC_1E8:
	V0 = SP + V1;
	V0 = EMU_ReadU8(V0 + 16); //+ 0x10
	EMU_Write16(S0,V0);
	V0 = SP + V1;
	V1 = EMU_ReadU8(V0 + 144); //+ 0x90
	V0 = EMU_ReadU8(S0 - 17); //+ 0xFFFFFFEF
	V0 <<= 4;
	EMU_Write8(S0 - 12,V1); //+ 0xFFFFFFF4
	V1 += V0;
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 32140); //+ 0xFFFF8274
	V1 <<= 5;
	V1 += V0;
	V0 = EMU_ReadU8(V1);
	EMU_Write8(S0 - 9,V0); //+ 0xFFFFFFF7
	V0 = EMU_ReadU8(V1 + 2); //+ 0x2
	EMU_Write8(S0 - 11,V0); //+ 0xFFFFFFF5
	V0 = EMU_ReadU8(V1 + 3); //+ 0x3
	EMU_Write8(S0 - 10,V0); //+ 0xFFFFFFF6
	V0 = EMU_ReadU8(V1 + 4); //+ 0x4
	EMU_Write8(S0 - 8,V0); //+ 0xFFFFFFF8
	V0 = EMU_ReadU8(V1 + 5); //+ 0x5
	EMU_Write8(S0 - 7,V0); //+ 0xFFFFFFF9
	V0 = EMU_ReadU8(V1 + 1); //+ 0x1
	EMU_Write8(S0 - 4,V0); //+ 0xFFFFFFFC
	V0 = EMU_ReadU8(V1 + 6); //+ 0x6
	EMU_Write8(S0 - 6,V0); //+ 0xFFFFFFFA
	V0 = EMU_ReadU8(V1 + 7); //+ 0x7
	A0 = R0;
	RA = 0x80057D34; //ZZ_57AAC_288
	EMU_Write8(S0 - 5,V0); //+ 0xFFFFFFFB
	ZZ_CLOCKCYCLES(40,0x800582A4);
	goto ZZ_582A4;
ZZ_57AAC_288:
	V0 &= 0xFF;
	V1 = 0x80070000;
	V1 = EMU_ReadU8(V1 - 32136); //+ 0xFFFF8278
	A0 = V0;
	V1 = (int32_t)A0 < (int32_t)V1;
	if (!V1)
	{
		EMU_Write16(S0 + 2,V0); //+ 0x2
		ZZ_CLOCKCYCLES(7,0x80057FDC);
		goto ZZ_57AAC_530;
	}
	EMU_Write16(S0 + 2,V0); //+ 0x2
	V0 = A0 << 3;
	V0 = V0 - A0;
	V0 <<= 2;
	V0 = V0 - A0;
	V0 <<= 1;
	V1 = 1;
	AT = 0x80060000;
	AT += V0;
	EMU_Write8(AT + 1217,V1); //+ 0x4C1
	V1 = EMU_ReadS16(S0 + 2); //+ 0x2
	V0 = V1 << 3;
	V0 = V0 - V1;
	V0 <<= 2;
	V0 = V0 - V1;
	V0 <<= 1;
	AT = 0x80060000;
	AT += V0;
	EMU_Write16(AT + 1190,R0); //+ 0x4A6
	V1 = EMU_ReadS16(S0 + 2); //+ 0x2
	V0 = V1 << 3;
	V0 = V0 - V1;
	V0 <<= 2;
	V0 = V0 - V1;
	V0 <<= 1;
	AT = 0x80060000;
	AT += V0;
	EMU_Write16(AT + 1204,S5); //+ 0x4B4
	V1 = EMU_ReadS16(S0 + 2); //+ 0x2
	V0 = V1 << 3;
	V0 = V0 - V1;
	V0 <<= 2;
	V0 = V0 - V1;
	V1 = EMU_ReadU8(S0 - 23); //+ 0xFFFFFFE9
	V0 <<= 1;
	AT = 0x80060000;
	AT += V0;
	EMU_Write16(AT + 1212,V1); //+ 0x4BC
	V1 = EMU_ReadS16(S0 + 2); //+ 0x2
	V0 = V1 << 3;
	V0 = V0 - V1;
	V0 <<= 2;
	V0 = V0 - V1;
	V1 = EMU_ReadU8(S0 - 17); //+ 0xFFFFFFEF
	V0 <<= 1;
	AT = 0x80060000;
	AT += V0;
	EMU_Write16(AT + 1206,V1); //+ 0x4B6
	V1 = EMU_ReadS16(S0 + 2); //+ 0x2
	T0 = EMU_ReadU16(SP + 272); //+ 0x110
	V0 = V1 << 3;
	V0 = V0 - V1;
	V0 <<= 2;
	V0 = V0 - V1;
	V0 <<= 1;
	AT = 0x80060000;
	AT += V0;
	EMU_Write16(AT + 1208,T0); //+ 0x4B8
	V0 = S5 << 16;
	V0 = (int32_t)V0 >> 16;
	V1 = 33;
	if (V0 == V1)
	{
		ZZ_CLOCKCYCLES(73,0x80057EAC);
		goto ZZ_57AAC_400;
	}
	V1 = EMU_ReadS16(S0 + 2); //+ 0x2
	V0 = V1 << 3;
	V0 = V0 - V1;
	V0 <<= 2;
	V0 = V0 - V1;
	V0 <<= 1;
	AT = 0x80060000;
	AT += V0;
	EMU_Write16(AT + 1196,S6); //+ 0x4AC
	V1 = EMU_ReadS16(S0 + 2); //+ 0x2
	V0 = V1 << 3;
	V0 = V0 - V1;
	V0 <<= 2;
	V0 = V0 - V1;
	V1 = EMU_ReadU8(S7 + 23); //+ 0x17
	V0 <<= 1;
	AT = 0x80060000;
	AT += V0;
	EMU_Write16(AT + 1200,V1); //+ 0x4B0
	ZZ_CLOCKCYCLES(94,0x80057EAC);
ZZ_57AAC_400:
	V1 = EMU_ReadS16(S0 + 2); //+ 0x2
	V0 = V1 << 3;
	V0 = V0 - V1;
	V0 <<= 2;
	V0 = V0 - V1;
	V0 <<= 1;
	T0 = EMU_ReadU8(SP + 280); //+ 0x118
	AT = 0x80060000;
	AT += V0;
	EMU_Write8(AT + 1198,T0); //+ 0x4AE
	V1 = EMU_ReadS16(S0 + 2); //+ 0x2
	V0 = V1 << 3;
	V0 = V0 - V1;
	V0 <<= 2;
	V0 = V0 - V1;
	V1 = EMU_ReadU8(S0 - 12); //+ 0xFFFFFFF4
	V0 <<= 1;
	AT = 0x80060000;
	AT += V0;
	EMU_Write16(AT + 1210,V1); //+ 0x4BA
	V1 = EMU_ReadS16(S0 + 2); //+ 0x2
	V0 = V1 << 3;
	V0 = V0 - V1;
	V0 <<= 2;
	V0 = V0 - V1;
	V0 <<= 1;
	AT = 0x80060000;
	AT += V0;
	EMU_Write16(AT + 1202,FP); //+ 0x4B2
	V1 = EMU_ReadS16(S0 + 2); //+ 0x2
	V0 = V1 << 3;
	V0 = V0 - V1;
	V0 <<= 2;
	V0 = V0 - V1;
	V1 = EMU_ReadU8(S0 - 9); //+ 0xFFFFFFF7
	V0 <<= 1;
	AT = 0x80060000;
	AT += V0;
	EMU_Write16(AT + 1214,V1); //+ 0x4BE
	V1 = EMU_ReadS16(S0 + 2); //+ 0x2
	V0 = V1 << 3;
	V0 = V0 - V1;
	V0 <<= 2;
	V0 = V0 - V1;
	V1 = EMU_ReadU16(S0);
	V0 <<= 1;
	AT = 0x80060000;
	AT += V0;
	EMU_Write16(AT + 1188,V1); //+ 0x4A4
	RA = 0x80057F8C; //ZZ_57AAC_4E0
	ZZ_CLOCKCYCLES(56,0x80058530);
	goto ZZ_58530;
ZZ_57AAC_4E0:
	V1 = EMU_ReadS16(S0);
	V0 = 255;
	if (V1 != V0)
	{
		ZZ_CLOCKCYCLES(4,0x80057FB0);
		goto ZZ_57AAC_504;
	}
	A0 = EMU_ReadU8(S2);
	RA = 0x80057FA8; //ZZ_57AAC_4FC
	ZZ_CLOCKCYCLES(7,0x80058900);
	goto ZZ_58900;
ZZ_57AAC_4FC:
	ZZ_CLOCKCYCLES(2,0x80057FC4);
	goto ZZ_57AAC_518;
ZZ_57AAC_504:
	RA = 0x80057FB8; //ZZ_57AAC_50C
	ZZ_CLOCKCYCLES(2,0x80058740);
	goto ZZ_58740;
ZZ_57AAC_50C:
	A0 = S4 & 0xFF;
	RA = 0x80057FC4; //ZZ_57AAC_518
	A1 = V0 & 0xFFFF;
	ZZ_CLOCKCYCLES(3,0x80058F54);
	goto ZZ_58F54;
ZZ_57AAC_518:
	V1 = 0x80070000;
	V1 = EMU_ReadS16(V1 - 26602); //+ 0xFFFF9816
	V0 = 1;
	V0 <<= V1;
	S3 |= V0;
	ZZ_CLOCKCYCLES(6,0x80057FE0);
	goto ZZ_57AAC_534;
ZZ_57AAC_530:
	S3 = -1;
	ZZ_CLOCKCYCLES(1,0x80057FE0);
ZZ_57AAC_534:
	S1 += 1;
	V0 = S1 & 0xFF;
	V1 = S4 & 0xFF;
	V0 = V0 < V1;
	if (V0)
	{
		V1 = S1 & 0xFF;
		ZZ_CLOCKCYCLES(6,0x80057C94);
		goto ZZ_57AAC_1E8;
	}
	V1 = S1 & 0xFF;
	ZZ_CLOCKCYCLES(6,0x80057FF8);
ZZ_57AAC_54C:
	V0 = S3;
	ZZ_CLOCKCYCLES(1,0x80057FFC);
ZZ_57AAC_550:
	RA = EMU_ReadU32(SP + 332); //+ 0x14C
	FP = EMU_ReadU32(SP + 328); //+ 0x148
	S7 = EMU_ReadU32(SP + 324); //+ 0x144
	S6 = EMU_ReadU32(SP + 320); //+ 0x140
	S5 = EMU_ReadU32(SP + 316); //+ 0x13C
	S4 = EMU_ReadU32(SP + 312); //+ 0x138
	S3 = EMU_ReadU32(SP + 308); //+ 0x134
	S2 = EMU_ReadU32(SP + 304); //+ 0x130
	S1 = EMU_ReadU32(SP + 300); //+ 0x12C
	S0 = EMU_ReadU32(SP + 296); //+ 0x128
	SP += 336;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(13);
	ZZ_JUMPREGISTER(0x80054534,ZZ_54498_9C);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80057AAC,0x80057B4C,ZZ_57AAC);
ZZ_MARK_TARGET(0x80057B4C,0x80057B88,ZZ_57AAC_A0);
ZZ_MARK_TARGET(0x80057B88,0x80057BD0,ZZ_57AAC_DC);
ZZ_MARK_TARGET(0x80057BD0,0x80057C68,ZZ_57AAC_124);
ZZ_MARK_TARGET(0x80057C68,0x80057C70,ZZ_57AAC_1BC);
ZZ_MARK_TARGET(0x80057C70,0x80057C78,ZZ_57AAC_1C4);
ZZ_MARK_TARGET(0x80057C78,0x80057C94,ZZ_57AAC_1CC);
ZZ_MARK_TARGET(0x80057C94,0x80057D34,ZZ_57AAC_1E8);
ZZ_MARK_TARGET(0x80057D34,0x80057EAC,ZZ_57AAC_288);
ZZ_MARK_TARGET(0x80057EAC,0x80057F8C,ZZ_57AAC_400);
ZZ_MARK_TARGET(0x80057F8C,0x80057FA8,ZZ_57AAC_4E0);
ZZ_MARK_TARGET(0x80057FA8,0x80057FB0,ZZ_57AAC_4FC);
ZZ_MARK_TARGET(0x80057FB0,0x80057FB8,ZZ_57AAC_504);
ZZ_MARK_TARGET(0x80057FB8,0x80057FC4,ZZ_57AAC_50C);
ZZ_MARK_TARGET(0x80057FC4,0x80057FDC,ZZ_57AAC_518);
ZZ_MARK_TARGET(0x80057FDC,0x80057FE0,ZZ_57AAC_530);
ZZ_MARK_TARGET(0x80057FE0,0x80057FF8,ZZ_57AAC_534);
ZZ_MARK_TARGET(0x80057FF8,0x80057FFC,ZZ_57AAC_54C);
ZZ_MARK_TARGET(0x80057FFC,0x80058030,ZZ_57AAC_550);
