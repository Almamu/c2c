#ifdef ZZ_INCLUDE_CODE
ZZ_34578:
	V1 = EMU_ReadU32(GP + 544); //+ 0x220
	SP -= 32;
	EMU_Write32(SP + 24,S0); //+ 0x18
	S0 = A0;
	if (!V1)
	{
		EMU_Write32(SP + 28,RA); //+ 0x1C
		ZZ_CLOCKCYCLES(6,0x800346A4);
		goto ZZ_34578_12C;
	}
	EMU_Write32(SP + 28,RA); //+ 0x1C
	V0 = 0x4;
	if (V1 != V0)
	{
		ZZ_CLOCKCYCLES(9,0x800345C8);
		goto ZZ_34578_50;
	}
	V0 = EMU_ReadS16(GP + 212); //+ 0xD4
	if (!V0)
	{
		V1 = V0;
		ZZ_CLOCKCYCLES(13,0x800345C0);
		goto ZZ_34578_48;
	}
	V1 = V0;
	V0 = V1 - 1;
	EMU_Write16(GP + 212,V0); //+ 0xD4
	V0 <<= 16;
	if (V0)
	{
		ZZ_CLOCKCYCLES(18,0x800345C8);
		goto ZZ_34578_50;
	}
	ZZ_CLOCKCYCLES(18,0x800345C0);
ZZ_34578_48:
	V0 = 0x1;
	EMU_Write32(GP + 544,V0); //+ 0x220
	ZZ_CLOCKCYCLES(2,0x800345C8);
ZZ_34578_50:
	V1 = EMU_ReadU32(GP + 544); //+ 0x220
	V0 = 0x3;
	if (V1 != V0)
	{
		V0 = (int32_t)V1 < 3;
		ZZ_CLOCKCYCLES(4,0x8003468C);
		goto ZZ_34578_114;
	}
	V0 = (int32_t)V1 < 3;
	A0 = EMU_ReadU32(S0);
	V0 = A0 & 0x1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(9,0x80034604);
		goto ZZ_34578_8C;
	}
	V0 = EMU_ReadU32(GP + 376); //+ 0x178
	if (V0 != A0)
	{
		V0 = (int32_t)V1 < 3;
		ZZ_CLOCKCYCLES(13,0x80034618);
		goto ZZ_34578_A0;
	}
	V0 = (int32_t)V1 < 3;
	ZZ_CLOCKCYCLES(15,0x8003468C);
	goto ZZ_34578_114;
ZZ_34578_8C:
	V1 = EMU_ReadU32(GP + 376); //+ 0x178
	V0 = EMU_ReadU32(A0 + 4); //+ 0x4
	if (V1 == V0)
	{
		ZZ_CLOCKCYCLES(5,0x80034680);
		goto ZZ_34578_108;
	}
	ZZ_CLOCKCYCLES(5,0x80034618);
ZZ_34578_A0:
	V0 = EMU_ReadU32(GP + 396); //+ 0x18C
	if (V0)
	{
		V0 = -1;
		ZZ_CLOCKCYCLES(4,0x80034680);
		goto ZZ_34578_108;
	}
	V0 = -1;
	V1 = EMU_ReadS16(GP + 612); //+ 0x264
	if (V1 == V0)
	{
		ZZ_CLOCKCYCLES(8,0x80034680);
		goto ZZ_34578_108;
	}
	V0 = EMU_ReadU32(GP + 216); //+ 0xD8
	if (V0)
	{
		A3 = 0x19;
		ZZ_CLOCKCYCLES(12,0x80034680);
		goto ZZ_34578_108;
	}
	A3 = 0x19;
	A2 = EMU_ReadU16(GP + 368); //+ 0x170
	A0 = EMU_ReadS16(GP + 616); //+ 0x268
	A1 = 0x80060000;
	A1 = EMU_ReadS16(A1 - 152); //+ 0xFFFFFF68
	A2 <<= 16;
	RA = 0x80034664; //ZZ_34578_EC
	A2 = (int32_t)A2 >> 23;
	ZZ_CLOCKCYCLES(19,0x80052DE4);
	goto ZZ_52DE4;
ZZ_34578_EC:
	V0 = 0x19;
	EMU_Write16(GP + 212,V0); //+ 0xD4
	V0 = 0x4;
	EMU_Write32(GP + 216,S0); //+ 0xD8
	EMU_Write32(GP + 544,V0); //+ 0x220
	ZZ_CLOCKCYCLES(7,0x800346A4);
	goto ZZ_34578_12C;
ZZ_34578_108:
	V1 = EMU_ReadU32(GP + 544); //+ 0x220
	V0 = (int32_t)V1 < 3;
	ZZ_CLOCKCYCLES(3,0x8003468C);
ZZ_34578_114:
	if (!V0)
	{
		ZZ_CLOCKCYCLES(2,0x800346A4);
		goto ZZ_34578_12C;
	}
	if ((int32_t)V1 <= 0)
	{
		ZZ_CLOCKCYCLES(4,0x800346A4);
		goto ZZ_34578_12C;
	}
	RA = 0x800346A4; //ZZ_34578_12C
	A0 = S0;
	ZZ_CLOCKCYCLES(6,0x80034204);
	goto ZZ_34204;
ZZ_34578_12C:
	RA = EMU_ReadU32(SP + 28); //+ 0x1C
	S0 = EMU_ReadU32(SP + 24); //+ 0x18
	SP += 32;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(5);
	ZZ_JUMPREGISTER(0x80033864,ZZ_337BC_A8);
	ZZ_JUMPREGISTER(0x80012EE0,ZZ_12E84_5C);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80034578,0x800345C0,ZZ_34578);
ZZ_MARK_TARGET(0x800345C0,0x800345C8,ZZ_34578_48);
ZZ_MARK_TARGET(0x800345C8,0x80034604,ZZ_34578_50);
ZZ_MARK_TARGET(0x80034604,0x80034618,ZZ_34578_8C);
ZZ_MARK_TARGET(0x80034618,0x80034664,ZZ_34578_A0);
ZZ_MARK_TARGET(0x80034664,0x80034680,ZZ_34578_EC);
ZZ_MARK_TARGET(0x80034680,0x8003468C,ZZ_34578_108);
ZZ_MARK_TARGET(0x8003468C,0x800346A4,ZZ_34578_114);
ZZ_MARK_TARGET(0x800346A4,0x800346B8,ZZ_34578_12C);
