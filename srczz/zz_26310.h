#ifdef ZZ_INCLUDE_CODE
ZZ_26310:
	SP -= 32;
	EMU_Write32(SP + 16,S0); //+ 0x10
	S0 = 0x80060000;
	S0 = EMU_ReadU32(S0 - 17288); //+ 0xFFFFBC78
	EMU_Write32(SP + 20,S1); //+ 0x14
	S1 = 0x80060000;
	S1 -= 17168;
	if ((int32_t)S0 <= 0)
	{
		EMU_Write32(SP + 24,RA); //+ 0x18
		ZZ_CLOCKCYCLES(9,0x80026348);
		goto ZZ_26310_38;
	}
	EMU_Write32(SP + 24,RA); //+ 0x18
	ZZ_CLOCKCYCLES(9,0x80026334);
ZZ_26310_24:
	RA = 0x8002633C; //ZZ_26310_2C
	A0 = S1;
	ZZ_CLOCKCYCLES(2,0x80026368);
	goto ZZ_26368;
ZZ_26310_2C:
	S0 -= 1;
	if ((int32_t)S0 > 0)
	{
		S1 += 16;
		ZZ_CLOCKCYCLES(3,0x80026334);
		goto ZZ_26310_24;
	}
	S1 += 16;
	ZZ_CLOCKCYCLES(3,0x80026348);
ZZ_26310_38:
	AT = 0x80060000;
	EMU_Write32(AT - 17288,R0); //+ 0xFFFFBC78
	RA = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 32;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(8);
	ZZ_JUMPREGISTER(0x80026FE4,ZZ_26F14_D0);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80026310,ZZ_26310);
ZZ_MARK(0x80026314);
ZZ_MARK(0x80026318);
ZZ_MARK(0x8002631C);
ZZ_MARK(0x80026320);
ZZ_MARK(0x80026324);
ZZ_MARK(0x80026328);
ZZ_MARK(0x8002632C);
ZZ_MARK(0x80026330);
ZZ_MARK_TARGET(0x80026334,ZZ_26310_24);
ZZ_MARK(0x80026338);
ZZ_MARK_TARGET(0x8002633C,ZZ_26310_2C);
ZZ_MARK(0x80026340);
ZZ_MARK(0x80026344);
ZZ_MARK_TARGET(0x80026348,ZZ_26310_38);
ZZ_MARK(0x8002634C);
ZZ_MARK(0x80026350);
ZZ_MARK(0x80026354);
ZZ_MARK(0x80026358);
ZZ_MARK(0x8002635C);
ZZ_MARK(0x80026360);
ZZ_MARK(0x80026364);
