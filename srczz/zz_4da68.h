#ifdef ZZ_INCLUDE_CODE
ZZ_4DA68:
	SP -= 32;
	EMU_Write32(SP + 16,S0); //+ 0x10
	S0 = A1;
	A1 = 0x80060000;
	A1 = EMU_ReadU32(A1 - 8028); //+ 0xFFFFE0A4
	EMU_Write32(SP + 24,RA); //+ 0x18
	EMU_Write32(SP + 20,S1); //+ 0x14
	V0 = EMU_ReadU32(A1);
	V1 = 0x8000000;
	V0 |= V1;
	EMU_Write32(A1,V0);
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 8032); //+ 0xFFFFE0A0
	EMU_Write32(V0,R0);
	V0 = S0 << 2;
	V0 -= 4;
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 8040); //+ 0xFFFFE098
	A0 += V0;
	EMU_Write32(V1,A0);
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 8036); //+ 0xFFFFE09C
	V1 = 0x11000000;
	EMU_Write32(V0,S0);
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 8032); //+ 0xFFFFE0A0
	V1 |= 0x2;
	EMU_Write32(V0,V1);
	RA = 0x8004DAE4; //ZZ_4DA68_7C
	ZZ_CLOCKCYCLES(31,0x8004EC08);
	goto ZZ_4EC08;
ZZ_4DA68_7C:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 8032); //+ 0xFFFFE0A0
	V0 = EMU_ReadU32(V0);
	V1 = 0x1000000;
	V0 &= V1;
	if (!V0)
	{
		V0 = S0;
		ZZ_CLOCKCYCLES(8,0x8004DB38);
		goto ZZ_4DA68_D0;
	}
	V0 = S0;
	S1 = 0x1000000;
	ZZ_CLOCKCYCLES(9,0x8004DB08);
ZZ_4DA68_A0:
	RA = 0x8004DB10; //ZZ_4DA68_A8
	ZZ_CLOCKCYCLES(2,0x8004EC3C);
	goto ZZ_4EC3C;
ZZ_4DA68_A8:
	if (V0)
	{
		V0 = -1;
		ZZ_CLOCKCYCLES(2,0x8004DB38);
		goto ZZ_4DA68_D0;
	}
	V0 = -1;
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 8032); //+ 0xFFFFE0A0
	V0 = EMU_ReadU32(V0);
	V0 &= S1;
	if (V0)
	{
		V0 = S0;
		ZZ_CLOCKCYCLES(10,0x8004DB08);
		goto ZZ_4DA68_A0;
	}
	V0 = S0;
	ZZ_CLOCKCYCLES(10,0x8004DB38);
ZZ_4DA68_D0:
	RA = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 32;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(6);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8004DA68,0x8004DAE4,ZZ_4DA68);
ZZ_MARK_TARGET(0x8004DAE4,0x8004DB08,ZZ_4DA68_7C);
ZZ_MARK_TARGET(0x8004DB08,0x8004DB10,ZZ_4DA68_A0);
ZZ_MARK_TARGET(0x8004DB10,0x8004DB38,ZZ_4DA68_A8);
ZZ_MARK_TARGET(0x8004DB38,0x8004DB50,ZZ_4DA68_D0);
