#ifdef ZZ_INCLUDE_CODE
ZZ_4EC3C:
	SP -= 32;
	EMU_Write32(SP + 24,RA); //+ 0x18
	RA = 0x8004EC4C; //ZZ_4EC3C_10
	A0 = -1;
	ZZ_CLOCKCYCLES(4,0x8004A71C);
	goto ZZ_4A71C;
ZZ_4EC3C_10:
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 7988); //+ 0xFFFFE0CC
	V1 = (int32_t)V1 < (int32_t)V0;
	if (V1)
	{
		ZZ_CLOCKCYCLES(6,0x8004EC8C);
		goto ZZ_4EC3C_50;
	}
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 7984); //+ 0xFFFFE0D0
	V0 = V1 + 1;
	AT = 0x80060000;
	EMU_Write32(AT - 7984,V0); //+ 0xFFFFE0D0
	V0 = 0xF0000;
	V0 = (int32_t)V0 < (int32_t)V1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(16,0x8004ED94);
		goto ZZ_4EC3C_158;
	}
	ZZ_CLOCKCYCLES(16,0x8004EC8C);
ZZ_4EC3C_50:
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 8056); //+ 0xFFFFE088
	A0 = 0x80010000;
	A0 += 4160;
	V0 = EMU_ReadU32(V1);
	A1 = 0x80060000;
	A1 = EMU_ReadU32(A1 - 8008); //+ 0xFFFFE0B8
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 8052); //+ 0xFFFFE08C
	T0 = 0x80060000;
	T0 = EMU_ReadU32(T0 - 8004); //+ 0xFFFFE0BC
	V0 = EMU_ReadU32(V0);
	A1 = A1 - T0;
	EMU_Write32(SP + 16,V0); //+ 0x10
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 8044); //+ 0xFFFFE094
	A2 = EMU_ReadU32(V1);
	A3 = EMU_ReadU32(V0);
	RA = 0x8004ECDC; //ZZ_4EC3C_A0
	A1 &= 0x3F;
	ZZ_CLOCKCYCLES(20,0x800494DC);
	goto ZZ_494DC;
ZZ_4EC3C_A0:
	V0 = 0x80060000;
	V0 -= 8024;
	A1 = EMU_ReadU32(V0);
	A2 = 0x80060000;
	A2 = EMU_ReadU32(A2 - 8020); //+ 0xFFFFE0AC
	A3 = 0x80060000;
	A3 = EMU_ReadU32(A3 - 8016); //+ 0xFFFFE0B0
	A0 = 0x80010000;
	A0 += 4212;
	RA = 0x8004ED08; //ZZ_4EC3C_CC
	ZZ_CLOCKCYCLES(11,0x800494DC);
	goto ZZ_494DC;
ZZ_4EC3C_CC:
	RA = 0x8004ED10; //ZZ_4EC3C_D4
	A0 = R0;
	ZZ_CLOCKCYCLES(2,0x8004AA8C);
	goto ZZ_4AA8C;
ZZ_4EC3C_D4:
	AT = 0x80060000;
	EMU_Write32(AT - 8004,R0); //+ 0xFFFFE0BC
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 8004); //+ 0xFFFFE0BC
	AT = 0x80060000;
	EMU_Write32(AT - 7992,V0); //+ 0xFFFFE0C8
	AT = 0x80060000;
	EMU_Write32(AT - 8008,V1); //+ 0xFFFFE0B8
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 8044); //+ 0xFFFFE094
	V0 = 1025;
	EMU_Write32(V1,V0);
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 8028); //+ 0xFFFFE0A4
	V0 = EMU_ReadU32(V1);
	V0 |= 0x800;
	EMU_Write32(V1,V0);
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 8056); //+ 0xFFFFE088
	V0 = 0x2000000;
	EMU_Write32(V1,V0);
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 8056); //+ 0xFFFFE088
	V0 = 0x1000000;
	EMU_Write32(V1,V0);
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 - 7992); //+ 0xFFFFE0C8
	RA = 0x8004ED8C; //ZZ_4EC3C_150
	ZZ_CLOCKCYCLES(31,0x8004AA8C);
	goto ZZ_4AA8C;
ZZ_4EC3C_150:
	V0 = -1;
	ZZ_CLOCKCYCLES(2,0x8004ED98);
	goto ZZ_4EC3C_15C;
ZZ_4EC3C_158:
	V0 = R0;
	ZZ_CLOCKCYCLES(1,0x8004ED98);
ZZ_4EC3C_15C:
	RA = EMU_ReadU32(SP + 24); //+ 0x18
	SP += 32;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(4);
	ZZ_JUMPREGISTER(0x8004EAF0,ZZ_4EAC0_30);
	ZZ_JUMPREGISTER(0x8004E3D4,ZZ_4E398_3C);
	ZZ_JUMPREGISTER(0x8004EB24,ZZ_4EAC0_64);
	ZZ_JUMPREGISTER(0x8004DB10,ZZ_4DA68_A8);
	ZZ_JUMPREGISTER(0x8004E0F0,ZZ_4DFE8_108);
	ZZ_JUMPREGISTER(0x8004DEB8,ZZ_4DDAC_10C);
	ZZ_JUMPREGISTER(0x8004E19C,ZZ_4DFE8_1B4);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8004EC3C,ZZ_4EC3C);
ZZ_MARK(0x8004EC40);
ZZ_MARK(0x8004EC44);
ZZ_MARK(0x8004EC48);
ZZ_MARK_TARGET(0x8004EC4C,ZZ_4EC3C_10);
ZZ_MARK(0x8004EC50);
ZZ_MARK(0x8004EC54);
ZZ_MARK(0x8004EC58);
ZZ_MARK(0x8004EC5C);
ZZ_MARK(0x8004EC60);
ZZ_MARK(0x8004EC64);
ZZ_MARK(0x8004EC68);
ZZ_MARK(0x8004EC6C);
ZZ_MARK(0x8004EC70);
ZZ_MARK(0x8004EC74);
ZZ_MARK(0x8004EC78);
ZZ_MARK(0x8004EC7C);
ZZ_MARK(0x8004EC80);
ZZ_MARK(0x8004EC84);
ZZ_MARK(0x8004EC88);
ZZ_MARK_TARGET(0x8004EC8C,ZZ_4EC3C_50);
ZZ_MARK(0x8004EC90);
ZZ_MARK(0x8004EC94);
ZZ_MARK(0x8004EC98);
ZZ_MARK(0x8004EC9C);
ZZ_MARK(0x8004ECA0);
ZZ_MARK(0x8004ECA4);
ZZ_MARK(0x8004ECA8);
ZZ_MARK(0x8004ECAC);
ZZ_MARK(0x8004ECB0);
ZZ_MARK(0x8004ECB4);
ZZ_MARK(0x8004ECB8);
ZZ_MARK(0x8004ECBC);
ZZ_MARK(0x8004ECC0);
ZZ_MARK(0x8004ECC4);
ZZ_MARK(0x8004ECC8);
ZZ_MARK(0x8004ECCC);
ZZ_MARK(0x8004ECD0);
ZZ_MARK(0x8004ECD4);
ZZ_MARK(0x8004ECD8);
ZZ_MARK_TARGET(0x8004ECDC,ZZ_4EC3C_A0);
ZZ_MARK(0x8004ECE0);
ZZ_MARK(0x8004ECE4);
ZZ_MARK(0x8004ECE8);
ZZ_MARK(0x8004ECEC);
ZZ_MARK(0x8004ECF0);
ZZ_MARK(0x8004ECF4);
ZZ_MARK(0x8004ECF8);
ZZ_MARK(0x8004ECFC);
ZZ_MARK(0x8004ED00);
ZZ_MARK(0x8004ED04);
ZZ_MARK_TARGET(0x8004ED08,ZZ_4EC3C_CC);
ZZ_MARK(0x8004ED0C);
ZZ_MARK_TARGET(0x8004ED10,ZZ_4EC3C_D4);
ZZ_MARK(0x8004ED14);
ZZ_MARK(0x8004ED18);
ZZ_MARK(0x8004ED1C);
ZZ_MARK(0x8004ED20);
ZZ_MARK(0x8004ED24);
ZZ_MARK(0x8004ED28);
ZZ_MARK(0x8004ED2C);
ZZ_MARK(0x8004ED30);
ZZ_MARK(0x8004ED34);
ZZ_MARK(0x8004ED38);
ZZ_MARK(0x8004ED3C);
ZZ_MARK(0x8004ED40);
ZZ_MARK(0x8004ED44);
ZZ_MARK(0x8004ED48);
ZZ_MARK(0x8004ED4C);
ZZ_MARK(0x8004ED50);
ZZ_MARK(0x8004ED54);
ZZ_MARK(0x8004ED58);
ZZ_MARK(0x8004ED5C);
ZZ_MARK(0x8004ED60);
ZZ_MARK(0x8004ED64);
ZZ_MARK(0x8004ED68);
ZZ_MARK(0x8004ED6C);
ZZ_MARK(0x8004ED70);
ZZ_MARK(0x8004ED74);
ZZ_MARK(0x8004ED78);
ZZ_MARK(0x8004ED7C);
ZZ_MARK(0x8004ED80);
ZZ_MARK(0x8004ED84);
ZZ_MARK(0x8004ED88);
ZZ_MARK_TARGET(0x8004ED8C,ZZ_4EC3C_150);
ZZ_MARK(0x8004ED90);
ZZ_MARK_TARGET(0x8004ED94,ZZ_4EC3C_158);
ZZ_MARK_TARGET(0x8004ED98,ZZ_4EC3C_15C);
ZZ_MARK(0x8004ED9C);
ZZ_MARK(0x8004EDA0);
ZZ_MARK(0x8004EDA4);
