#ifdef ZZ_INCLUDE_CODE
ZZ_27BF4:
	V0 = EMU_ReadU32(A0 + 8); //+ 0x8
	if (!V0)
	{
		V0 = 0x1;
		ZZ_CLOCKCYCLES(4,0x80027CA4);
		goto ZZ_27BF4_B0;
	}
	V0 = 0x1;
	A2 = 0x80070000;
	A2 -= 27188;
	EMU_Write32(A0 + 12,V0); //+ 0xC
	V0 = EMU_ReadU32(A2);
	V1 = 0x80070000;
	V1 = EMU_ReadU32(V1 - 27184); //+ 0xFFFF95D0
	A1 = V0 - 1;
	V0 = A1 << 2;
	V0 += A1;
	V0 <<= 2;
	V0 += A1;
	V0 <<= 2;
	if ((int32_t)A1 < 0)
	{
		A0 = V1 + V0;
		ZZ_CLOCKCYCLES(18,0x80027CA4);
		goto ZZ_27BF4_B0;
	}
	A0 = V1 + V0;
	A3 = 0x1;
	A2 += 16;
	A0 += 16;
	ZZ_CLOCKCYCLES(21,0x80027C48);
ZZ_27BF4_54:
	V1 = EMU_ReadU32(A0 - 8); //+ 0xFFFFFFF8
	if (V1 != A3)
	{
		ZZ_CLOCKCYCLES(4,0x80027C98);
		goto ZZ_27BF4_A4;
	}
	V0 = EMU_ReadU32(A0 - 4); //+ 0xFFFFFFFC
	if (V0 != V1)
	{
		ZZ_CLOCKCYCLES(8,0x80027CA4);
		goto ZZ_27BF4_B0;
	}
	EMU_Write32(A0 - 8,R0); //+ 0xFFFFFFF8
	EMU_Write32(A0 - 4,R0); //+ 0xFFFFFFFC
	V0 = EMU_ReadU32(A2);
	V1 = EMU_ReadU32(A0);
	V0 = V0 - V1;
	EMU_Write32(A2,V0);
	V0 = EMU_ReadU32(A2 - 4); //+ 0xFFFFFFFC
	V1 = EMU_ReadU32(A0);
	V0 += V1;
	EMU_Write32(A2 - 4,V0); //+ 0xFFFFFFFC
	ZZ_CLOCKCYCLES(20,0x80027C98);
ZZ_27BF4_A4:
	A1 -= 1;
	if ((int32_t)A1 >= 0)
	{
		A0 -= 84;
		ZZ_CLOCKCYCLES(3,0x80027C48);
		goto ZZ_27BF4_54;
	}
	A0 -= 84;
	ZZ_CLOCKCYCLES(3,0x80027CA4);
ZZ_27BF4_B0:
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(2);
	ZZ_JUMPREGISTER(0x80027BE0,ZZ_27B6C_74);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80027BF4,0x80027C48,ZZ_27BF4);
ZZ_MARK_TARGET(0x80027C48,0x80027C98,ZZ_27BF4_54);
ZZ_MARK_TARGET(0x80027C98,0x80027CA4,ZZ_27BF4_A4);
ZZ_MARK_TARGET(0x80027CA4,0x80027CAC,ZZ_27BF4_B0);
