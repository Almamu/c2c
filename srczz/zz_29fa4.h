#ifdef ZZ_INCLUDE_CODE
ZZ_29FA4:
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 12756); //+ 0xFFFFCE2C
	SP -= 144;
	EMU_Write32(SP + 132,S7); //+ 0x84
	S7 = A0;
	EMU_Write32(SP + 136,FP); //+ 0x88
	FP = A1;
	EMU_Write32(SP + 120,S4); //+ 0x78
	S4 = A2;
	EMU_Write32(SP + 112,S2); //+ 0x70
	S2 = A3;
	V1 = 0x4000000;
	EMU_Write32(SP + 140,RA); //+ 0x8C
	EMU_Write32(SP + 128,S6); //+ 0x80
	EMU_Write32(SP + 124,S5); //+ 0x7C
	EMU_Write32(SP + 116,S3); //+ 0x74
	EMU_Write32(SP + 108,S1); //+ 0x6C
	V0 &= V1;
	if (!V0)
	{
		EMU_Write32(SP + 104,S0); //+ 0x68
		ZZ_CLOCKCYCLES(20,0x8002A238);
		goto ZZ_29FA4_294;
	}
	EMU_Write32(SP + 104,S0); //+ 0x68
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 + 11632); //+ 0x2D70
	V0 = 0x20000;
	V0 &= A0;
	if (!V0)
	{
		V0 = 0x40000;
		ZZ_CLOCKCYCLES(26,0x8002A238);
		goto ZZ_29FA4_294;
	}
	V0 = 0x40000;
	V0 &= A0;
	if (!V0)
	{
		V1 = 0x20000000;
		ZZ_CLOCKCYCLES(29,0x8002A02C);
		goto ZZ_29FA4_88;
	}
	V1 = 0x20000000;
	V0 = EMU_ReadU32(S7 + 256); //+ 0x100
	V0 &= V1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(34,0x8002A238);
		goto ZZ_29FA4_294;
	}
	ZZ_CLOCKCYCLES(34,0x8002A02C);
ZZ_29FA4_88:
	V0 = A0 & 0x200;
	if (!V0)
	{
		V1 = 0x20000000;
		ZZ_CLOCKCYCLES(3,0x8002A060);
		goto ZZ_29FA4_BC;
	}
	V1 = 0x20000000;
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 2524); //+ 0xFFFFF624
	V0 = EMU_ReadU32(V0 + 256); //+ 0x100
	V0 &= V1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(11,0x8002A060);
		goto ZZ_29FA4_BC;
	}
	S1 = 0x1C2;
	ZZ_CLOCKCYCLES(13,0x8002A07C);
	goto ZZ_29FA4_D8;
ZZ_29FA4_BC:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 11632); //+ 0x2D70
	V1 = 0x40000;
	V0 &= V1;
	if (!V0)
	{
		S1 = 0x40;
		ZZ_CLOCKCYCLES(6,0x8002A07C);
		goto ZZ_29FA4_D8;
	}
	S1 = 0x40;
	S1 = 0x200;
	ZZ_CLOCKCYCLES(7,0x8002A07C);
ZZ_29FA4_D8:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 11632); //+ 0x2D70
	V1 = 0x80000;
	V0 &= V1;
	if (!V0)
	{
		A0 = S4;
		ZZ_CLOCKCYCLES(6,0x8002A140);
		goto ZZ_29FA4_19C;
	}
	A0 = S4;
	V0 = EMU_ReadU32(S2);
	V0 = (int32_t)V0 >> 8;
	EMU_SMultiply(V0,V0);
	V0 = EMU_ReadU32(S2 + 8); //+ 0x8
	V1 = LO;
	V0 = (int32_t)V0 >> 8;
	EMU_SMultiply(V0,V0);
	T0 = LO;
	RA = 0x8002A0C4; //ZZ_29FA4_120
	A0 = V1 + T0;
	ZZ_CLOCKCYCLES(18,0x80041D10);
	goto ZZ_41D10;
ZZ_29FA4_120:
	S0 = V0;
	if (S0)
	{
		ZZ_CLOCKCYCLES(3,0x8002A0D4);
		goto ZZ_29FA4_130;
	}
	S0 = 0x1;
	ZZ_CLOCKCYCLES(4,0x8002A0D4);
ZZ_29FA4_130:
	V0 = EMU_ReadU32(S2);
	EMU_SDivide(V0,S0);
	if (S0)
	{
		ZZ_CLOCKCYCLES(5,0x8002A0EC);
		goto ZZ_29FA4_148;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(6,0x8002A0EC);
ZZ_29FA4_148:
	AT = -1;
	if (S0 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x8002A104);
		goto ZZ_29FA4_160;
	}
	AT = 0x80000000;
	if (V0 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x8002A104);
		goto ZZ_29FA4_160;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x8002A104);
ZZ_29FA4_160:
	S5 = LO;
	V0 = EMU_ReadU32(S2 + 8); //+ 0x8
	EMU_SDivide(V0,S0);
	if (S0)
	{
		ZZ_CLOCKCYCLES(6,0x8002A120);
		goto ZZ_29FA4_17C;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(7,0x8002A120);
ZZ_29FA4_17C:
	AT = -1;
	if (S0 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x8002A138);
		goto ZZ_29FA4_194;
	}
	AT = 0x80000000;
	if (V0 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x8002A138);
		goto ZZ_29FA4_194;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x8002A138);
ZZ_29FA4_194:
	S6 = LO;
	A0 = S4;
	ZZ_CLOCKCYCLES(2,0x8002A140);
ZZ_29FA4_19C:
	A2 = 0x80060000;
	A2 = EMU_ReadU32(A2 + 11632); //+ 0x2D70
	A1 = S2;
	A3 = S1;
	S3 = 0x40000;
	RA = 0x8002A15C; //ZZ_29FA4_1B8
	A2 &= S3;
	ZZ_CLOCKCYCLES(7,0x8002EB98);
	goto ZZ_2EB98;
ZZ_29FA4_1B8:
	A2 = 0x80060000;
	A2 = EMU_ReadU32(A2 + 11632); //+ 0x2D70
	V0 = 0x80000;
	V0 &= A2;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(6,0x8002A238);
		goto ZZ_29FA4_294;
	}
	A1 = EMU_ReadU32(S2);
	V0 = (int32_t)A1 >> 8;
	EMU_SMultiply(V0,S5);
	V0 = EMU_ReadU32(S2 + 8); //+ 0x8
	V1 = LO;
	V0 = (int32_t)V0 >> 8;
	EMU_SMultiply(V0,S6);
	T0 = LO;
	V0 = V1 + T0;
	V1 = (int32_t)V0 >> 8;
	if ((int32_t)V1 >= 0)
	{
		V0 = (int32_t)V1 < (int32_t)S0;
		ZZ_CLOCKCYCLES(20,0x8002A1B4);
		goto ZZ_29FA4_210;
	}
	V0 = (int32_t)V1 < (int32_t)S0;
	V1 = R0;
	V0 = (int32_t)V1 < (int32_t)S0;
	ZZ_CLOCKCYCLES(22,0x8002A1B4);
ZZ_29FA4_210:
	if (!V0)
	{
		V1 = S0 - V1;
		ZZ_CLOCKCYCLES(2,0x8002A238);
		goto ZZ_29FA4_294;
	}
	V1 = S0 - V1;
	EMU_SMultiply(S5,V1);
	T0 = LO;
	V0 = EMU_ReadU32(S4);
	EMU_SMultiply(S6,V1);
	A0 = SP + 72;
	V0 += A1;
	EMU_Write32(SP + 72,V0); //+ 0x48
	V0 = EMU_ReadU32(S4 + 8); //+ 0x8
	V1 = EMU_ReadU32(S2 + 8); //+ 0x8
	A2 &= S3;
	A3 = S1;
	A1 = SP + 88;
	EMU_Write32(SP + 88,T0); //+ 0x58
	V0 += V1;
	EMU_Write32(SP + 80,V0); //+ 0x50
	T2 = LO;
	RA = 0x8002A208; //ZZ_29FA4_264
	EMU_Write32(SP + 96,T2); //+ 0x60
	ZZ_CLOCKCYCLES(21,0x8002EB98);
	goto ZZ_2EB98;
ZZ_29FA4_264:
	V0 = EMU_ReadU32(SP + 72); //+ 0x48
	V1 = EMU_ReadU32(SP + 88); //+ 0x58
	A0 = EMU_ReadU32(S4);
	V0 += V1;
	V0 = V0 - A0;
	EMU_Write32(S2,V0);
	V0 = EMU_ReadU32(SP + 80); //+ 0x50
	V1 = EMU_ReadU32(SP + 96); //+ 0x60
	A0 = EMU_ReadU32(S4 + 8); //+ 0x8
	V0 += V1;
	V0 = V0 - A0;
	EMU_Write32(S2 + 8,V0); //+ 0x8
	ZZ_CLOCKCYCLES(12,0x8002A238);
ZZ_29FA4_294:
	EMU_Write32(FP + 4172,R0); //+ 0x104C
	A0 = EMU_ReadU32(S2);
	if ((int32_t)A0 < 0)
	{
		V0 = 0x51EB0000;
		ZZ_CLOCKCYCLES(5,0x8002A25C);
		goto ZZ_29FA4_2B8;
	}
	V0 = 0x51EB0000;
	V0 |= 0x851F;
	EMU_SMultiply(A0,V0);
	V0 = (int32_t)A0 >> 31;
	ZZ_CLOCKCYCLES(9,0x8002A270);
	goto ZZ_29FA4_2CC;
ZZ_29FA4_2B8:
	V1 = 0x51EB0000;
	V1 |= 0x851F;
	V0 = -A0;
	EMU_SMultiply(V0,V1);
	V0 = (int32_t)V0 >> 31;
	ZZ_CLOCKCYCLES(5,0x8002A270);
ZZ_29FA4_2CC:
	T1 = HI;
	V1 = (int32_t)T1 >> 13;
	A0 = EMU_ReadU32(S2 + 8); //+ 0x8
	if ((int32_t)A0 < 0)
	{
		A2 = V1 - V0;
		ZZ_CLOCKCYCLES(6,0x8002A29C);
		goto ZZ_29FA4_2F8;
	}
	A2 = V1 - V0;
	V0 = 0x51EB0000;
	V0 |= 0x851F;
	EMU_SMultiply(A0,V0);
	V0 = (int32_t)A0 >> 31;
	ZZ_CLOCKCYCLES(11,0x8002A2B0);
	goto ZZ_29FA4_30C;
ZZ_29FA4_2F8:
	V1 = 0x51EB0000;
	V1 |= 0x851F;
	V0 = -A0;
	EMU_SMultiply(V0,V1);
	V0 = (int32_t)V0 >> 31;
	ZZ_CLOCKCYCLES(5,0x8002A2B0);
ZZ_29FA4_30C:
	T1 = HI;
	V1 = (int32_t)T1 >> 13;
	A1 = V1 - V0;
	V0 = EMU_ReadU32(S2 + 4); //+ 0x4
	if ((int32_t)V0 < 0)
	{
		ZZ_CLOCKCYCLES(7,0x8002A2E0);
		goto ZZ_29FA4_33C;
	}
	V0 = (int32_t)V0 < 25601;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(10,0x8002A2F0);
		goto ZZ_29FA4_34C;
	}
	ZZ_CLOCKCYCLES(12,0x8002A338);
	goto ZZ_29FA4_394;
ZZ_29FA4_33C:
	V0 = -V0;
	V0 = (int32_t)V0 < 25601;
	if (V0)
	{
		ZZ_CLOCKCYCLES(4,0x8002A338);
		goto ZZ_29FA4_394;
	}
	ZZ_CLOCKCYCLES(4,0x8002A2F0);
ZZ_29FA4_34C:
	A0 = EMU_ReadU32(S2 + 4); //+ 0x4
	if ((int32_t)A0 < 0)
	{
		V0 = 0x51EB0000;
		ZZ_CLOCKCYCLES(4,0x8002A318);
		goto ZZ_29FA4_374;
	}
	V0 = 0x51EB0000;
	V0 |= 0x851F;
	EMU_SMultiply(A0,V0);
	V0 = (int32_t)A0 >> 31;
	T1 = HI;
	V1 = (int32_t)T1 >> 13;
	ZZ_CLOCKCYCLES(10,0x8002A374);
	goto ZZ_29FA4_3D0;
ZZ_29FA4_374:
	V1 = 0x51EB0000;
	V1 |= 0x851F;
	V0 = -A0;
	EMU_SMultiply(V0,V1);
	V0 = (int32_t)V0 >> 31;
	T1 = HI;
	V1 = (int32_t)T1 >> 13;
	ZZ_CLOCKCYCLES(8,0x8002A374);
	goto ZZ_29FA4_3D0;
ZZ_29FA4_394:
	A0 = EMU_ReadU32(S2 + 4); //+ 0x4
	if ((int32_t)A0 < 0)
	{
		V0 = 0x51EB0000;
		ZZ_CLOCKCYCLES(4,0x8002A358);
		goto ZZ_29FA4_3B4;
	}
	V0 = 0x51EB0000;
	V0 |= 0x851F;
	EMU_SMultiply(A0,V0);
	V0 = (int32_t)A0 >> 31;
	ZZ_CLOCKCYCLES(8,0x8002A36C);
	goto ZZ_29FA4_3C8;
ZZ_29FA4_3B4:
	V1 = 0x51EB0000;
	V1 |= 0x851F;
	V0 = -A0;
	EMU_SMultiply(V0,V1);
	V0 = (int32_t)V0 >> 31;
	ZZ_CLOCKCYCLES(5,0x8002A36C);
ZZ_29FA4_3C8:
	T1 = HI;
	V1 = (int32_t)T1 >> 11;
	ZZ_CLOCKCYCLES(2,0x8002A374);
ZZ_29FA4_3D0:
	V1 = V1 - V0;
	S0 = A2;
	V0 = (int32_t)S0 < (int32_t)V1;
	if (!V0)
	{
		V0 = (int32_t)S0 < (int32_t)A1;
		ZZ_CLOCKCYCLES(5,0x8002A390);
		goto ZZ_29FA4_3EC;
	}
	V0 = (int32_t)S0 < (int32_t)A1;
	S0 = V1;
	V0 = (int32_t)S0 < (int32_t)A1;
	ZZ_CLOCKCYCLES(7,0x8002A390);
ZZ_29FA4_3EC:
	if (!V0)
	{
		S0 += 1;
		ZZ_CLOCKCYCLES(2,0x8002A3A0);
		goto ZZ_29FA4_3FC;
	}
	S0 += 1;
	S0 = A1;
	S0 += 1;
	ZZ_CLOCKCYCLES(4,0x8002A3A0);
ZZ_29FA4_3FC:
	A1 = 0x2;
	V0 = SP + 32;
	ZZ_CLOCKCYCLES(2,0x8002A3A8);
ZZ_29FA4_404:
	EMU_Write32(V0 + 32,R0); //+ 0x20
	A1 -= 1;
	if ((int32_t)A1 >= 0)
	{
		V0 -= 4;
		ZZ_CLOCKCYCLES(4,0x8002A3A8);
		goto ZZ_29FA4_404;
	}
	V0 -= 4;
	if ((int32_t)S0 <= 0)
	{
		S1 = 0x1;
		ZZ_CLOCKCYCLES(6,0x8002A498);
		goto ZZ_29FA4_4F4;
	}
	S1 = 0x1;
	S3 = SP + 24;
	A3 = R0;
	ZZ_CLOCKCYCLES(8,0x8002A3C8);
ZZ_29FA4_424:
	A1 = R0;
	A0 = S3;
	A2 = S2;
	V0 = S1 << 8;
	EMU_SDivide(V0,S0);
	if (S0)
	{
		ZZ_CLOCKCYCLES(7,0x8002A3E8);
		goto ZZ_29FA4_444;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(8,0x8002A3E8);
ZZ_29FA4_444:
	AT = -1;
	if (S0 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x8002A400);
		goto ZZ_29FA4_45C;
	}
	AT = 0x80000000;
	if (V0 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x8002A400);
		goto ZZ_29FA4_45C;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x8002A400);
ZZ_29FA4_45C:
	T0 = LO;
	ZZ_CLOCKCYCLES(1,0x8002A404);
ZZ_29FA4_460:
	V0 = EMU_ReadU32(A2);
	EMU_SMultiply(V0,T0);
	A2 += 4;
	V0 = EMU_ReadU32(A0 + 32); //+ 0x20
	A1 += 1;
	T1 = LO;
	V1 = (int32_t)T1 >> 8;
	V0 = V1 - V0;
	A3 |= V0;
	EMU_Write32(A0,V0);
	EMU_Write32(A0 + 32,V1); //+ 0x20
	V0 = (int32_t)A1 < 3;
	if (V0)
	{
		A0 += 4;
		ZZ_CLOCKCYCLES(15,0x8002A404);
		goto ZZ_29FA4_460;
	}
	A0 += 4;
	if (!A3)
	{
		V0 = SP + 40;
		ZZ_CLOCKCYCLES(17,0x8002A488);
		goto ZZ_29FA4_4E4;
	}
	V0 = SP + 40;
	EMU_Write32(SP + 16,V0); //+ 0x10
	A0 = S7;
	A1 = FP;
	A2 = S4;
	RA = 0x8002A460; //ZZ_29FA4_4BC
	A3 = SP + 24;
	ZZ_CLOCKCYCLES(23,0x8002C404);
	goto ZZ_2C404;
ZZ_29FA4_4BC:
	A1 = R0;
	A0 = S4;
	V1 = S3;
	ZZ_CLOCKCYCLES(3,0x8002A46C);
ZZ_29FA4_4C8:
	V0 = EMU_ReadU32(V1 + 16); //+ 0x10
	V1 += 4;
	A1 += 1;
	EMU_Write32(A0,V0);
	V0 = (int32_t)A1 < 3;
	if (V0)
	{
		A0 += 4;
		ZZ_CLOCKCYCLES(7,0x8002A46C);
		goto ZZ_29FA4_4C8;
	}
	A0 += 4;
	ZZ_CLOCKCYCLES(7,0x8002A488);
ZZ_29FA4_4E4:
	S1 += 1;
	V0 = (int32_t)S0 < (int32_t)S1;
	if (!V0)
	{
		A3 = R0;
		ZZ_CLOCKCYCLES(4,0x8002A3C8);
		goto ZZ_29FA4_424;
	}
	A3 = R0;
	ZZ_CLOCKCYCLES(4,0x8002A498);
ZZ_29FA4_4F4:
	RA = EMU_ReadU32(SP + 140); //+ 0x8C
	FP = EMU_ReadU32(SP + 136); //+ 0x88
	S7 = EMU_ReadU32(SP + 132); //+ 0x84
	S6 = EMU_ReadU32(SP + 128); //+ 0x80
	S5 = EMU_ReadU32(SP + 124); //+ 0x7C
	S4 = EMU_ReadU32(SP + 120); //+ 0x78
	S3 = EMU_ReadU32(SP + 116); //+ 0x74
	S2 = EMU_ReadU32(SP + 112); //+ 0x70
	S1 = EMU_ReadU32(SP + 108); //+ 0x6C
	S0 = EMU_ReadU32(SP + 104); //+ 0x68
	SP += 144;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(13);
	ZZ_JUMPREGISTER(0x80029CC0,ZZ_29AF8_1C8);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80029FA4,0x8002A02C,ZZ_29FA4);
ZZ_MARK_TARGET(0x8002A02C,0x8002A060,ZZ_29FA4_88);
ZZ_MARK_TARGET(0x8002A060,0x8002A07C,ZZ_29FA4_BC);
ZZ_MARK_TARGET(0x8002A07C,0x8002A0C4,ZZ_29FA4_D8);
ZZ_MARK_TARGET(0x8002A0C4,0x8002A0D4,ZZ_29FA4_120);
ZZ_MARK_TARGET(0x8002A0D4,0x8002A0EC,ZZ_29FA4_130);
ZZ_MARK_TARGET(0x8002A0EC,0x8002A104,ZZ_29FA4_148);
ZZ_MARK_TARGET(0x8002A104,0x8002A120,ZZ_29FA4_160);
ZZ_MARK_TARGET(0x8002A120,0x8002A138,ZZ_29FA4_17C);
ZZ_MARK_TARGET(0x8002A138,0x8002A140,ZZ_29FA4_194);
ZZ_MARK_TARGET(0x8002A140,0x8002A15C,ZZ_29FA4_19C);
ZZ_MARK_TARGET(0x8002A15C,0x8002A1B4,ZZ_29FA4_1B8);
ZZ_MARK_TARGET(0x8002A1B4,0x8002A208,ZZ_29FA4_210);
ZZ_MARK_TARGET(0x8002A208,0x8002A238,ZZ_29FA4_264);
ZZ_MARK_TARGET(0x8002A238,0x8002A25C,ZZ_29FA4_294);
ZZ_MARK_TARGET(0x8002A25C,0x8002A270,ZZ_29FA4_2B8);
ZZ_MARK_TARGET(0x8002A270,0x8002A29C,ZZ_29FA4_2CC);
ZZ_MARK_TARGET(0x8002A29C,0x8002A2B0,ZZ_29FA4_2F8);
ZZ_MARK_TARGET(0x8002A2B0,0x8002A2E0,ZZ_29FA4_30C);
ZZ_MARK_TARGET(0x8002A2E0,0x8002A2F0,ZZ_29FA4_33C);
ZZ_MARK_TARGET(0x8002A2F0,0x8002A318,ZZ_29FA4_34C);
ZZ_MARK_TARGET(0x8002A318,0x8002A338,ZZ_29FA4_374);
ZZ_MARK_TARGET(0x8002A338,0x8002A358,ZZ_29FA4_394);
ZZ_MARK_TARGET(0x8002A358,0x8002A36C,ZZ_29FA4_3B4);
ZZ_MARK_TARGET(0x8002A36C,0x8002A374,ZZ_29FA4_3C8);
ZZ_MARK_TARGET(0x8002A374,0x8002A390,ZZ_29FA4_3D0);
ZZ_MARK_TARGET(0x8002A390,0x8002A3A0,ZZ_29FA4_3EC);
ZZ_MARK_TARGET(0x8002A3A0,0x8002A3A8,ZZ_29FA4_3FC);
ZZ_MARK_TARGET(0x8002A3A8,0x8002A3C8,ZZ_29FA4_404);
ZZ_MARK_TARGET(0x8002A3C8,0x8002A3E8,ZZ_29FA4_424);
ZZ_MARK_TARGET(0x8002A3E8,0x8002A400,ZZ_29FA4_444);
ZZ_MARK_TARGET(0x8002A400,0x8002A404,ZZ_29FA4_45C);
ZZ_MARK_TARGET(0x8002A404,0x8002A460,ZZ_29FA4_460);
ZZ_MARK_TARGET(0x8002A460,0x8002A46C,ZZ_29FA4_4BC);
ZZ_MARK_TARGET(0x8002A46C,0x8002A488,ZZ_29FA4_4C8);
ZZ_MARK_TARGET(0x8002A488,0x8002A498,ZZ_29FA4_4E4);
ZZ_MARK_TARGET(0x8002A498,0x8002A4CC,ZZ_29FA4_4F4);
