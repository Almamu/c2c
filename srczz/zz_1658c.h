#ifdef ZZ_INCLUDE_CODE
ZZ_1658C:
	SP -= 72;
	V0 = 0x80070000;
	V0 -= 12408;
	EMU_Write32(SP + 64,RA); //+ 0x40
	EMU_Write32(SP + 60,S3); //+ 0x3C
	EMU_Write32(SP + 56,S2); //+ 0x38
	EMU_Write32(SP + 52,S1); //+ 0x34
	EMU_Write32(SP + 48,S0); //+ 0x30
	V1 = EMU_ReadU32(V0);
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 - 3048); //+ 0xFFFFF418
	V1 += 1;
	if (A0)
	{
		EMU_Write32(V0,V1);
		ZZ_CLOCKCYCLES(14,0x800165F4);
		goto ZZ_1658C_68;
	}
	EMU_Write32(V0,V1);
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 12756); //+ 0xFFFFCE2C
	V0 &= 0x1000;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(20,0x800165F4);
		goto ZZ_1658C_68;
	}
	V1 = 0x80060000;
	V1 += 3036;
	V0 = EMU_ReadU32(V1);
	V0 += 1;
	EMU_Write32(V1,V0);
	ZZ_CLOCKCYCLES(26,0x800165F4);
ZZ_1658C_68:
	S0 = 0x80070000;
	S0 -= 12368;
	V1 = EMU_ReadU32(S0);
	if (!V1)
	{
		ZZ_CLOCKCYCLES(6,0x800166A4);
		goto ZZ_1658C_118;
	}
	if ((int32_t)V1 <= 0)
	{
		V0 = (int32_t)V1 < -2;
		ZZ_CLOCKCYCLES(8,0x80016644);
		goto ZZ_1658C_B8;
	}
	V0 = (int32_t)V1 < -2;
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 12364); //+ 0xFFFFCFB4
	V0 = V1 - V0;
	if ((int32_t)V0 >= 0)
	{
		EMU_Write32(S0,V0);
		ZZ_CLOCKCYCLES(14,0x80016630);
		goto ZZ_1658C_A4;
	}
	EMU_Write32(S0,V0);
	EMU_Write32(S0,R0);
	ZZ_CLOCKCYCLES(15,0x80016630);
ZZ_1658C_A4:
	A0 = EMU_ReadU32(S0);
	RA = 0x8001663C; //ZZ_1658C_B0
	ZZ_CLOCKCYCLES(3,0x80016C38);
	goto ZZ_16C38;
ZZ_1658C_B0:
	ZZ_CLOCKCYCLES(2,0x800166A4);
	goto ZZ_1658C_118;
ZZ_1658C_B8:
	if (V0)
	{
		ZZ_CLOCKCYCLES(2,0x8001665C);
		goto ZZ_1658C_D0;
	}
	RA = 0x80016654; //ZZ_1658C_C8
	A0 = 0x100;
	ZZ_CLOCKCYCLES(4,0x80016C38);
	goto ZZ_16C38;
ZZ_1658C_C8:
	V0 = -1;
	ZZ_CLOCKCYCLES(2,0x800166A0);
	goto ZZ_1658C_114;
ZZ_1658C_D0:
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 12364); //+ 0xFFFFCFB4
	V0 += V1;
	A0 = V0 + 256;
	RA = 0x80016678; //ZZ_1658C_EC
	EMU_Write32(S0,V0);
	ZZ_CLOCKCYCLES(7,0x80016C38);
	goto ZZ_16C38;
ZZ_1658C_EC:
	V0 = EMU_ReadU32(S0);
	if (V0)
	{
		V1 = 0x400000;
		ZZ_CLOCKCYCLES(4,0x800166A4);
		goto ZZ_1658C_118;
	}
	V1 = 0x400000;
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 12756); //+ 0xFFFFCE2C
	V0 &= V1;
	if (V0)
	{
		V0 = -2;
		ZZ_CLOCKCYCLES(10,0x800166A4);
		goto ZZ_1658C_118;
	}
	V0 = -2;
	ZZ_CLOCKCYCLES(10,0x800166A0);
ZZ_1658C_114:
	EMU_Write32(S0,V0);
	ZZ_CLOCKCYCLES(1,0x800166A4);
ZZ_1658C_118:
	S0 = 0x80070000;
	S0 -= 12500;
	A0 = EMU_ReadU32(S0);
	A1 = EMU_ReadU32(GP + 88); //+ 0x58
	RA = 0x800166BC; //ZZ_1658C_130
	ZZ_CLOCKCYCLES(6,0x80016D84);
	goto ZZ_16D84;
ZZ_1658C_130:
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 12756); //+ 0xFFFFCE2C
	V1 = EMU_ReadU32(S0);
	V0 &= 0x2000;
	EMU_Write32(GP + 88,V1); //+ 0x58
	if (!V0)
	{
		S0 = 0x1;
		ZZ_CLOCKCYCLES(7,0x800168C0);
		goto ZZ_1658C_334;
	}
	S0 = 0x1;
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 2916); //+ 0xB64
	if (!V0)
	{
		S1 = R0;
		ZZ_CLOCKCYCLES(12,0x80016780);
		goto ZZ_1658C_1F4;
	}
	S1 = R0;
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 + 2928); //+ 0xB70
	A2 = 0x80060000;
	A2 = EMU_ReadU32(A2 + 2936); //+ 0xB78
	A1 = 0x1FA;
	A3 = R0;
	EMU_Write32(SP + 16,R0); //+ 0x10
	EMU_Write32(SP + 20,R0); //+ 0x14
	EMU_Write32(SP + 24,R0); //+ 0x18
	EMU_Write32(SP + 28,R0); //+ 0x1C
	RA = 0x8001671C; //ZZ_1658C_190
	EMU_Write32(SP + 32,R0); //+ 0x20
	ZZ_CLOCKCYCLES(24,0x80031DF4);
	goto ZZ_31DF4;
ZZ_1658C_190:
	V1 = V0;
	if (!V1)
	{
		V0 = 0x2;
		ZZ_CLOCKCYCLES(3,0x80016780);
		goto ZZ_1658C_1F4;
	}
	V0 = 0x2;
	S0 = EMU_ReadU32(V1);
	S1 = EMU_ReadU32(V1 + 4); //+ 0x4
	if (S0 != V0)
	{
		V0 = 0x1;
		ZZ_CLOCKCYCLES(7,0x8001680C);
		goto ZZ_1658C_280;
	}
	V0 = 0x1;
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 + 2928); //+ 0xB70
	A2 = 0x80060000;
	A2 = EMU_ReadU32(A2 + 2936); //+ 0xB78
	S3 = EMU_ReadU32(V1 + 8); //+ 0x8
	A1 = 0x1F9;
	A3 = R0;
	V0 = 0x3;
	EMU_Write32(SP + 20,V0); //+ 0x14
	V0 = SP + 40;
	EMU_Write32(SP + 16,R0); //+ 0x10
	EMU_Write32(SP + 24,V0); //+ 0x18
	EMU_Write32(SP + 28,R0); //+ 0x1C
	RA = 0x80016774; //ZZ_1658C_1E8
	EMU_Write32(SP + 32,R0); //+ 0x20
	ZZ_CLOCKCYCLES(22,0x80031DF4);
	goto ZZ_31DF4;
ZZ_1658C_1E8:
	if (!V0)
	{
		S2 = R0;
		ZZ_CLOCKCYCLES(2,0x80016780);
		goto ZZ_1658C_1F4;
	}
	S2 = R0;
	S2 = EMU_ReadS16(V0);
	ZZ_CLOCKCYCLES(3,0x80016780);
ZZ_1658C_1F4:
	V0 = 0x2;
	if (S0 != V0)
	{
		V0 = 0x1;
		ZZ_CLOCKCYCLES(3,0x8001680C);
		goto ZZ_1658C_280;
	}
	V0 = 0x1;
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 + 2712); //+ 0xA98
	RA = 0x8001679C; //ZZ_1658C_210
	ZZ_CLOCKCYCLES(7,0x8003D584);
	goto ZZ_3D584;
ZZ_1658C_210:
	V1 = V0 << 2;
	V1 += V0;
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 + 2844); //+ 0xB1C
	V0 = V1 << 4;
	V1 += V0;
	V1 <<= 1;
	EMU_SMultiply(A0,V1);
	V0 = S2 - 128;
	A0 = 0x80070000;
	A0 = EMU_ReadU32(A0 - 12500); //+ 0xFFFFCF2C
	T0 = LO;
	V1 = (int32_t)T0 >> 20;
	if (!A0)
	{
		S2 = V1 - V0;
		ZZ_CLOCKCYCLES(15,0x800167EC);
		goto ZZ_1658C_260;
	}
	S2 = V1 - V0;
	V0 = A0 << 4;
	V0 = V0 - A0;
	V0 <<= 3;
	V0 = (int32_t)V0 >> 3;
	S2 = S2 - V0;
	ZZ_CLOCKCYCLES(20,0x800167EC);
ZZ_1658C_260:
	if ((int32_t)S2 >= 0)
	{
		V0 = (int32_t)S2 < 255;
		ZZ_CLOCKCYCLES(2,0x800167FC);
		goto ZZ_1658C_270;
	}
	V0 = (int32_t)S2 < 255;
	S1 = S3;
	ZZ_CLOCKCYCLES(4,0x80016804);
	goto ZZ_1658C_278;
ZZ_1658C_270:
	if (V0)
	{
		V0 = 0x1;
		ZZ_CLOCKCYCLES(2,0x8001680C);
		goto ZZ_1658C_280;
	}
	V0 = 0x1;
	ZZ_CLOCKCYCLES(2,0x80016804);
ZZ_1658C_278:
	S0 = 0x1;
	V0 = 0x1;
	ZZ_CLOCKCYCLES(2,0x8001680C);
ZZ_1658C_280:
	if (S0 == V0)
	{
		A0 = R0;
		ZZ_CLOCKCYCLES(2,0x80016830);
		goto ZZ_1658C_2A4;
	}
	A0 = R0;
	V0 = (int32_t)S0 < 2;
	if (V0)
	{
		V0 = 0x2;
		ZZ_CLOCKCYCLES(5,0x800168C0);
		goto ZZ_1658C_334;
	}
	V0 = 0x2;
	if (S0 == V0)
	{
		A1 = R0;
		ZZ_CLOCKCYCLES(7,0x80016858);
		goto ZZ_1658C_2CC;
	}
	A1 = R0;
	ZZ_CLOCKCYCLES(9,0x800168C0);
	goto ZZ_1658C_334;
ZZ_1658C_2A4:
	A1 = R0;
	A2 = 0x200;
	A3 = 0x100;
	V0 = S1 & 0xFF;
	EMU_Write32(SP + 16,V0); //+ 0x10
	V0 = S1 >> 8;
	V0 &= 0xFF;
	EMU_Write32(SP + 20,V0); //+ 0x14
	V0 = S1 >> 16;
	ZZ_CLOCKCYCLES(10,0x800168B4);
	goto ZZ_1658C_328;
ZZ_1658C_2CC:
	A2 = 0x200;
	S0 = S2 + 1;
	A3 = S0;
	V0 = S1 & 0xFF;
	EMU_Write32(SP + 16,V0); //+ 0x10
	V0 = S1 >> 8;
	V0 &= 0xFF;
	EMU_Write32(SP + 20,V0); //+ 0x14
	V0 = S1 >> 16;
	V0 &= 0xFF;
	RA = 0x80016888; //ZZ_1658C_2FC
	EMU_Write32(SP + 24,V0); //+ 0x18
	ZZ_CLOCKCYCLES(12,0x80016B90);
	goto ZZ_16B90;
ZZ_1658C_2FC:
	A0 = R0;
	A1 = S0;
	A2 = 0x200;
	A3 = 0xFF;
	A3 = A3 - S2;
	V0 = S3 & 0xFF;
	EMU_Write32(SP + 16,V0); //+ 0x10
	V0 = S3 >> 8;
	V0 &= 0xFF;
	EMU_Write32(SP + 20,V0); //+ 0x14
	V0 = S3 >> 16;
	ZZ_CLOCKCYCLES(11,0x800168B4);
ZZ_1658C_328:
	V0 &= 0xFF;
	RA = 0x800168C0; //ZZ_1658C_334
	EMU_Write32(SP + 24,V0); //+ 0x18
	ZZ_CLOCKCYCLES(3,0x80016B90);
	goto ZZ_16B90;
ZZ_1658C_334:
	RA = 0x800168C8; //ZZ_1658C_33C
	ZZ_CLOCKCYCLES(2,0x800337BC);
	goto ZZ_337BC;
ZZ_1658C_33C:
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 + 14060); //+ 0x36EC
	V0 = 0x80040000;
	V0 = EMU_ReadU32(V0 - 16068); //+ 0xFFFFC13C
	A0 = R0;
	RA = 0x800168E4; //ZZ_1658C_358
	EMU_Write32(V1 + 16,V0); //+ 0x10
	ZZ_CLOCKCYCLES(7,0x8004C2DC);
	goto ZZ_4C2DC;
ZZ_1658C_358:
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 12372); //+ 0xFFFFCFAC
	if (V0)
	{
		V0 = 0x14;
		ZZ_CLOCKCYCLES(5,0x80016924);
		goto ZZ_1658C_398;
	}
	V0 = 0x14;
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 14060); //+ 0x36EC
	V1 = 0x80040000;
	V1 = EMU_ReadU32(V1 - 16068); //+ 0xFFFFC13C
	V0 = EMU_ReadU32(V0 + 12); //+ 0xC
	V1 = V1 - V0;
	AT = 0x80070000;
	EMU_Write32(AT - 12620,V1); //+ 0xFFFFCEB4
	ZZ_CLOCKCYCLES(16,0x8001692C);
	goto ZZ_1658C_3A0;
ZZ_1658C_398:
	AT = 0x80070000;
	EMU_Write32(AT - 12620,V0); //+ 0xFFFFCEB4
	ZZ_CLOCKCYCLES(2,0x8001692C);
ZZ_1658C_3A0:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 30788); //+ 0x7844
	if (V0)
	{
		ZZ_CLOCKCYCLES(5,0x80016968);
		goto ZZ_1658C_3DC;
	}
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 + 14060); //+ 0x36EC
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 14064); //+ 0x36F0
	AT = 0x80060000;
	EMU_Write32(AT + 14056,V1); //+ 0x36E8
	AT = 0x80060000;
	EMU_Write32(AT + 14060,V0); //+ 0x36EC
	AT = 0x80060000;
	EMU_Write32(AT + 14064,V1); //+ 0x36F0
	ZZ_CLOCKCYCLES(15,0x80016968);
ZZ_1658C_3DC:
	RA = 0x80016970; //ZZ_1658C_3E4
	A0 = R0;
	ZZ_CLOCKCYCLES(2,0x8004A71C);
	goto ZZ_4A71C;
ZZ_1658C_3E4:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 14056); //+ 0x36E8
	V1 = 0x80040000;
	V1 = EMU_ReadU32(V1 - 16068); //+ 0xFFFFC13C
	V0 = EMU_ReadU32(V0 + 12); //+ 0xC
	V1 = V1 - V0;
	V1 = V1 < 30;
	if (!V1)
	{
		ZZ_CLOCKCYCLES(10,0x800169A0);
		goto ZZ_1658C_414;
	}
	RA = 0x800169A0; //ZZ_1658C_414
	A0 = R0;
	ZZ_CLOCKCYCLES(12,0x8004A71C);
	goto ZZ_4A71C;
ZZ_1658C_414:
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 12756); //+ 0xFFFFCE2C
	V1 = 0x200000;
	V0 &= V1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(6,0x80016A14);
		goto ZZ_1658C_488;
	}
	V0 = EMU_ReadU32(GP + 92); //+ 0x5C
	if (V0)
	{
		V0 = 0x1;
		ZZ_CLOCKCYCLES(10,0x800169E8);
		goto ZZ_1658C_45C;
	}
	V0 = 0x1;
	RA = 0x800169D0; //ZZ_1658C_444
	ZZ_CLOCKCYCLES(12,0x80049FB4);
	goto ZZ_49FB4;
ZZ_1658C_444:
	A0 = 0xF2000000;
	RA = 0x800169DC; //ZZ_1658C_450
	A0 |= 0x2;
	ZZ_CLOCKCYCLES(3,0x8004A16C);
	goto ZZ_4A16C;
ZZ_1658C_450:
	RA = 0x800169E4; //ZZ_1658C_458
	ZZ_CLOCKCYCLES(2,0x80049FC4);
	goto ZZ_49FC4;
ZZ_1658C_458:
	V0 = 0x1;
	ZZ_CLOCKCYCLES(1,0x800169E8);
ZZ_1658C_45C:
	EMU_Write32(GP + 92,V0); //+ 0x5C
	RA = 0x800169F4; //ZZ_1658C_468
	ZZ_CLOCKCYCLES(3,0x800348EC);
	goto ZZ_348EC;
ZZ_1658C_468:
	V0 = 0x80040000;
	V0 = EMU_ReadU32(V0 - 16068); //+ 0xFFFFC13C
	V0 += 40;
	AT = 0x80040000;
	EMU_Write32(AT - 16068,V0); //+ 0xFFFFC13C
	ZZ_CLOCKCYCLES(8,0x80016A44);
	goto ZZ_1658C_4B8;
ZZ_1658C_488:
	V0 = EMU_ReadU32(GP + 92); //+ 0x5C
	if (!V0)
	{
		ZZ_CLOCKCYCLES(4,0x80016A40);
		goto ZZ_1658C_4B4;
	}
	RA = 0x80016A2C; //ZZ_1658C_4A0
	ZZ_CLOCKCYCLES(6,0x80049FB4);
	goto ZZ_49FB4;
ZZ_1658C_4A0:
	A0 = 0xF2000000;
	RA = 0x80016A38; //ZZ_1658C_4AC
	A0 |= 0x2;
	ZZ_CLOCKCYCLES(3,0x8004A138);
	goto ZZ_4A138;
ZZ_1658C_4AC:
	RA = 0x80016A40; //ZZ_1658C_4B4
	ZZ_CLOCKCYCLES(2,0x80049FC4);
	goto ZZ_49FC4;
ZZ_1658C_4B4:
	EMU_Write32(GP + 92,R0); //+ 0x5C
	ZZ_CLOCKCYCLES(1,0x80016A44);
ZZ_1658C_4B8:
	RA = 0x80016A4C; //ZZ_1658C_4C0
	ZZ_CLOCKCYCLES(2,0x80049FB4);
	goto ZZ_49FB4;
ZZ_1658C_4C0:
	V1 = 0x80070000;
	V1 = EMU_ReadU32(V1 - 12372); //+ 0xFFFFCFAC
	V0 = 0x2;
	if (V1 != V0)
	{
		ZZ_CLOCKCYCLES(5,0x80016A74);
		goto ZZ_1658C_4E8;
	}
	V0 = EMU_ReadU32(GP + 504); //+ 0x1F8
	V0 = EMU_ReadU32(V0);
	AT = 0x80040000;
	EMU_Write32(AT - 16068,V0); //+ 0xFFFFC13C
	ZZ_CLOCKCYCLES(10,0x80016A74);
ZZ_1658C_4E8:
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 + 14060); //+ 0x36EC
	V0 = 0x80040000;
	V0 = EMU_ReadU32(V0 - 16068); //+ 0xFFFFC13C
	RA = 0x80016A8C; //ZZ_1658C_500
	EMU_Write32(V1 + 12,V0); //+ 0xC
	ZZ_CLOCKCYCLES(6,0x80049FC4);
	goto ZZ_49FC4;
ZZ_1658C_500:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 14060); //+ 0x36EC
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 + 14056); //+ 0x36E8
	V0 = EMU_ReadU32(V0 + 12); //+ 0xC
	A0 = EMU_ReadU32(V1 + 12); //+ 0xC
	RA = 0x80016AAC; //ZZ_1658C_520
	A0 = V0 - A0;
	ZZ_CLOCKCYCLES(8,0x80017028);
	goto ZZ_17028;
ZZ_1658C_520:
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 + 14056); //+ 0x36E8
	EMU_Write32(V1 + 20,V0); //+ 0x14
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 + 14056); //+ 0x36E8
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 12428); //+ 0xFFFFCF74
	EMU_Write16(V1 + 8224,V0); //+ 0x2020
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 + 14056); //+ 0x36E8
	RA = 0x80016AE4; //ZZ_1658C_558
	A0 += 8216;
	ZZ_CLOCKCYCLES(14,0x8004CBA8);
	goto ZZ_4CBA8;
ZZ_1658C_558:
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 + 14060); //+ 0x36EC
	RA = 0x80016AF4; //ZZ_1658C_568
	A0 += 8236;
	ZZ_CLOCKCYCLES(4,0x8004C950);
	goto ZZ_4C950;
ZZ_1658C_568:
	V1 = 0x80060000;
	V1 += 30788;
	V0 = EMU_ReadU32(V1);
	if ((int32_t)V0 <= 0)
	{
		V0 -= 1;
		ZZ_CLOCKCYCLES(6,0x80016B10);
		goto ZZ_1658C_584;
	}
	V0 -= 1;
	EMU_Write32(V1,V0);
	ZZ_CLOCKCYCLES(7,0x80016B10);
ZZ_1658C_584:
	V0 = EMU_ReadU32(V1);
	if (V0)
	{
		V1 = 0x40000;
		ZZ_CLOCKCYCLES(4,0x80016B50);
		goto ZZ_1658C_5C4;
	}
	V1 = 0x40000;
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 12756); //+ 0xFFFFCE2C
	V0 &= V1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(10,0x80016B40);
		goto ZZ_1658C_5B4;
	}
	RA = 0x80016B40; //ZZ_1658C_5B4
	ZZ_CLOCKCYCLES(12,0x800272E0);
	goto ZZ_272E0;
ZZ_1658C_5B4:
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 + 14060); //+ 0x36EC
	RA = 0x80016B50; //ZZ_1658C_5C4
	A0 += 24;
	ZZ_CLOCKCYCLES(4,0x8004C8DC);
	goto ZZ_4C8DC;
ZZ_1658C_5C4:
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 + 14064); //+ 0x36F0
	RA = 0x80016B60; //ZZ_1658C_5D4
	ZZ_CLOCKCYCLES(4,0x800164F4);
	goto ZZ_164F4;
ZZ_1658C_5D4:
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 12776); //+ 0xFFFFCE18
	AT = 0x80070000;
	EMU_Write32(AT - 12756,V0); //+ 0xFFFFCE2C
	RA = EMU_ReadU32(SP + 64); //+ 0x40
	S3 = EMU_ReadU32(SP + 60); //+ 0x3C
	S2 = EMU_ReadU32(SP + 56); //+ 0x38
	S1 = EMU_ReadU32(SP + 52); //+ 0x34
	S0 = EMU_ReadU32(SP + 48); //+ 0x30
	SP += 72;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(12);
	ZZ_JUMPREGISTER(0x80011DBC,ZZ_11800_5BC);
	ZZ_JUMPREGISTER(0x80011DE8,ZZ_11800_5E8);
	ZZ_JUMPREGISTER(0x80011DF0,ZZ_11800_5F0);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8001658C,ZZ_1658C);
ZZ_MARK(0x80016590);
ZZ_MARK(0x80016594);
ZZ_MARK(0x80016598);
ZZ_MARK(0x8001659C);
ZZ_MARK(0x800165A0);
ZZ_MARK(0x800165A4);
ZZ_MARK(0x800165A8);
ZZ_MARK(0x800165AC);
ZZ_MARK(0x800165B0);
ZZ_MARK(0x800165B4);
ZZ_MARK(0x800165B8);
ZZ_MARK(0x800165BC);
ZZ_MARK(0x800165C0);
ZZ_MARK(0x800165C4);
ZZ_MARK(0x800165C8);
ZZ_MARK(0x800165CC);
ZZ_MARK(0x800165D0);
ZZ_MARK(0x800165D4);
ZZ_MARK(0x800165D8);
ZZ_MARK(0x800165DC);
ZZ_MARK(0x800165E0);
ZZ_MARK(0x800165E4);
ZZ_MARK(0x800165E8);
ZZ_MARK(0x800165EC);
ZZ_MARK(0x800165F0);
ZZ_MARK_TARGET(0x800165F4,ZZ_1658C_68);
ZZ_MARK(0x800165F8);
ZZ_MARK(0x800165FC);
ZZ_MARK(0x80016600);
ZZ_MARK(0x80016604);
ZZ_MARK(0x80016608);
ZZ_MARK(0x8001660C);
ZZ_MARK(0x80016610);
ZZ_MARK(0x80016614);
ZZ_MARK(0x80016618);
ZZ_MARK(0x8001661C);
ZZ_MARK(0x80016620);
ZZ_MARK(0x80016624);
ZZ_MARK(0x80016628);
ZZ_MARK(0x8001662C);
ZZ_MARK_TARGET(0x80016630,ZZ_1658C_A4);
ZZ_MARK(0x80016634);
ZZ_MARK(0x80016638);
ZZ_MARK_TARGET(0x8001663C,ZZ_1658C_B0);
ZZ_MARK(0x80016640);
ZZ_MARK_TARGET(0x80016644,ZZ_1658C_B8);
ZZ_MARK(0x80016648);
ZZ_MARK(0x8001664C);
ZZ_MARK(0x80016650);
ZZ_MARK_TARGET(0x80016654,ZZ_1658C_C8);
ZZ_MARK(0x80016658);
ZZ_MARK_TARGET(0x8001665C,ZZ_1658C_D0);
ZZ_MARK(0x80016660);
ZZ_MARK(0x80016664);
ZZ_MARK(0x80016668);
ZZ_MARK(0x8001666C);
ZZ_MARK(0x80016670);
ZZ_MARK(0x80016674);
ZZ_MARK_TARGET(0x80016678,ZZ_1658C_EC);
ZZ_MARK(0x8001667C);
ZZ_MARK(0x80016680);
ZZ_MARK(0x80016684);
ZZ_MARK(0x80016688);
ZZ_MARK(0x8001668C);
ZZ_MARK(0x80016690);
ZZ_MARK(0x80016694);
ZZ_MARK(0x80016698);
ZZ_MARK(0x8001669C);
ZZ_MARK_TARGET(0x800166A0,ZZ_1658C_114);
ZZ_MARK_TARGET(0x800166A4,ZZ_1658C_118);
ZZ_MARK(0x800166A8);
ZZ_MARK(0x800166AC);
ZZ_MARK(0x800166B0);
ZZ_MARK(0x800166B4);
ZZ_MARK(0x800166B8);
ZZ_MARK_TARGET(0x800166BC,ZZ_1658C_130);
ZZ_MARK(0x800166C0);
ZZ_MARK(0x800166C4);
ZZ_MARK(0x800166C8);
ZZ_MARK(0x800166CC);
ZZ_MARK(0x800166D0);
ZZ_MARK(0x800166D4);
ZZ_MARK(0x800166D8);
ZZ_MARK(0x800166DC);
ZZ_MARK(0x800166E0);
ZZ_MARK(0x800166E4);
ZZ_MARK(0x800166E8);
ZZ_MARK(0x800166EC);
ZZ_MARK(0x800166F0);
ZZ_MARK(0x800166F4);
ZZ_MARK(0x800166F8);
ZZ_MARK(0x800166FC);
ZZ_MARK(0x80016700);
ZZ_MARK(0x80016704);
ZZ_MARK(0x80016708);
ZZ_MARK(0x8001670C);
ZZ_MARK(0x80016710);
ZZ_MARK(0x80016714);
ZZ_MARK(0x80016718);
ZZ_MARK_TARGET(0x8001671C,ZZ_1658C_190);
ZZ_MARK(0x80016720);
ZZ_MARK(0x80016724);
ZZ_MARK(0x80016728);
ZZ_MARK(0x8001672C);
ZZ_MARK(0x80016730);
ZZ_MARK(0x80016734);
ZZ_MARK(0x80016738);
ZZ_MARK(0x8001673C);
ZZ_MARK(0x80016740);
ZZ_MARK(0x80016744);
ZZ_MARK(0x80016748);
ZZ_MARK(0x8001674C);
ZZ_MARK(0x80016750);
ZZ_MARK(0x80016754);
ZZ_MARK(0x80016758);
ZZ_MARK(0x8001675C);
ZZ_MARK(0x80016760);
ZZ_MARK(0x80016764);
ZZ_MARK(0x80016768);
ZZ_MARK(0x8001676C);
ZZ_MARK(0x80016770);
ZZ_MARK_TARGET(0x80016774,ZZ_1658C_1E8);
ZZ_MARK(0x80016778);
ZZ_MARK(0x8001677C);
ZZ_MARK_TARGET(0x80016780,ZZ_1658C_1F4);
ZZ_MARK(0x80016784);
ZZ_MARK(0x80016788);
ZZ_MARK(0x8001678C);
ZZ_MARK(0x80016790);
ZZ_MARK(0x80016794);
ZZ_MARK(0x80016798);
ZZ_MARK_TARGET(0x8001679C,ZZ_1658C_210);
ZZ_MARK(0x800167A0);
ZZ_MARK(0x800167A4);
ZZ_MARK(0x800167A8);
ZZ_MARK(0x800167AC);
ZZ_MARK(0x800167B0);
ZZ_MARK(0x800167B4);
ZZ_MARK(0x800167B8);
ZZ_MARK(0x800167BC);
ZZ_MARK(0x800167C0);
ZZ_MARK(0x800167C4);
ZZ_MARK(0x800167C8);
ZZ_MARK(0x800167CC);
ZZ_MARK(0x800167D0);
ZZ_MARK(0x800167D4);
ZZ_MARK(0x800167D8);
ZZ_MARK(0x800167DC);
ZZ_MARK(0x800167E0);
ZZ_MARK(0x800167E4);
ZZ_MARK(0x800167E8);
ZZ_MARK_TARGET(0x800167EC,ZZ_1658C_260);
ZZ_MARK(0x800167F0);
ZZ_MARK(0x800167F4);
ZZ_MARK(0x800167F8);
ZZ_MARK_TARGET(0x800167FC,ZZ_1658C_270);
ZZ_MARK(0x80016800);
ZZ_MARK_TARGET(0x80016804,ZZ_1658C_278);
ZZ_MARK(0x80016808);
ZZ_MARK_TARGET(0x8001680C,ZZ_1658C_280);
ZZ_MARK(0x80016810);
ZZ_MARK(0x80016814);
ZZ_MARK(0x80016818);
ZZ_MARK(0x8001681C);
ZZ_MARK(0x80016820);
ZZ_MARK(0x80016824);
ZZ_MARK(0x80016828);
ZZ_MARK(0x8001682C);
ZZ_MARK_TARGET(0x80016830,ZZ_1658C_2A4);
ZZ_MARK(0x80016834);
ZZ_MARK(0x80016838);
ZZ_MARK(0x8001683C);
ZZ_MARK(0x80016840);
ZZ_MARK(0x80016844);
ZZ_MARK(0x80016848);
ZZ_MARK(0x8001684C);
ZZ_MARK(0x80016850);
ZZ_MARK(0x80016854);
ZZ_MARK_TARGET(0x80016858,ZZ_1658C_2CC);
ZZ_MARK(0x8001685C);
ZZ_MARK(0x80016860);
ZZ_MARK(0x80016864);
ZZ_MARK(0x80016868);
ZZ_MARK(0x8001686C);
ZZ_MARK(0x80016870);
ZZ_MARK(0x80016874);
ZZ_MARK(0x80016878);
ZZ_MARK(0x8001687C);
ZZ_MARK(0x80016880);
ZZ_MARK(0x80016884);
ZZ_MARK_TARGET(0x80016888,ZZ_1658C_2FC);
ZZ_MARK(0x8001688C);
ZZ_MARK(0x80016890);
ZZ_MARK(0x80016894);
ZZ_MARK(0x80016898);
ZZ_MARK(0x8001689C);
ZZ_MARK(0x800168A0);
ZZ_MARK(0x800168A4);
ZZ_MARK(0x800168A8);
ZZ_MARK(0x800168AC);
ZZ_MARK(0x800168B0);
ZZ_MARK_TARGET(0x800168B4,ZZ_1658C_328);
ZZ_MARK(0x800168B8);
ZZ_MARK(0x800168BC);
ZZ_MARK_TARGET(0x800168C0,ZZ_1658C_334);
ZZ_MARK(0x800168C4);
ZZ_MARK_TARGET(0x800168C8,ZZ_1658C_33C);
ZZ_MARK(0x800168CC);
ZZ_MARK(0x800168D0);
ZZ_MARK(0x800168D4);
ZZ_MARK(0x800168D8);
ZZ_MARK(0x800168DC);
ZZ_MARK(0x800168E0);
ZZ_MARK_TARGET(0x800168E4,ZZ_1658C_358);
ZZ_MARK(0x800168E8);
ZZ_MARK(0x800168EC);
ZZ_MARK(0x800168F0);
ZZ_MARK(0x800168F4);
ZZ_MARK(0x800168F8);
ZZ_MARK(0x800168FC);
ZZ_MARK(0x80016900);
ZZ_MARK(0x80016904);
ZZ_MARK(0x80016908);
ZZ_MARK(0x8001690C);
ZZ_MARK(0x80016910);
ZZ_MARK(0x80016914);
ZZ_MARK(0x80016918);
ZZ_MARK(0x8001691C);
ZZ_MARK(0x80016920);
ZZ_MARK_TARGET(0x80016924,ZZ_1658C_398);
ZZ_MARK(0x80016928);
ZZ_MARK_TARGET(0x8001692C,ZZ_1658C_3A0);
ZZ_MARK(0x80016930);
ZZ_MARK(0x80016934);
ZZ_MARK(0x80016938);
ZZ_MARK(0x8001693C);
ZZ_MARK(0x80016940);
ZZ_MARK(0x80016944);
ZZ_MARK(0x80016948);
ZZ_MARK(0x8001694C);
ZZ_MARK(0x80016950);
ZZ_MARK(0x80016954);
ZZ_MARK(0x80016958);
ZZ_MARK(0x8001695C);
ZZ_MARK(0x80016960);
ZZ_MARK(0x80016964);
ZZ_MARK_TARGET(0x80016968,ZZ_1658C_3DC);
ZZ_MARK(0x8001696C);
ZZ_MARK_TARGET(0x80016970,ZZ_1658C_3E4);
ZZ_MARK(0x80016974);
ZZ_MARK(0x80016978);
ZZ_MARK(0x8001697C);
ZZ_MARK(0x80016980);
ZZ_MARK(0x80016984);
ZZ_MARK(0x80016988);
ZZ_MARK(0x8001698C);
ZZ_MARK(0x80016990);
ZZ_MARK(0x80016994);
ZZ_MARK(0x80016998);
ZZ_MARK(0x8001699C);
ZZ_MARK_TARGET(0x800169A0,ZZ_1658C_414);
ZZ_MARK(0x800169A4);
ZZ_MARK(0x800169A8);
ZZ_MARK(0x800169AC);
ZZ_MARK(0x800169B0);
ZZ_MARK(0x800169B4);
ZZ_MARK(0x800169B8);
ZZ_MARK(0x800169BC);
ZZ_MARK(0x800169C0);
ZZ_MARK(0x800169C4);
ZZ_MARK(0x800169C8);
ZZ_MARK(0x800169CC);
ZZ_MARK_TARGET(0x800169D0,ZZ_1658C_444);
ZZ_MARK(0x800169D4);
ZZ_MARK(0x800169D8);
ZZ_MARK_TARGET(0x800169DC,ZZ_1658C_450);
ZZ_MARK(0x800169E0);
ZZ_MARK_TARGET(0x800169E4,ZZ_1658C_458);
ZZ_MARK_TARGET(0x800169E8,ZZ_1658C_45C);
ZZ_MARK(0x800169EC);
ZZ_MARK(0x800169F0);
ZZ_MARK_TARGET(0x800169F4,ZZ_1658C_468);
ZZ_MARK(0x800169F8);
ZZ_MARK(0x800169FC);
ZZ_MARK(0x80016A00);
ZZ_MARK(0x80016A04);
ZZ_MARK(0x80016A08);
ZZ_MARK(0x80016A0C);
ZZ_MARK(0x80016A10);
ZZ_MARK_TARGET(0x80016A14,ZZ_1658C_488);
ZZ_MARK(0x80016A18);
ZZ_MARK(0x80016A1C);
ZZ_MARK(0x80016A20);
ZZ_MARK(0x80016A24);
ZZ_MARK(0x80016A28);
ZZ_MARK_TARGET(0x80016A2C,ZZ_1658C_4A0);
ZZ_MARK(0x80016A30);
ZZ_MARK(0x80016A34);
ZZ_MARK_TARGET(0x80016A38,ZZ_1658C_4AC);
ZZ_MARK(0x80016A3C);
ZZ_MARK_TARGET(0x80016A40,ZZ_1658C_4B4);
ZZ_MARK_TARGET(0x80016A44,ZZ_1658C_4B8);
ZZ_MARK(0x80016A48);
ZZ_MARK_TARGET(0x80016A4C,ZZ_1658C_4C0);
ZZ_MARK(0x80016A50);
ZZ_MARK(0x80016A54);
ZZ_MARK(0x80016A58);
ZZ_MARK(0x80016A5C);
ZZ_MARK(0x80016A60);
ZZ_MARK(0x80016A64);
ZZ_MARK(0x80016A68);
ZZ_MARK(0x80016A6C);
ZZ_MARK(0x80016A70);
ZZ_MARK_TARGET(0x80016A74,ZZ_1658C_4E8);
ZZ_MARK(0x80016A78);
ZZ_MARK(0x80016A7C);
ZZ_MARK(0x80016A80);
ZZ_MARK(0x80016A84);
ZZ_MARK(0x80016A88);
ZZ_MARK_TARGET(0x80016A8C,ZZ_1658C_500);
ZZ_MARK(0x80016A90);
ZZ_MARK(0x80016A94);
ZZ_MARK(0x80016A98);
ZZ_MARK(0x80016A9C);
ZZ_MARK(0x80016AA0);
ZZ_MARK(0x80016AA4);
ZZ_MARK(0x80016AA8);
ZZ_MARK_TARGET(0x80016AAC,ZZ_1658C_520);
ZZ_MARK(0x80016AB0);
ZZ_MARK(0x80016AB4);
ZZ_MARK(0x80016AB8);
ZZ_MARK(0x80016ABC);
ZZ_MARK(0x80016AC0);
ZZ_MARK(0x80016AC4);
ZZ_MARK(0x80016AC8);
ZZ_MARK(0x80016ACC);
ZZ_MARK(0x80016AD0);
ZZ_MARK(0x80016AD4);
ZZ_MARK(0x80016AD8);
ZZ_MARK(0x80016ADC);
ZZ_MARK(0x80016AE0);
ZZ_MARK_TARGET(0x80016AE4,ZZ_1658C_558);
ZZ_MARK(0x80016AE8);
ZZ_MARK(0x80016AEC);
ZZ_MARK(0x80016AF0);
ZZ_MARK_TARGET(0x80016AF4,ZZ_1658C_568);
ZZ_MARK(0x80016AF8);
ZZ_MARK(0x80016AFC);
ZZ_MARK(0x80016B00);
ZZ_MARK(0x80016B04);
ZZ_MARK(0x80016B08);
ZZ_MARK(0x80016B0C);
ZZ_MARK_TARGET(0x80016B10,ZZ_1658C_584);
ZZ_MARK(0x80016B14);
ZZ_MARK(0x80016B18);
ZZ_MARK(0x80016B1C);
ZZ_MARK(0x80016B20);
ZZ_MARK(0x80016B24);
ZZ_MARK(0x80016B28);
ZZ_MARK(0x80016B2C);
ZZ_MARK(0x80016B30);
ZZ_MARK(0x80016B34);
ZZ_MARK(0x80016B38);
ZZ_MARK(0x80016B3C);
ZZ_MARK_TARGET(0x80016B40,ZZ_1658C_5B4);
ZZ_MARK(0x80016B44);
ZZ_MARK(0x80016B48);
ZZ_MARK(0x80016B4C);
ZZ_MARK_TARGET(0x80016B50,ZZ_1658C_5C4);
ZZ_MARK(0x80016B54);
ZZ_MARK(0x80016B58);
ZZ_MARK(0x80016B5C);
ZZ_MARK_TARGET(0x80016B60,ZZ_1658C_5D4);
ZZ_MARK(0x80016B64);
ZZ_MARK(0x80016B68);
ZZ_MARK(0x80016B6C);
ZZ_MARK(0x80016B70);
ZZ_MARK(0x80016B74);
ZZ_MARK(0x80016B78);
ZZ_MARK(0x80016B7C);
ZZ_MARK(0x80016B80);
ZZ_MARK(0x80016B84);
ZZ_MARK(0x80016B88);
ZZ_MARK(0x80016B8C);
