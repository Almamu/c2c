#ifdef ZZ_INCLUDE_CODE
ZZ_4B37C:
	A2 = A0;
	V1 = 0x80060000;
	V1 -= 8388;
	V0 = A2 << 2;
	V1 += V0;
	A3 = EMU_ReadU32(V1);
	A0 = A1;
	if (A0 == A3)
	{
		ZZ_CLOCKCYCLES(9,0x8004B41C);
		goto ZZ_4B37C_A0;
	}
	if (!A0)
	{
		V0 = 0xFF0000;
		ZZ_CLOCKCYCLES(11,0x8004B3E4);
		goto ZZ_4B37C_68;
	}
	V0 = 0xFF0000;
	A1 = 0x80060000;
	A1 = EMU_ReadU32(A1 - 8392); //+ 0xFFFFDF38
	V0 |= 0xFFFF;
	EMU_Write32(V1,A0);
	A0 = EMU_ReadU32(A1);
	V1 = A2 + 16;
	A0 &= V0;
	V0 = 1;
	V0 <<= V1;
	V1 = 0x800000;
	V0 |= V1;
	A0 |= V0;
	EMU_Write32(A1,A0);
	ZZ_CLOCKCYCLES(26,0x8004B41C);
	goto ZZ_4B37C_A0;
ZZ_4B37C_68:
	A1 = 0x80060000;
	A1 = EMU_ReadU32(A1 - 8392); //+ 0xFFFFDF38
	V0 |= 0xFFFF;
	EMU_Write32(V1,R0);
	V1 = EMU_ReadU32(A1);
	A0 = A2 + 16;
	V1 &= V0;
	V0 = 0x800000;
	V1 |= V0;
	V0 = 1;
	V0 <<= A0;
	V0 = ~V0;
	V1 &= V0;
	EMU_Write32(A1,V1);
	ZZ_CLOCKCYCLES(14,0x8004B41C);
ZZ_4B37C_A0:
	ZZ_JUMPREGISTER_BEGIN(RA);
	V0 = A3;
	ZZ_CLOCKCYCLES_JR(2);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8004B37C,ZZ_4B37C);
ZZ_MARK(0x8004B380);
ZZ_MARK(0x8004B384);
ZZ_MARK(0x8004B388);
ZZ_MARK(0x8004B38C);
ZZ_MARK(0x8004B390);
ZZ_MARK(0x8004B394);
ZZ_MARK(0x8004B398);
ZZ_MARK(0x8004B39C);
ZZ_MARK(0x8004B3A0);
ZZ_MARK(0x8004B3A4);
ZZ_MARK(0x8004B3A8);
ZZ_MARK(0x8004B3AC);
ZZ_MARK(0x8004B3B0);
ZZ_MARK(0x8004B3B4);
ZZ_MARK(0x8004B3B8);
ZZ_MARK(0x8004B3BC);
ZZ_MARK(0x8004B3C0);
ZZ_MARK(0x8004B3C4);
ZZ_MARK(0x8004B3C8);
ZZ_MARK(0x8004B3CC);
ZZ_MARK(0x8004B3D0);
ZZ_MARK(0x8004B3D4);
ZZ_MARK(0x8004B3D8);
ZZ_MARK(0x8004B3DC);
ZZ_MARK(0x8004B3E0);
ZZ_MARK_TARGET(0x8004B3E4,ZZ_4B37C_68);
ZZ_MARK(0x8004B3E8);
ZZ_MARK(0x8004B3EC);
ZZ_MARK(0x8004B3F0);
ZZ_MARK(0x8004B3F4);
ZZ_MARK(0x8004B3F8);
ZZ_MARK(0x8004B3FC);
ZZ_MARK(0x8004B400);
ZZ_MARK(0x8004B404);
ZZ_MARK(0x8004B408);
ZZ_MARK(0x8004B40C);
ZZ_MARK(0x8004B410);
ZZ_MARK(0x8004B414);
ZZ_MARK(0x8004B418);
ZZ_MARK_TARGET(0x8004B41C,ZZ_4B37C_A0);
ZZ_MARK(0x8004B420);
