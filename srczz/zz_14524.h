#ifdef ZZ_INCLUDE_CODE
ZZ_14524:
	SP -= 56;
	V1 = 0x80060000;
	V1 += 31720;
	EMU_Write32(SP + 48,RA); //+ 0x30
	EMU_Write32(SP + 44,S3); //+ 0x2C
	EMU_Write32(SP + 40,S2); //+ 0x28
	EMU_Write32(SP + 36,S1); //+ 0x24
	EMU_Write32(SP + 32,S0); //+ 0x20
	V0 = EMU_ReadU32(V1);
	if ((int32_t)V0 <= 0)
	{
		S1 = R0;
		ZZ_CLOCKCYCLES(12,0x80014590);
		goto ZZ_14524_6C;
	}
	S1 = R0;
	S3 = 0x1;
	S2 = V1 + 4;
	A0 = S2;
	ZZ_CLOCKCYCLES(15,0x80014560);
ZZ_14524_3C:
	S0 = A0;
	V0 = EMU_ReadS16(S0 + 4); //+ 0x4
	if (V0 == S3)
	{
		ZZ_CLOCKCYCLES(5,0x8001457C);
		goto ZZ_14524_58;
	}
	RA = 0x8001457C; //ZZ_14524_58
	ZZ_CLOCKCYCLES(7,0x80013FB4);
	goto ZZ_13FB4;
ZZ_14524_58:
	V0 = EMU_ReadU32(S2 - 4); //+ 0xFFFFFFFC
	S1 += 1;
	V0 = (int32_t)S1 < (int32_t)V0;
	if (V0)
	{
		A0 = S0 + 44;
		ZZ_CLOCKCYCLES(5,0x80014560);
		goto ZZ_14524_3C;
	}
	A0 = S0 + 44;
	ZZ_CLOCKCYCLES(5,0x80014590);
ZZ_14524_6C:
	V1 = 0x80060000;
	V1 += 30792;
	V0 = EMU_ReadU32(V1);
	if ((int32_t)V0 <= 0)
	{
		S1 = R0;
		ZZ_CLOCKCYCLES(6,0x800145E0);
		goto ZZ_14524_BC;
	}
	S1 = R0;
	S3 = 0x1;
	S2 = V1 + 4;
	S0 = S2;
	ZZ_CLOCKCYCLES(9,0x800145B4);
ZZ_14524_90:
	V0 = EMU_ReadS16(S0 + 4); //+ 0x4
	if (V0 == S3)
	{
		ZZ_CLOCKCYCLES(4,0x800145CC);
		goto ZZ_14524_A8;
	}
	RA = 0x800145CC; //ZZ_14524_A8
	A0 = S0;
	ZZ_CLOCKCYCLES(6,0x80013FB4);
	goto ZZ_13FB4;
ZZ_14524_A8:
	V0 = EMU_ReadU32(S2 - 4); //+ 0xFFFFFFFC
	S1 += 1;
	V0 = (int32_t)S1 < (int32_t)V0;
	if (V0)
	{
		S0 += 44;
		ZZ_CLOCKCYCLES(5,0x800145B4);
		goto ZZ_14524_90;
	}
	S0 += 44;
	ZZ_CLOCKCYCLES(5,0x800145E0);
ZZ_14524_BC:
	S1 = 0xF;
	S0 = 0x80060000;
	S0 += 12952;
	ZZ_CLOCKCYCLES(3,0x800145EC);
ZZ_14524_C8:
	V0 = EMU_ReadU16(S0 + 4); //+ 0x4
	V0 -= 20;
	V0 = V0 < 2;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(6,0x8001460C);
		goto ZZ_14524_E8;
	}
	RA = 0x8001460C; //ZZ_14524_E8
	A0 = S0;
	ZZ_CLOCKCYCLES(8,0x80013FB4);
	goto ZZ_13FB4;
ZZ_14524_E8:
	S1 -= 1;
	if ((int32_t)S1 >= 0)
	{
		S0 -= 44;
		ZZ_CLOCKCYCLES(3,0x800145EC);
		goto ZZ_14524_C8;
	}
	S0 -= 44;
	S1 = 0x9;
	S0 = 0x80060000;
	S0 += 12248;
	ZZ_CLOCKCYCLES(6,0x80014624);
ZZ_14524_100:
	V0 = EMU_ReadU16(S0 + 4); //+ 0x4
	V0 -= 20;
	V0 = V0 < 2;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(6,0x80014644);
		goto ZZ_14524_120;
	}
	RA = 0x80014644; //ZZ_14524_120
	A0 = S0;
	ZZ_CLOCKCYCLES(8,0x80013FB4);
	goto ZZ_13FB4;
ZZ_14524_120:
	S1 -= 1;
	if ((int32_t)S1 >= 0)
	{
		S0 -= 44;
		ZZ_CLOCKCYCLES(3,0x80014624);
		goto ZZ_14524_100;
	}
	S0 -= 44;
	RA = EMU_ReadU32(SP + 48); //+ 0x30
	S3 = EMU_ReadU32(SP + 44); //+ 0x2C
	S2 = EMU_ReadU32(SP + 40); //+ 0x28
	S1 = EMU_ReadU32(SP + 36); //+ 0x24
	S0 = EMU_ReadU32(SP + 32); //+ 0x20
	SP += 56;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(11);
	ZZ_JUMPREGISTER(0x8002062C,ZZ_20304_328);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80014524,ZZ_14524);
ZZ_MARK(0x80014528);
ZZ_MARK(0x8001452C);
ZZ_MARK(0x80014530);
ZZ_MARK(0x80014534);
ZZ_MARK(0x80014538);
ZZ_MARK(0x8001453C);
ZZ_MARK(0x80014540);
ZZ_MARK(0x80014544);
ZZ_MARK(0x80014548);
ZZ_MARK(0x8001454C);
ZZ_MARK(0x80014550);
ZZ_MARK(0x80014554);
ZZ_MARK(0x80014558);
ZZ_MARK(0x8001455C);
ZZ_MARK_TARGET(0x80014560,ZZ_14524_3C);
ZZ_MARK(0x80014564);
ZZ_MARK(0x80014568);
ZZ_MARK(0x8001456C);
ZZ_MARK(0x80014570);
ZZ_MARK(0x80014574);
ZZ_MARK(0x80014578);
ZZ_MARK_TARGET(0x8001457C,ZZ_14524_58);
ZZ_MARK(0x80014580);
ZZ_MARK(0x80014584);
ZZ_MARK(0x80014588);
ZZ_MARK(0x8001458C);
ZZ_MARK_TARGET(0x80014590,ZZ_14524_6C);
ZZ_MARK(0x80014594);
ZZ_MARK(0x80014598);
ZZ_MARK(0x8001459C);
ZZ_MARK(0x800145A0);
ZZ_MARK(0x800145A4);
ZZ_MARK(0x800145A8);
ZZ_MARK(0x800145AC);
ZZ_MARK(0x800145B0);
ZZ_MARK_TARGET(0x800145B4,ZZ_14524_90);
ZZ_MARK(0x800145B8);
ZZ_MARK(0x800145BC);
ZZ_MARK(0x800145C0);
ZZ_MARK(0x800145C4);
ZZ_MARK(0x800145C8);
ZZ_MARK_TARGET(0x800145CC,ZZ_14524_A8);
ZZ_MARK(0x800145D0);
ZZ_MARK(0x800145D4);
ZZ_MARK(0x800145D8);
ZZ_MARK(0x800145DC);
ZZ_MARK_TARGET(0x800145E0,ZZ_14524_BC);
ZZ_MARK(0x800145E4);
ZZ_MARK(0x800145E8);
ZZ_MARK_TARGET(0x800145EC,ZZ_14524_C8);
ZZ_MARK(0x800145F0);
ZZ_MARK(0x800145F4);
ZZ_MARK(0x800145F8);
ZZ_MARK(0x800145FC);
ZZ_MARK(0x80014600);
ZZ_MARK(0x80014604);
ZZ_MARK(0x80014608);
ZZ_MARK_TARGET(0x8001460C,ZZ_14524_E8);
ZZ_MARK(0x80014610);
ZZ_MARK(0x80014614);
ZZ_MARK(0x80014618);
ZZ_MARK(0x8001461C);
ZZ_MARK(0x80014620);
ZZ_MARK_TARGET(0x80014624,ZZ_14524_100);
ZZ_MARK(0x80014628);
ZZ_MARK(0x8001462C);
ZZ_MARK(0x80014630);
ZZ_MARK(0x80014634);
ZZ_MARK(0x80014638);
ZZ_MARK(0x8001463C);
ZZ_MARK(0x80014640);
ZZ_MARK_TARGET(0x80014644,ZZ_14524_120);
ZZ_MARK(0x80014648);
ZZ_MARK(0x8001464C);
ZZ_MARK(0x80014650);
ZZ_MARK(0x80014654);
ZZ_MARK(0x80014658);
ZZ_MARK(0x8001465C);
ZZ_MARK(0x80014660);
ZZ_MARK(0x80014664);
ZZ_MARK(0x80014668);
ZZ_MARK(0x8001466C);
