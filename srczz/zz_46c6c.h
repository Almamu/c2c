#ifdef ZZ_INCLUDE_CODE
ZZ_46C6C:
	SP -= 24;
	EMU_Write32(SP + 16,S0); //+ 0x10
	S0 = A0;
	V0 = 2;
	if (S0 != V0)
	{
		EMU_Write32(SP + 20,RA); //+ 0x14
		ZZ_CLOCKCYCLES(6,0x80046C94);
		goto ZZ_46C6C_28;
	}
	EMU_Write32(SP + 20,RA); //+ 0x14
	RA = 0x80046C8C; //ZZ_46C6C_20
	ZZ_CLOCKCYCLES(8,0x80048504);
	goto ZZ_48504;
ZZ_46C6C_20:
	V0 = 1;
	ZZ_CLOCKCYCLES(2,0x80046CC4);
	goto ZZ_46C6C_58;
ZZ_46C6C_28:
	RA = 0x80046C9C; //ZZ_46C6C_30
	ZZ_CLOCKCYCLES(2,0x80048554);
	goto ZZ_48554;
ZZ_46C6C_30:
	if (V0)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(2,0x80046CC4);
		goto ZZ_46C6C_58;
	}
	V0 = R0;
	V0 = 1;
	if (S0 != V0)
	{
		ZZ_CLOCKCYCLES(5,0x80046CC4);
		goto ZZ_46C6C_58;
	}
	RA = 0x80046CB8; //ZZ_46C6C_4C
	ZZ_CLOCKCYCLES(7,0x80048410);
	goto ZZ_48410;
ZZ_46C6C_4C:
	if (V0)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(2,0x80046CC4);
		goto ZZ_46C6C_58;
	}
	V0 = R0;
	V0 = 1;
	ZZ_CLOCKCYCLES(3,0x80046CC4);
ZZ_46C6C_58:
	RA = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 24;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(5);
	ZZ_JUMPREGISTER(0x80046B34,ZZ_46B1C_18);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80046C6C,0x80046C8C,ZZ_46C6C);
ZZ_MARK_TARGET(0x80046C8C,0x80046C94,ZZ_46C6C_20);
ZZ_MARK_TARGET(0x80046C94,0x80046C9C,ZZ_46C6C_28);
ZZ_MARK_TARGET(0x80046C9C,0x80046CB8,ZZ_46C6C_30);
ZZ_MARK_TARGET(0x80046CB8,0x80046CC4,ZZ_46C6C_4C);
ZZ_MARK_TARGET(0x80046CC4,0x80046CD8,ZZ_46C6C_58);
