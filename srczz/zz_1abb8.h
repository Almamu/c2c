#ifdef ZZ_INCLUDE_CODE
ZZ_1ABB8:
	SP -= 40;
	A2 = A0;
	EMU_Write32(SP + 32,RA); //+ 0x20
	V0 = EMU_ReadU32(A2 + 232); //+ 0xE8
	if (!V0)
	{
		ZZ_CLOCKCYCLES(7,0x8001AD20);
		goto ZZ_1ABB8_168;
	}
	V1 = EMU_ReadU8(V0);
	V0 = 0x2;
	if (V1 == V0)
	{
		V0 = (int32_t)V1 < 3;
		ZZ_CLOCKCYCLES(11,0x8001AC08);
		goto ZZ_1ABB8_50;
	}
	V0 = (int32_t)V1 < 3;
	if (!V0)
	{
		V0 = 0x1;
		ZZ_CLOCKCYCLES(13,0x8001ABFC);
		goto ZZ_1ABB8_44;
	}
	V0 = 0x1;
	if (V1 == V0)
	{
		ZZ_CLOCKCYCLES(15,0x8001ACA4);
		goto ZZ_1ABB8_EC;
	}
	ZZ_CLOCKCYCLES(17,0x8001AD20);
	goto ZZ_1ABB8_168;
ZZ_1ABB8_44:
	V0 = 0x5;
	if (V1 != V0)
	{
		ZZ_CLOCKCYCLES(3,0x8001AD20);
		goto ZZ_1ABB8_168;
	}
	ZZ_CLOCKCYCLES(3,0x8001AC08);
ZZ_1ABB8_50:
	V1 = EMU_ReadU32(A2 + 120); //+ 0x78
	V0 = 0x26700000;
	V0 |= 0x5EBF;
	if ((int32_t)V1 >= 0)
	{
		ZZ_CLOCKCYCLES(5,0x8001AC20);
		goto ZZ_1ABB8_68;
	}
	V1 = -V1;
	ZZ_CLOCKCYCLES(6,0x8001AC20);
ZZ_1ABB8_68:
	EMU_SMultiply(V1,V0);
	V1 = (int32_t)V1 >> 31;
	T0 = HI;
	V0 = (int32_t)T0 >> 12;
	V0 = V0 - V1;
	EMU_Write32(A1 + 4,V0); //+ 0x4
	V1 = EMU_ReadU8(A2 + 288); //+ 0x120
	V0 = V1 << 2;
	AT = 0x80060000;
	AT += V0;
	V0 = EMU_ReadU32(AT - 18136); //+ 0xFFFFB928
	A0 = 0x80060000;
	A0 -= 18136;
	if (V0)
	{
		EMU_Write32(A1,V0);
		ZZ_CLOCKCYCLES(16,0x8001AC80);
		goto ZZ_1ABB8_C8;
	}
	EMU_Write32(A1,V0);
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 + 11640); //+ 0x2D78
	V0 = V1 << 2;
	V0 += A0;
	V0 = EMU_ReadU32(V0);
	EMU_Write32(A1,V0);
	ZZ_CLOCKCYCLES(24,0x8001AC80);
ZZ_1ABB8_C8:
	A0 = EMU_ReadU32(A2 + 8); //+ 0x8
	V0 = V1 << 2;
	AT = 0x80060000;
	AT += V0;
	V0 = EMU_ReadU32(AT - 18200); //+ 0xFFFFB8E8
	A1 = A2 + 108;
	A2 += 120;
	A3 = R0;
	ZZ_CLOCKCYCLES(9,0x8001AD18);
	goto ZZ_1ABB8_160;
ZZ_1ABB8_EC:
	V1 = EMU_ReadU8(A2 + 288); //+ 0x120
	V0 = V1 << 2;
	AT = 0x80060000;
	AT += V0;
	V0 = EMU_ReadU32(AT - 18136); //+ 0xFFFFB928
	A0 = 0x80060000;
	A0 -= 18136;
	if (V0)
	{
		EMU_Write32(A1,V0);
		ZZ_CLOCKCYCLES(10,0x8001ACEC);
		goto ZZ_1ABB8_134;
	}
	EMU_Write32(A1,V0);
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 + 11644); //+ 0x2D7C
	V0 = V1 << 2;
	V0 += A0;
	V0 = EMU_ReadU32(V0);
	EMU_Write32(A1,V0);
	ZZ_CLOCKCYCLES(18,0x8001ACEC);
ZZ_1ABB8_134:
	A0 = EMU_ReadU32(A2 + 8); //+ 0x8
	V0 = EMU_ReadU32(A0 + 40); //+ 0x28
	A3 = EMU_ReadU32(V0 + 16); //+ 0x10
	V0 = V1 << 2;
	AT = 0x80060000;
	AT += V0;
	V0 = EMU_ReadU32(AT - 18200); //+ 0xFFFFB8E8
	A1 = A2 + 108;
	A2 += 120;
	ZZ_CLOCKCYCLES(11,0x8001AD18);
ZZ_1ABB8_160:
	ZZ_JUMPREGISTER_BEGIN(V0);
	RA = 0x8001AD20; //ZZ_1ABB8_168
	ZZ_CLOCKCYCLES_JR(2);
	// UNIMPLEMENTED JUMP-TO-REGISTER-AND-LINK (V0,8001AD18)
	ZZ_JUMPREGISTER_END();
ZZ_1ABB8_168:
	RA = EMU_ReadU32(SP + 32); //+ 0x20
	SP += 40;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(4);
	ZZ_JUMPREGISTER(0x800382BC,ZZ_37930_98C);
	ZZ_JUMPREGISTER(0x8001CB44,ZZ_1C850_2F4);
	ZZ_JUMPREGISTER(0x8001E014,ZZ_1D860_7B4);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8001ABB8,ZZ_1ABB8);
ZZ_MARK(0x8001ABBC);
ZZ_MARK(0x8001ABC0);
ZZ_MARK(0x8001ABC4);
ZZ_MARK(0x8001ABC8);
ZZ_MARK(0x8001ABCC);
ZZ_MARK(0x8001ABD0);
ZZ_MARK(0x8001ABD4);
ZZ_MARK(0x8001ABD8);
ZZ_MARK(0x8001ABDC);
ZZ_MARK(0x8001ABE0);
ZZ_MARK(0x8001ABE4);
ZZ_MARK(0x8001ABE8);
ZZ_MARK(0x8001ABEC);
ZZ_MARK(0x8001ABF0);
ZZ_MARK(0x8001ABF4);
ZZ_MARK(0x8001ABF8);
ZZ_MARK_TARGET(0x8001ABFC,ZZ_1ABB8_44);
ZZ_MARK(0x8001AC00);
ZZ_MARK(0x8001AC04);
ZZ_MARK_TARGET(0x8001AC08,ZZ_1ABB8_50);
ZZ_MARK(0x8001AC0C);
ZZ_MARK(0x8001AC10);
ZZ_MARK(0x8001AC14);
ZZ_MARK(0x8001AC18);
ZZ_MARK(0x8001AC1C);
ZZ_MARK_TARGET(0x8001AC20,ZZ_1ABB8_68);
ZZ_MARK(0x8001AC24);
ZZ_MARK(0x8001AC28);
ZZ_MARK(0x8001AC2C);
ZZ_MARK(0x8001AC30);
ZZ_MARK(0x8001AC34);
ZZ_MARK(0x8001AC38);
ZZ_MARK(0x8001AC3C);
ZZ_MARK(0x8001AC40);
ZZ_MARK(0x8001AC44);
ZZ_MARK(0x8001AC48);
ZZ_MARK(0x8001AC4C);
ZZ_MARK(0x8001AC50);
ZZ_MARK(0x8001AC54);
ZZ_MARK(0x8001AC58);
ZZ_MARK(0x8001AC5C);
ZZ_MARK(0x8001AC60);
ZZ_MARK(0x8001AC64);
ZZ_MARK(0x8001AC68);
ZZ_MARK(0x8001AC6C);
ZZ_MARK(0x8001AC70);
ZZ_MARK(0x8001AC74);
ZZ_MARK(0x8001AC78);
ZZ_MARK(0x8001AC7C);
ZZ_MARK_TARGET(0x8001AC80,ZZ_1ABB8_C8);
ZZ_MARK(0x8001AC84);
ZZ_MARK(0x8001AC88);
ZZ_MARK(0x8001AC8C);
ZZ_MARK(0x8001AC90);
ZZ_MARK(0x8001AC94);
ZZ_MARK(0x8001AC98);
ZZ_MARK(0x8001AC9C);
ZZ_MARK(0x8001ACA0);
ZZ_MARK_TARGET(0x8001ACA4,ZZ_1ABB8_EC);
ZZ_MARK(0x8001ACA8);
ZZ_MARK(0x8001ACAC);
ZZ_MARK(0x8001ACB0);
ZZ_MARK(0x8001ACB4);
ZZ_MARK(0x8001ACB8);
ZZ_MARK(0x8001ACBC);
ZZ_MARK(0x8001ACC0);
ZZ_MARK(0x8001ACC4);
ZZ_MARK(0x8001ACC8);
ZZ_MARK(0x8001ACCC);
ZZ_MARK(0x8001ACD0);
ZZ_MARK(0x8001ACD4);
ZZ_MARK(0x8001ACD8);
ZZ_MARK(0x8001ACDC);
ZZ_MARK(0x8001ACE0);
ZZ_MARK(0x8001ACE4);
ZZ_MARK(0x8001ACE8);
ZZ_MARK_TARGET(0x8001ACEC,ZZ_1ABB8_134);
ZZ_MARK(0x8001ACF0);
ZZ_MARK(0x8001ACF4);
ZZ_MARK(0x8001ACF8);
ZZ_MARK(0x8001ACFC);
ZZ_MARK(0x8001AD00);
ZZ_MARK(0x8001AD04);
ZZ_MARK(0x8001AD08);
ZZ_MARK(0x8001AD0C);
ZZ_MARK(0x8001AD10);
ZZ_MARK(0x8001AD14);
ZZ_MARK_TARGET(0x8001AD18,ZZ_1ABB8_160);
ZZ_MARK(0x8001AD1C);
ZZ_MARK_TARGET(0x8001AD20,ZZ_1ABB8_168);
ZZ_MARK(0x8001AD24);
ZZ_MARK(0x8001AD28);
ZZ_MARK(0x8001AD2C);
