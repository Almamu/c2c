#ifdef ZZ_INCLUDE_CODE
ZZ_3164C:
	SP -= 48;
	EMU_Write32(SP + 24,S2); //+ 0x18
	S2 = A0;
	EMU_Write32(SP + 28,S3); //+ 0x1C
	S3 = A1;
	EMU_Write32(SP + 40,RA); //+ 0x28
	EMU_Write32(SP + 36,S5); //+ 0x24
	EMU_Write32(SP + 32,S4); //+ 0x20
	EMU_Write32(SP + 20,S1); //+ 0x14
	EMU_Write32(SP + 16,S0); //+ 0x10
	V0 = EMU_ReadU32(S3);
	S0 = A2;
	V1 = EMU_ReadU32(S3 + 8); //+ 0x8
	S0 &= 0xFFF;
	S5 = -V0;
	A0 = S5;
	S4 = -V1;
	RA = 0x80031698; //ZZ_3164C_4C
	A1 = S4;
	ZZ_CLOCKCYCLES(19,0x8004F310);
	goto ZZ_4F310;
ZZ_3164C_4C:
	S1 = V0 & 0xFFF;
	V1 = S1 - S0;
	V0 = (int32_t)V1 < 2049;
	if (V0)
	{
		V0 = (int32_t)V1 < -2048;
		ZZ_CLOCKCYCLES(5,0x800316B4);
		goto ZZ_3164C_68;
	}
	V0 = (int32_t)V1 < -2048;
	V1 -= 4096;
	ZZ_CLOCKCYCLES(7,0x800316C0);
	goto ZZ_3164C_74;
ZZ_3164C_68:
	if (!V0)
	{
		V0 = V1 + 1024;
		ZZ_CLOCKCYCLES(2,0x800316C4);
		goto ZZ_3164C_78;
	}
	V0 = V1 + 1024;
	V1 += 4096;
	ZZ_CLOCKCYCLES(3,0x800316C0);
ZZ_3164C_74:
	V0 = V1 + 1024;
	ZZ_CLOCKCYCLES(1,0x800316C4);
ZZ_3164C_78:
	V0 = V0 < 2049;
	if (!V0)
	{
		EMU_Write32(S2 + 4,S1); //+ 0x4
		ZZ_CLOCKCYCLES(3,0x80031734);
		goto ZZ_3164C_E8;
	}
	EMU_Write32(S2 + 4,S1); //+ 0x4
	S1 = -S1;
	RA = 0x800316DC; //ZZ_3164C_90
	A0 = S1;
	ZZ_CLOCKCYCLES(6,0x8003D5F8);
	goto ZZ_3D5F8;
ZZ_3164C_90:
	A0 = S1;
	RA = 0x800316E8; //ZZ_3164C_9C
	S0 = V0;
	ZZ_CLOCKCYCLES(3,0x8003D584);
	goto ZZ_3D584;
ZZ_3164C_9C:
	V1 = (int32_t)S4 >> 8;
	EMU_SMultiply(V1,S0);
	A1 = LO;
	V1 = (int32_t)S5 >> 8;
	EMU_SMultiply(V1,V0);
	A0 = S1;
	S0 = (int32_t)A1 >> 4;
	V1 = LO;
	V0 = (int32_t)V1 >> 4;
	RA = 0x80031718; //ZZ_3164C_CC
	S0 = S0 - V0;
	ZZ_CLOCKCYCLES(12,0x8003D584);
	goto ZZ_3D584;
ZZ_3164C_CC:
	RA = 0x80031720; //ZZ_3164C_D4
	A0 = S1;
	ZZ_CLOCKCYCLES(2,0x8003D5F8);
	goto ZZ_3D5F8;
ZZ_3164C_D4:
	A0 = EMU_ReadU32(S3 + 4); //+ 0x4
	RA = 0x8003172C; //ZZ_3164C_E0
	A1 = S0;
	ZZ_CLOCKCYCLES(3,0x8004F310);
	goto ZZ_4F310;
ZZ_3164C_E0:
	V0 &= 0xFFF;
	ZZ_CLOCKCYCLES(2,0x80031738);
	goto ZZ_3164C_EC;
ZZ_3164C_E8:
	V0 = -1024;
	ZZ_CLOCKCYCLES(1,0x80031738);
ZZ_3164C_EC:
	EMU_Write32(S2,V0);
	EMU_Write32(S2 + 8,R0); //+ 0x8
	RA = EMU_ReadU32(SP + 40); //+ 0x28
	S5 = EMU_ReadU32(SP + 36); //+ 0x24
	S4 = EMU_ReadU32(SP + 32); //+ 0x20
	S3 = EMU_ReadU32(SP + 28); //+ 0x1C
	S2 = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 48;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(12);
	ZZ_JUMPREGISTER(0x80023494,ZZ_23424_70);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8003164C,0x80031698,ZZ_3164C);
ZZ_MARK_TARGET(0x80031698,0x800316B4,ZZ_3164C_4C);
ZZ_MARK_TARGET(0x800316B4,0x800316C0,ZZ_3164C_68);
ZZ_MARK_TARGET(0x800316C0,0x800316C4,ZZ_3164C_74);
ZZ_MARK_TARGET(0x800316C4,0x800316DC,ZZ_3164C_78);
ZZ_MARK_TARGET(0x800316DC,0x800316E8,ZZ_3164C_90);
ZZ_MARK_TARGET(0x800316E8,0x80031718,ZZ_3164C_9C);
ZZ_MARK_TARGET(0x80031718,0x80031720,ZZ_3164C_CC);
ZZ_MARK_TARGET(0x80031720,0x8003172C,ZZ_3164C_D4);
ZZ_MARK_TARGET(0x8003172C,0x80031734,ZZ_3164C_E0);
ZZ_MARK_TARGET(0x80031734,0x80031738,ZZ_3164C_E8);
ZZ_MARK_TARGET(0x80031738,0x80031768,ZZ_3164C_EC);
