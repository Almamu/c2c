#ifdef ZZ_INCLUDE_CODE
ZZ_1FC0C:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 30768); //+ 0x7830
	SP -= 40;
	EMU_Write32(SP + 36,RA); //+ 0x24
	EMU_Write32(SP + 32,S4); //+ 0x20
	EMU_Write32(SP + 28,S3); //+ 0x1C
	EMU_Write32(SP + 24,S2); //+ 0x18
	EMU_Write32(SP + 20,S1); //+ 0x14
	EMU_Write32(SP + 16,S0); //+ 0x10
	AT = 0x80070000;
	EMU_Write32(AT - 12372,R0); //+ 0xFFFFCFAC
	V1 = EMU_ReadU32(V0);
	V0 = 0x63960000;
	V0 |= 0x347F;
	if (V1 == V0)
	{
		V0 = 0xC010000;
		ZZ_CLOCKCYCLES(16,0x8001FFE8);
		goto ZZ_1FC0C_3DC;
	}
	V0 = 0xC010000;
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 + 30772); //+ 0x7834
	V0 |= 0xFFFF;
	AT = 0x80070000;
	EMU_Write32(AT - 12776,V0); //+ 0xFFFFCE18
	AT = 0x80070000;
	EMU_Write32(AT - 12756,V0); //+ 0xFFFFCE2C
	V0 = EMU_ReadU32(GP + 624); //+ 0x270
	EMU_Write32(GP + 564,R0); //+ 0x234
	AT = 0x80060000;
	EMU_Write32(AT - 2484,R0); //+ 0xFFFFF64C
	V1 = EMU_ReadU32(V1 + 8); //+ 0x8
	S0 = 0x80070000;
	S0 = EMU_ReadU32(S0 - 12268); //+ 0xFFFFD014
	if (V1 == V0)
	{
		S4 = R0;
		ZZ_CLOCKCYCLES(32,0x8001FC94);
		goto ZZ_1FC0C_88;
	}
	S4 = R0;
	ZZ_CLOCKCYCLES(32,0x8001FC8C);
ZZ_1FC0C_80:
	ZZ_CLOCKCYCLES(2,0x8001FC8C);
	goto ZZ_1FC0C_80;
ZZ_1FC0C_88:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 30772); //+ 0x7834
	V1 = EMU_ReadU32(V0 + 8); //+ 0x8
	V0 = 0x2;
	if (V1 != V0)
	{
		ZZ_CLOCKCYCLES(7,0x8001FE2C);
		goto ZZ_1FC0C_220;
	}
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 12432); //+ 0xFFFFCF70
	V0 &= 0x1;
	if (!V0)
	{
		V0 = 0x63;
		ZZ_CLOCKCYCLES(13,0x8001FCD0);
		goto ZZ_1FC0C_C4;
	}
	V0 = 0x63;
	S0 = 0x4;
	ZZ_CLOCKCYCLES(15,0x8001FE2C);
	goto ZZ_1FC0C_220;
ZZ_1FC0C_C4:
	V1 = 0x80070000;
	V1 = EMU_ReadU32(V1 - 12436); //+ 0xFFFFCF6C
	if (V1 != V0)
	{
		S0 = 0x1;
		ZZ_CLOCKCYCLES(5,0x8001FCEC);
		goto ZZ_1FC0C_E0;
	}
	S0 = 0x1;
	V1 = 0x80070000;
	V1 = EMU_ReadU32(V1 - 12712); //+ 0xFFFFCE58
	ZZ_CLOCKCYCLES(7,0x8001FCEC);
ZZ_1FC0C_E0:
	V0 = 0x63;
	if (V1 == V0)
	{
		ZZ_CLOCKCYCLES(3,0x8001FCFC);
		goto ZZ_1FC0C_F0;
	}
	V1 = (int32_t)V1 >> 8;
	ZZ_CLOCKCYCLES(4,0x8001FCFC);
ZZ_1FC0C_F0:
	A1 = 0x80060000;
	A1 -= 17492;
	A0 = V1 - 3;
	V0 = A0 < 37;
	if (!V0)
	{
		V0 = A0 << 2;
		ZZ_CLOCKCYCLES(6,0x8001FE08);
		goto ZZ_1FC0C_1FC;
	}
	V0 = A0 << 2;
	AT = 0x80010000;
	AT += V0;
	V0 = EMU_ReadU32(AT + 748); //+ 0x2EC
	ZZ_JUMPREGISTER_BEGIN(V0);
	ZZ_CLOCKCYCLES_JR(12);
	ZZ_JUMPREGISTER(0x8001FD9C,ZZ_1FC0C_190);
	ZZ_JUMPREGISTER(0x8001FE08,ZZ_1FC0C_1FC);
	ZZ_JUMPREGISTER(0x8001FD34,ZZ_1FC0C_128);
	ZZ_JUMPREGISTER(0x8001FE04,ZZ_1FC0C_1F8);
	ZZ_JUMPREGISTER(0x8001FD68,ZZ_1FC0C_15C);
	ZZ_JUMPREGISTER(0x8001FDD0,ZZ_1FC0C_1C4);
	ZZ_JUMPREGISTER(0x8001FD2C,ZZ_1FC0C_120);
	ZZ_JUMPREGISTER(0x8001FDFC,ZZ_1FC0C_1F0);
	ZZ_JUMPREGISTER_END();
ZZ_1FC0C_120:
	V1 = 0x17;
	ZZ_CLOCKCYCLES(2,0x8001FE08);
	goto ZZ_1FC0C_1FC;
ZZ_1FC0C_128:
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 12684); //+ 0xFFFFCE74
	V0 &= 0x40;
	if (V0)
	{
		V1 = 0x11;
		ZZ_CLOCKCYCLES(6,0x8001FE08);
		goto ZZ_1FC0C_1FC;
	}
	V1 = 0x11;
	V1 = 0x80070000;
	V1 = EMU_ReadU32(V1 - 12752); //+ 0xFFFFCE30
	V0 = 0x300;
	if (V1 == V0)
	{
		V1 = 0x1E;
		ZZ_CLOCKCYCLES(11,0x8001FD94);
		goto ZZ_1FC0C_188;
	}
	V1 = 0x1E;
	ZZ_CLOCKCYCLES(13,0x8001FE08);
	goto ZZ_1FC0C_1FC;
ZZ_1FC0C_15C:
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 12684); //+ 0xFFFFCE74
	V0 &= 0x100;
	if (V0)
	{
		V1 = 0x21;
		ZZ_CLOCKCYCLES(6,0x8001FE08);
		goto ZZ_1FC0C_1FC;
	}
	V1 = 0x21;
	V1 = 0x80070000;
	V1 = EMU_ReadU32(V1 - 12752); //+ 0xFFFFCE30
	V0 = 0x300;
	if (V1 == V0)
	{
		V1 = 0x21;
		ZZ_CLOCKCYCLES(11,0x8001FE08);
		goto ZZ_1FC0C_1FC;
	}
	V1 = 0x21;
	ZZ_CLOCKCYCLES(11,0x8001FD94);
ZZ_1FC0C_188:
	V1 = 0x11;
	ZZ_CLOCKCYCLES(2,0x8001FE08);
	goto ZZ_1FC0C_1FC;
ZZ_1FC0C_190:
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 12684); //+ 0xFFFFCE74
	V0 &= 0x8;
	if (V0)
	{
		V1 = 0xD;
		ZZ_CLOCKCYCLES(6,0x8001FE08);
		goto ZZ_1FC0C_1FC;
	}
	V1 = 0xD;
	V1 = 0x80070000;
	V1 = EMU_ReadU32(V1 - 12752); //+ 0xFFFFCE30
	V0 = 0x300;
	if (V1 == V0)
	{
		V1 = 0x21;
		ZZ_CLOCKCYCLES(11,0x8001FDFC);
		goto ZZ_1FC0C_1F0;
	}
	V1 = 0x21;
	ZZ_CLOCKCYCLES(13,0x8001FE08);
	goto ZZ_1FC0C_1FC;
ZZ_1FC0C_1C4:
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 12684); //+ 0xFFFFCE74
	V0 &= 0x200;
	if (V0)
	{
		V1 = 0x10;
		ZZ_CLOCKCYCLES(6,0x8001FE08);
		goto ZZ_1FC0C_1FC;
	}
	V1 = 0x10;
	V1 = 0x80070000;
	V1 = EMU_ReadU32(V1 - 12752); //+ 0xFFFFCE30
	V0 = 0x300;
	if (V1 == V0)
	{
		V1 = 0x10;
		ZZ_CLOCKCYCLES(11,0x8001FE08);
		goto ZZ_1FC0C_1FC;
	}
	V1 = 0x10;
	ZZ_CLOCKCYCLES(11,0x8001FDFC);
ZZ_1FC0C_1F0:
	V1 = 0xD;
	ZZ_CLOCKCYCLES(2,0x8001FE08);
	goto ZZ_1FC0C_1FC;
ZZ_1FC0C_1F8:
	V1 = 0x10;
	ZZ_CLOCKCYCLES(1,0x8001FE08);
ZZ_1FC0C_1FC:
	V0 = EMU_ReadU32(A1);
	if ((int32_t)V0 < 0)
	{
		A1 += 4;
		ZZ_CLOCKCYCLES(4,0x8001FE28);
		goto ZZ_1FC0C_21C;
	}
	A1 += 4;
	if (V0 == V1)
	{
		ZZ_CLOCKCYCLES(6,0x8001FE2C);
		goto ZZ_1FC0C_220;
	}
	S0 += 1;
	ZZ_CLOCKCYCLES(8,0x8001FE08);
	goto ZZ_1FC0C_1FC;
ZZ_1FC0C_21C:
	S0 = 0x3;
	ZZ_CLOCKCYCLES(1,0x8001FE2C);
ZZ_1FC0C_220:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 30772); //+ 0x7834
	V1 = 0x80070000;
	V1 -= 12268;
	EMU_Write32(V1,S0);
	V0 = EMU_ReadU32(V0);
	V0 = (int32_t)S0 < (int32_t)V0;
	if (V0)
	{
		ZZ_CLOCKCYCLES(10,0x8001FE5C);
		goto ZZ_1FC0C_250;
	}
	S0 = R0;
	EMU_Write32(V1,R0);
	ZZ_CLOCKCYCLES(12,0x8001FE5C);
ZZ_1FC0C_250:
	A0 = 0x80070000;
	A0 -= 19364;
	A1 = R0;
	RA = 0x8001FE70; //ZZ_1FC0C_264
	A2 = 0x1000;
	ZZ_CLOCKCYCLES(5,0x800494CC);
	goto ZZ_494CC;
ZZ_1FC0C_264:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 30772); //+ 0x7834
	A0 = EMU_ReadU32(V0 + 8); //+ 0x8
	RA = 0x8001FE88; //ZZ_1FC0C_27C
	ZZ_CLOCKCYCLES(6,0x8001FAA0);
	goto ZZ_1FAA0;
ZZ_1FC0C_27C:
	RA = 0x8001FE90; //ZZ_1FC0C_284
	ZZ_CLOCKCYCLES(2,0x80017AB0);
	goto ZZ_17AB0;
ZZ_1FC0C_284:
	V1 = EMU_ReadU32(GP + 120); //+ 0x78
	V0 = 0x1;
	if (V1 != V0)
	{
		A1 = 0x1;
		ZZ_CLOCKCYCLES(4,0x8001FEE8);
		goto ZZ_1FC0C_2DC;
	}
	A1 = 0x1;
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 30772); //+ 0x7834
	V1 = S0 << 1;
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 + 3092); //+ 0xC14
	V1 += S0;
	V1 <<= 3;
	V0 += V1;
	EMU_Write32(V0 + 476,A0); //+ 0x1DC
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 30772); //+ 0x7834
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 + 3096); //+ 0xC18
	EMU_Write32(GP + 120,R0); //+ 0x78
	V0 += V1;
	EMU_Write32(V0 + 480,A0); //+ 0x1E0
	S4 = 0x80060000;
	S4 = EMU_ReadU32(S4 + 3100); //+ 0xC1C
	ZZ_CLOCKCYCLES(22,0x8001FEE8);
ZZ_1FC0C_2DC:
	A2 = 0x1;
	S3 = 0x80060000;
	S3 += 30772;
	V0 = S0 << 1;
	AT = 0x80060000;
	EMU_Write32(AT + 2916,R0); //+ 0xB64
	AT = 0x80060000;
	EMU_Write32(AT + 2924,R0); //+ 0xB6C
	AT = 0x80060000;
	EMU_Write32(AT + 2936,R0); //+ 0xB78
	A0 = EMU_ReadU32(S3);
	V0 += S0;
	S1 = V0 << 3;
	S2 = S1 + 476;
	RA = 0x8001FF28; //ZZ_1FC0C_31C
	A0 += S2;
	ZZ_CLOCKCYCLES(16,0x80014364);
	goto ZZ_14364;
ZZ_1FC0C_31C:
	A0 = 0x80040000;
	A0 = EMU_ReadU32(A0 - 16068); //+ 0xFFFFC13C
	V1 = 0x63960000;
	V1 |= 0x347F;
	AT = 0x80060000;
	EMU_Write32(AT - 2528,V1); //+ 0xFFFFF620
	V1 = 0x80070000;
	V1 = EMU_ReadU32(V1 - 12724); //+ 0xFFFFCE4C
	S0 = V0;
	V0 = 0x600;
	AT = 0x80060000;
	EMU_Write8(AT + 3044,R0); //+ 0xBE4
	AT = 0x80060000;
	EMU_Write8(AT + 3045,R0); //+ 0xBE5
	AT = 0x80060000;
	EMU_Write8(AT + 3046,R0); //+ 0xBE6
	AT = 0x80060000;
	EMU_Write8(AT + 3047,R0); //+ 0xBE7
	AT = 0x80060000;
	EMU_Write32(AT + 3052,A0); //+ 0xBEC
	if (V1 != V0)
	{
		ZZ_CLOCKCYCLES(22,0x8001FF90);
		goto ZZ_1FC0C_384;
	}
	A0 = 0x80060000;
	A0 -= 2528;
	RA = 0x8001FF90; //ZZ_1FC0C_384
	ZZ_CLOCKCYCLES(26,0x80030164);
	goto ZZ_30164;
ZZ_1FC0C_384:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 30772); //+ 0x7834
	A0 = EMU_ReadU32(S0 + 16); //+ 0x10
	V0 += S1;
	V1 = EMU_ReadU32(V0 + 480); //+ 0x1E0
	A0 = EMU_ReadU32(A0 + 388); //+ 0x184
	V0 = V1 << 1;
	V0 += V1;
	V0 += A0;
	V0 <<= 2;
	V0 += S0;
	A1 = EMU_ReadU32(V0 + 16); //+ 0x10
	A2 = S4;
	A3 = R0;
	RA = 0x8001FFD0; //ZZ_1FC0C_3C4
	A0 = S0;
	ZZ_CLOCKCYCLES(16,0x80020304);
	goto ZZ_20304;
ZZ_1FC0C_3C4:
	A0 = EMU_ReadU32(S3);
	A1 = 0x1;
	RA = 0x8001FFE0; //ZZ_1FC0C_3D4
	A0 += S2;
	ZZ_CLOCKCYCLES(4,0x800144C4);
	goto ZZ_144C4;
ZZ_1FC0C_3D4:
	ZZ_CLOCKCYCLES(2,0x8001FFF8);
	goto ZZ_1FC0C_3EC;
ZZ_1FC0C_3DC:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 30772); //+ 0x7834
	EMU_Write32(V0 + 4,R0); //+ 0x4
	ZZ_CLOCKCYCLES(4,0x8001FFF8);
ZZ_1FC0C_3EC:
	EMU_Write32(GP + 124,R0); //+ 0x7C
	V0 = -255;
	RA = EMU_ReadU32(SP + 36); //+ 0x24
	S4 = EMU_ReadU32(SP + 32); //+ 0x20
	S3 = EMU_ReadU32(SP + 28); //+ 0x1C
	S2 = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 40;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(11);
	ZZ_JUMPREGISTER(0x80015304,ZZ_14D6C_598);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8001FC0C,0x8001FC8C,ZZ_1FC0C);
ZZ_MARK_TARGET(0x8001FC8C,0x8001FC94,ZZ_1FC0C_80);
ZZ_MARK_TARGET(0x8001FC94,0x8001FCD0,ZZ_1FC0C_88);
ZZ_MARK_TARGET(0x8001FCD0,0x8001FCEC,ZZ_1FC0C_C4);
ZZ_MARK_TARGET(0x8001FCEC,0x8001FCFC,ZZ_1FC0C_E0);
ZZ_MARK_TARGET(0x8001FCFC,0x8001FD2C,ZZ_1FC0C_F0);
ZZ_MARK_TARGET(0x8001FD2C,0x8001FD34,ZZ_1FC0C_120);
ZZ_MARK_TARGET(0x8001FD34,0x8001FD68,ZZ_1FC0C_128);
ZZ_MARK_TARGET(0x8001FD68,0x8001FD94,ZZ_1FC0C_15C);
ZZ_MARK_TARGET(0x8001FD94,0x8001FD9C,ZZ_1FC0C_188);
ZZ_MARK_TARGET(0x8001FD9C,0x8001FDD0,ZZ_1FC0C_190);
ZZ_MARK_TARGET(0x8001FDD0,0x8001FDFC,ZZ_1FC0C_1C4);
ZZ_MARK_TARGET(0x8001FDFC,0x8001FE04,ZZ_1FC0C_1F0);
ZZ_MARK_TARGET(0x8001FE04,0x8001FE08,ZZ_1FC0C_1F8);
ZZ_MARK_TARGET(0x8001FE08,0x8001FE28,ZZ_1FC0C_1FC);
ZZ_MARK_TARGET(0x8001FE28,0x8001FE2C,ZZ_1FC0C_21C);
ZZ_MARK_TARGET(0x8001FE2C,0x8001FE5C,ZZ_1FC0C_220);
ZZ_MARK_TARGET(0x8001FE5C,0x8001FE70,ZZ_1FC0C_250);
ZZ_MARK_TARGET(0x8001FE70,0x8001FE88,ZZ_1FC0C_264);
ZZ_MARK_TARGET(0x8001FE88,0x8001FE90,ZZ_1FC0C_27C);
ZZ_MARK_TARGET(0x8001FE90,0x8001FEE8,ZZ_1FC0C_284);
ZZ_MARK_TARGET(0x8001FEE8,0x8001FF28,ZZ_1FC0C_2DC);
ZZ_MARK_TARGET(0x8001FF28,0x8001FF90,ZZ_1FC0C_31C);
ZZ_MARK_TARGET(0x8001FF90,0x8001FFD0,ZZ_1FC0C_384);
ZZ_MARK_TARGET(0x8001FFD0,0x8001FFE0,ZZ_1FC0C_3C4);
ZZ_MARK_TARGET(0x8001FFE0,0x8001FFE8,ZZ_1FC0C_3D4);
ZZ_MARK_TARGET(0x8001FFE8,0x8001FFF8,ZZ_1FC0C_3DC);
ZZ_MARK_TARGET(0x8001FFF8,0x80020024,ZZ_1FC0C_3EC);
