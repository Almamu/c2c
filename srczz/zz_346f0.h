#ifdef ZZ_INCLUDE_CODE
ZZ_346F0:
	SP -= 24;
	V0 = EMU_ReadS16(GP + 380); //+ 0x17C
	V1 = A0;
	A0 = A1;
	A1 = A2;
	V0 = (int32_t)V0 < 2;
	if (V0)
	{
		EMU_Write32(SP + 16,RA); //+ 0x10
		ZZ_CLOCKCYCLES(8,0x80034730);
		goto ZZ_346F0_40;
	}
	EMU_Write32(SP + 16,RA); //+ 0x10
	V0 = 0x1;
	if (A1 != V0)
	{
		V0 = (int32_t)A0 >> 16;
		ZZ_CLOCKCYCLES(11,0x80034734);
		goto ZZ_346F0_44;
	}
	V0 = (int32_t)A0 >> 16;
	V0 = EMU_ReadU16(GP + 396); //+ 0x18C
	EMU_Write16(V1 + 18,V0); //+ 0x12
	EMU_Write16(V1 + 16,V0); //+ 0x10
	ZZ_CLOCKCYCLES(16,0x8003473C);
	goto ZZ_346F0_4C;
ZZ_346F0_40:
	V0 = (int32_t)A0 >> 16;
	ZZ_CLOCKCYCLES(1,0x80034734);
ZZ_346F0_44:
	EMU_Write16(V1 + 16,V0); //+ 0x10
	EMU_Write16(V1 + 18,A0); //+ 0x12
	ZZ_CLOCKCYCLES(2,0x8003473C);
ZZ_346F0_4C:
	A0 = EMU_ReadS16(GP + 616); //+ 0x268
	A2 = EMU_ReadS16(V1 + 16); //+ 0x10
	A3 = EMU_ReadS16(V1 + 18); //+ 0x12
	V0 = -1;
	EMU_Write16(V1,A1);
	A1 <<= 16;
	A1 = (int32_t)A1 >> 16;
	RA = 0x80034760; //ZZ_346F0_70
	EMU_Write32(V1 + 4,V0); //+ 0x4
	ZZ_CLOCKCYCLES(9,0x800569F8);
	goto ZZ_569F8;
ZZ_346F0_70:
	RA = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 24;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(4);
	ZZ_JUMPREGISTER(0x800344DC,ZZ_34204_2D8);
	ZZ_JUMPREGISTER(0x800344C4,ZZ_34204_2C0);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x800346F0,0x80034730,ZZ_346F0);
ZZ_MARK_TARGET(0x80034730,0x80034734,ZZ_346F0_40);
ZZ_MARK_TARGET(0x80034734,0x8003473C,ZZ_346F0_44);
ZZ_MARK_TARGET(0x8003473C,0x80034760,ZZ_346F0_4C);
ZZ_MARK_TARGET(0x80034760,0x80034770,ZZ_346F0_70);
