#ifdef ZZ_INCLUDE_CODE
ZZ_1CD48:
	SP -= 136;
	EMU_Write32(SP + 124,S5); //+ 0x7C
	S5 = EMU_ReadU32(SP + 152); //+ 0x98
	EMU_Write32(SP + 108,S1); //+ 0x6C
	S1 = A0;
	EMU_Write32(SP + 104,S0); //+ 0x68
	S0 = A1;
	EMU_Write32(SP + 112,S2); //+ 0x70
	S2 = A2;
	EMU_Write32(SP + 120,S4); //+ 0x78
	S4 = A3;
	V1 = -26;
	EMU_Write32(SP + 128,RA); //+ 0x80
	if (!S0)
	{
		EMU_Write32(SP + 116,S3); //+ 0x74
		ZZ_CLOCKCYCLES(15,0x8001CFDC);
		goto ZZ_1CD48_294;
	}
	EMU_Write32(SP + 116,S3); //+ 0x74
	if (!S1)
	{
		V0 = 0x1;
		ZZ_CLOCKCYCLES(17,0x8001CD90);
		goto ZZ_1CD48_48;
	}
	V0 = 0x1;
	EMU_Write32(S1 + 212,V0); //+ 0xD4
	ZZ_CLOCKCYCLES(18,0x8001CD90);
ZZ_1CD48_48:
	V0 = EMU_ReadU32(S0 + 204); //+ 0xCC
	if (!V0)
	{
		EMU_Write32(S0 + 92,S1); //+ 0x5C
		ZZ_CLOCKCYCLES(4,0x8001CE1C);
		goto ZZ_1CD48_D4;
	}
	EMU_Write32(S0 + 92,S1); //+ 0x5C
	V1 = EMU_ReadU32(S0 + 188); //+ 0xBC
	V0 = V1 + 4;
	EMU_Write32(S0 + 188,V0); //+ 0xBC
	EMU_Write32(V1,S2);
	V1 = EMU_ReadU32(S0 + 188); //+ 0xBC
	A0 = S0;
	A1 = 0x2;
	A2 = 0xFFFF;
	V0 = V1 + 4;
	EMU_Write32(S0 + 188,V0); //+ 0xBC
	RA = 0x8001CDD4; //ZZ_1CD48_8C
	EMU_Write32(V1,S5);
	ZZ_CLOCKCYCLES(17,0x8001C758);
	goto ZZ_1C758;
ZZ_1CD48_8C:
	V0 = EMU_ReadU32(S0 + 204); //+ 0xCC
	A0 = S0;
	A1 = 0x8;
	A2 = SP + 16;
	RA = 0x8001CDEC; //ZZ_1CD48_A4
	EMU_Write32(S0 + 192,V0); //+ 0xC0
	ZZ_CLOCKCYCLES(6,0x8003A2AC);
	goto ZZ_3A2AC;
ZZ_1CD48_A4:
	V1 = V0;
	V0 = -26;
	if (V1 == V0)
	{
		V0 = (int32_t)V1 < -254;
		ZZ_CLOCKCYCLES(4,0x8001CE08);
		goto ZZ_1CD48_C0;
	}
	V0 = (int32_t)V1 < -254;
	if (!V0)
	{
		V0 = V1;
		ZZ_CLOCKCYCLES(6,0x8001CFEC);
		goto ZZ_1CD48_2A4;
	}
	V0 = V1;
	S3 = EMU_ReadU32(SP + 16); //+ 0x10
	ZZ_CLOCKCYCLES(7,0x8001CE08);
ZZ_1CD48_C0:
	if (!S1)
	{
		V0 = (int32_t)V1 < -254;
		ZZ_CLOCKCYCLES(2,0x8001CE20);
		goto ZZ_1CD48_D8;
	}
	V0 = (int32_t)V1 < -254;
	V0 = EMU_ReadU32(SP + 20); //+ 0x14
	EMU_Write32(S1 + 212,V0); //+ 0xD4
	ZZ_CLOCKCYCLES(5,0x8001CE1C);
ZZ_1CD48_D4:
	V0 = (int32_t)V1 < -254;
	ZZ_CLOCKCYCLES(1,0x8001CE20);
ZZ_1CD48_D8:
	if (V0)
	{
		V0 = 0xFF;
		ZZ_CLOCKCYCLES(2,0x8001CF00);
		goto ZZ_1CD48_1B8;
	}
	V0 = 0xFF;
	V1 = EMU_ReadU32(S0 + 12); //+ 0xC
	V0 = EMU_ReadU32(V1 + 16); //+ 0x10
	V0 = EMU_ReadU32(V0 + 16); //+ 0x10
	A0 = (int32_t)S2 >> 8;
	V0 = (int32_t)A0 < (int32_t)V0;
	if (!V0)
	{
		V0 = A0 << 1;
		ZZ_CLOCKCYCLES(11,0x8001CE64);
		goto ZZ_1CD48_11C;
	}
	V0 = A0 << 1;
	V1 = EMU_ReadU32(V1 + 28); //+ 0x1C
	V0 += V1;
	S3 = EMU_ReadU16(V0);
	ZZ_CLOCKCYCLES(17,0x8001CE68);
	goto ZZ_1CD48_120;
ZZ_1CD48_11C:
	S3 = 0xFF;
	ZZ_CLOCKCYCLES(1,0x8001CE68);
ZZ_1CD48_120:
	if (!S1)
	{
		V0 = S3 ^ 0xFF;
		ZZ_CLOCKCYCLES(2,0x8001CE78);
		goto ZZ_1CD48_130;
	}
	V0 = S3 ^ 0xFF;
	V0 = R0 < V0;
	EMU_Write32(S1 + 212,V0); //+ 0xD4
	ZZ_CLOCKCYCLES(4,0x8001CE78);
ZZ_1CD48_130:
	V0 = S3 & 0x8000;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(3,0x8001CEFC);
		goto ZZ_1CD48_1B4;
	}
	EMU_Write32(S0 + 284,S2); //+ 0x11C
	if ((int32_t)S4 <= 0)
	{
		A0 = R0;
		ZZ_CLOCKCYCLES(6,0x8001CEBC);
		goto ZZ_1CD48_174;
	}
	A0 = R0;
	A3 = S5;
	ZZ_CLOCKCYCLES(7,0x8001CE94);
ZZ_1CD48_14C:
	V1 = EMU_ReadU32(S0 + 188); //+ 0xBC
	V0 = V1 + 4;
	EMU_Write32(S0 + 188,V0); //+ 0xBC
	V0 = EMU_ReadU32(A3);
	A0 += 1;
	EMU_Write32(V1,V0);
	V0 = (int32_t)A0 < (int32_t)S4;
	if (V0)
	{
		A3 += 4;
		ZZ_CLOCKCYCLES(10,0x8001CE94);
		goto ZZ_1CD48_14C;
	}
	A3 += 4;
	ZZ_CLOCKCYCLES(10,0x8001CEBC);
ZZ_1CD48_174:
	A0 = S0;
	A1 = S4;
	RA = 0x8001CECC; //ZZ_1CD48_184
	A2 = 0xFFFF;
	ZZ_CLOCKCYCLES(4,0x8001C758);
	goto ZZ_1C758;
ZZ_1CD48_184:
	V0 = EMU_ReadU32(S0 + 12); //+ 0xC
	A0 = S0;
	A1 = 0x3;
	V1 = EMU_ReadU32(V0 + 20); //+ 0x14
	A2 = R0;
	V0 = S3 & 0x3FFF;
	V0 <<= 2;
	V1 += V0;
	RA = 0x8001CEF4; //ZZ_1CD48_1AC
	EMU_Write32(A0 + 192,V1); //+ 0xC0
	ZZ_CLOCKCYCLES(10,0x8003A2AC);
	goto ZZ_3A2AC;
ZZ_1CD48_1AC:
	ZZ_CLOCKCYCLES(2,0x8001CFEC);
	goto ZZ_1CD48_2A4;
ZZ_1CD48_1B4:
	V0 = 0xFF;
	ZZ_CLOCKCYCLES(1,0x8001CF00);
ZZ_1CD48_1B8:
	if (S3 == V0)
	{
		V0 = 0x1800;
		ZZ_CLOCKCYCLES(2,0x8001CFE8);
		goto ZZ_1CD48_2A0;
	}
	V0 = 0x1800;
	A1 = EMU_ReadU32(S0 + 176); //+ 0xB0
	if (S2 == V0)
	{
		V0 = 0x2600;
		ZZ_CLOCKCYCLES(5,0x8001CF2C);
		goto ZZ_1CD48_1E4;
	}
	V0 = 0x2600;
	if (S2 == V0)
	{
		V0 = 0x1900;
		ZZ_CLOCKCYCLES(7,0x8001CF2C);
		goto ZZ_1CD48_1E4;
	}
	V0 = 0x1900;
	if (S2 == V0)
	{
		V0 = 0x2500;
		ZZ_CLOCKCYCLES(9,0x8001CF2C);
		goto ZZ_1CD48_1E4;
	}
	V0 = 0x2500;
	if (S2 != V0)
	{
		ZZ_CLOCKCYCLES(11,0x8001CF34);
		goto ZZ_1CD48_1EC;
	}
	ZZ_CLOCKCYCLES(11,0x8001CF2C);
ZZ_1CD48_1E4:
	V0 = -3;
	A1 &= V0;
	ZZ_CLOCKCYCLES(2,0x8001CF34);
ZZ_1CD48_1EC:
	V0 = EMU_ReadU32(S0 + 12); //+ 0xC
	V1 = EMU_ReadU32(V0 + 32); //+ 0x20
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 - 2524); //+ 0xFFFFF624
	V0 = S3 << 4;
	V0 += V1;
	A2 = EMU_ReadU32(V0);
	if (S0 != A0)
	{
		V0 = A1 & A2;
		ZZ_CLOCKCYCLES(10,0x8001CF88);
		goto ZZ_1CD48_240;
	}
	V0 = A1 & A2;
	V1 = EMU_ReadU32(S0 + 264); //+ 0x108
	V0 = V1 - 3;
	V0 = V0 < 2;
	if (V0)
	{
		V0 = A1 | 0x1002;
		ZZ_CLOCKCYCLES(16,0x8001CF84);
		goto ZZ_1CD48_23C;
	}
	V0 = A1 | 0x1002;
	V0 = 0x2;
	if (V1 != V0)
	{
		V0 = A1 & A2;
		ZZ_CLOCKCYCLES(19,0x8001CF88);
		goto ZZ_1CD48_240;
	}
	V0 = A1 & A2;
	V0 = A1 | 0x1002;
	ZZ_CLOCKCYCLES(20,0x8001CF84);
ZZ_1CD48_23C:
	V0 &= A2;
	ZZ_CLOCKCYCLES(1,0x8001CF88);
ZZ_1CD48_240:
	if (V0)
	{
		V0 = 0xFF;
		ZZ_CLOCKCYCLES(2,0x8001CFD4);
		goto ZZ_1CD48_28C;
	}
	V0 = 0xFF;
	V0 = 0x1800;
	if (S2 == V0)
	{
		EMU_Write32(S0 + 284,S2); //+ 0x11C
		ZZ_CLOCKCYCLES(5,0x8001CFA8);
		goto ZZ_1CD48_260;
	}
	EMU_Write32(S0 + 284,S2); //+ 0x11C
	V0 = 0x1900;
	if (S2 != V0)
	{
		A0 = S0;
		ZZ_CLOCKCYCLES(8,0x8001CFBC);
		goto ZZ_1CD48_274;
	}
	A0 = S0;
	ZZ_CLOCKCYCLES(8,0x8001CFA8);
ZZ_1CD48_260:
	V0 = EMU_ReadU32(S0 + 168); //+ 0xA8
	V1 = 0x10000;
	V0 |= V1;
	EMU_Write32(S0 + 168,V0); //+ 0xA8
	A0 = S0;
	ZZ_CLOCKCYCLES(5,0x8001CFBC);
ZZ_1CD48_274:
	A1 = S3;
	A2 = S4;
	RA = 0x8001CFCC; //ZZ_1CD48_284
	A3 = S5;
	ZZ_CLOCKCYCLES(4,0x8001C478);
	goto ZZ_1C478;
ZZ_1CD48_284:
	V0 = -255;
	ZZ_CLOCKCYCLES(2,0x8001CFEC);
	goto ZZ_1CD48_2A4;
ZZ_1CD48_28C:
	if (S3 == V0)
	{
		V0 = -255;
		ZZ_CLOCKCYCLES(2,0x8001CFEC);
		goto ZZ_1CD48_2A4;
	}
	V0 = -255;
	ZZ_CLOCKCYCLES(2,0x8001CFDC);
ZZ_1CD48_294:
	if (!S1)
	{
		V0 = -255;
		ZZ_CLOCKCYCLES(2,0x8001CFEC);
		goto ZZ_1CD48_2A4;
	}
	V0 = -255;
	EMU_Write32(S1 + 212,R0); //+ 0xD4
	ZZ_CLOCKCYCLES(3,0x8001CFE8);
ZZ_1CD48_2A0:
	V0 = -255;
	ZZ_CLOCKCYCLES(1,0x8001CFEC);
ZZ_1CD48_2A4:
	RA = EMU_ReadU32(SP + 128); //+ 0x80
	S5 = EMU_ReadU32(SP + 124); //+ 0x7C
	S4 = EMU_ReadU32(SP + 120); //+ 0x78
	S3 = EMU_ReadU32(SP + 116); //+ 0x74
	S2 = EMU_ReadU32(SP + 112); //+ 0x70
	S1 = EMU_ReadU32(SP + 108); //+ 0x6C
	S0 = EMU_ReadU32(SP + 104); //+ 0x68
	SP += 136;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(10);
	ZZ_JUMPREGISTER(0x800396E8,ZZ_395A8_140);
	ZZ_JUMPREGISTER(0x80019D40,ZZ_19CF4_4C);
	ZZ_JUMPREGISTER(0x80011968,ZZ_11800_168);
	ZZ_JUMPREGISTER(0x80015DB0,ZZ_15A04_3AC);
	ZZ_JUMPREGISTER(0x80029F84,ZZ_29AF8_48C);
	ZZ_JUMPREGISTER(0x80038278,ZZ_37930_948);
	ZZ_JUMPREGISTER(0x8002F6C8,ZZ_2F658_70);
	ZZ_JUMPREGISTER(0x80038250,ZZ_37930_920);
	ZZ_JUMPREGISTER(0x8002338C,ZZ_232F8_94);
	ZZ_JUMPREGISTER(0x8002C24C,ZZ_2BF4C_300);
	ZZ_JUMPREGISTER(0x8002C394,ZZ_2C26C_128);
	ZZ_JUMPREGISTER(0x8002BE94,ZZ_2B890_604);
	ZZ_JUMPREGISTER(0x8001D2E4,ZZ_1D014_2D0);
	ZZ_JUMPREGISTER(0x80019EEC,ZZ_19E68_84);
	ZZ_JUMPREGISTER(0x8001C288,ZZ_1C114_174);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8001CD48,0x8001CD90,ZZ_1CD48);
ZZ_MARK_TARGET(0x8001CD90,0x8001CDD4,ZZ_1CD48_48);
ZZ_MARK_TARGET(0x8001CDD4,0x8001CDEC,ZZ_1CD48_8C);
ZZ_MARK_TARGET(0x8001CDEC,0x8001CE08,ZZ_1CD48_A4);
ZZ_MARK_TARGET(0x8001CE08,0x8001CE1C,ZZ_1CD48_C0);
ZZ_MARK_TARGET(0x8001CE1C,0x8001CE20,ZZ_1CD48_D4);
ZZ_MARK_TARGET(0x8001CE20,0x8001CE64,ZZ_1CD48_D8);
ZZ_MARK_TARGET(0x8001CE64,0x8001CE68,ZZ_1CD48_11C);
ZZ_MARK_TARGET(0x8001CE68,0x8001CE78,ZZ_1CD48_120);
ZZ_MARK_TARGET(0x8001CE78,0x8001CE94,ZZ_1CD48_130);
ZZ_MARK_TARGET(0x8001CE94,0x8001CEBC,ZZ_1CD48_14C);
ZZ_MARK_TARGET(0x8001CEBC,0x8001CECC,ZZ_1CD48_174);
ZZ_MARK_TARGET(0x8001CECC,0x8001CEF4,ZZ_1CD48_184);
ZZ_MARK_TARGET(0x8001CEF4,0x8001CEFC,ZZ_1CD48_1AC);
ZZ_MARK_TARGET(0x8001CEFC,0x8001CF00,ZZ_1CD48_1B4);
ZZ_MARK_TARGET(0x8001CF00,0x8001CF2C,ZZ_1CD48_1B8);
ZZ_MARK_TARGET(0x8001CF2C,0x8001CF34,ZZ_1CD48_1E4);
ZZ_MARK_TARGET(0x8001CF34,0x8001CF84,ZZ_1CD48_1EC);
ZZ_MARK_TARGET(0x8001CF84,0x8001CF88,ZZ_1CD48_23C);
ZZ_MARK_TARGET(0x8001CF88,0x8001CFA8,ZZ_1CD48_240);
ZZ_MARK_TARGET(0x8001CFA8,0x8001CFBC,ZZ_1CD48_260);
ZZ_MARK_TARGET(0x8001CFBC,0x8001CFCC,ZZ_1CD48_274);
ZZ_MARK_TARGET(0x8001CFCC,0x8001CFD4,ZZ_1CD48_284);
ZZ_MARK_TARGET(0x8001CFD4,0x8001CFDC,ZZ_1CD48_28C);
ZZ_MARK_TARGET(0x8001CFDC,0x8001CFE8,ZZ_1CD48_294);
ZZ_MARK_TARGET(0x8001CFE8,0x8001CFEC,ZZ_1CD48_2A0);
ZZ_MARK_TARGET(0x8001CFEC,0x8001D014,ZZ_1CD48_2A4);
