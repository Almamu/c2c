#ifdef ZZ_INCLUDE_CODE
ZZ_281B0:
	SP -= 112;
	EMU_Write32(SP + 100,S7); //+ 0x64
	S7 = EMU_ReadU32(SP + 128); //+ 0x80
	EMU_Write32(SP + 104,FP); //+ 0x68
	FP = EMU_ReadU32(SP + 132); //+ 0x84
	EMU_Write32(SP + 96,S6); //+ 0x60
	S6 = A0;
	EMU_Write32(SP + 76,S1); //+ 0x4C
	S1 = A2;
	EMU_Write32(SP + 84,S3); //+ 0x54
	S3 = A3;
	V1 = A1;
	A1 &= 0x1;
	EMU_Write32(SP + 108,RA); //+ 0x6C
	EMU_Write32(SP + 92,S5); //+ 0x5C
	EMU_Write32(SP + 88,S4); //+ 0x58
	EMU_Write32(SP + 80,S2); //+ 0x50
	if (A1)
	{
		EMU_Write32(SP + 72,S0); //+ 0x48
		ZZ_CLOCKCYCLES(19,0x80028208);
		goto ZZ_281B0_58;
	}
	EMU_Write32(SP + 72,S0); //+ 0x48
	V0 = V1 & 0xFFFF;
	if (V0)
	{
		T1 = S6 + V0;
		ZZ_CLOCKCYCLES(22,0x8002820C);
		goto ZZ_281B0_5C;
	}
	T1 = S6 + V0;
	ZZ_CLOCKCYCLES(22,0x80028208);
ZZ_281B0_58:
	T1 = V1 & 0xFFFF;
	ZZ_CLOCKCYCLES(1,0x8002820C);
ZZ_281B0_5C:
	V0 = V1 & 0x1;
	if (V0)
	{
		A1 = 0x7FFF0000;
		ZZ_CLOCKCYCLES(3,0x80028224);
		goto ZZ_281B0_74;
	}
	A1 = 0x7FFF0000;
	V0 = V1 & 0xFFFF;
	if (V0)
	{
		ZZ_CLOCKCYCLES(6,0x80028738);
		goto ZZ_281B0_588;
	}
	ZZ_CLOCKCYCLES(6,0x80028224);
ZZ_281B0_74:
	if (T1)
	{
		A1 |= 0xFFFF;
		ZZ_CLOCKCYCLES(2,0x8002843C);
		goto ZZ_281B0_28C;
	}
	A1 |= 0xFFFF;
	V0 = EMU_ReadU32(S7);
	if ((int32_t)V0 <= 0)
	{
		ZZ_CLOCKCYCLES(6,0x8002824C);
		goto ZZ_281B0_9C;
	}
	V0 = EMU_ReadU32(S1);
	V1 = EMU_ReadU32(S1 + 12); //+ 0xC
	V0 += V1;
	ZZ_CLOCKCYCLES(10,0x80028250);
	goto ZZ_281B0_A0;
ZZ_281B0_9C:
	V0 = EMU_ReadU32(S1);
	ZZ_CLOCKCYCLES(1,0x80028250);
ZZ_281B0_A0:
	EMU_Write32(SP + 24,V0); //+ 0x18
	V0 = EMU_ReadU32(S7 + 4); //+ 0x4
	if ((int32_t)V0 <= 0)
	{
		ZZ_CLOCKCYCLES(6,0x80028278);
		goto ZZ_281B0_C8;
	}
	V0 = EMU_ReadU32(S1 + 4); //+ 0x4
	V1 = EMU_ReadU32(S1 + 16); //+ 0x10
	V0 += V1;
	ZZ_CLOCKCYCLES(10,0x8002827C);
	goto ZZ_281B0_CC;
ZZ_281B0_C8:
	V0 = EMU_ReadU32(S1 + 4); //+ 0x4
	ZZ_CLOCKCYCLES(1,0x8002827C);
ZZ_281B0_CC:
	EMU_Write32(SP + 28,V0); //+ 0x1C
	V0 = EMU_ReadU32(S7 + 8); //+ 0x8
	if ((int32_t)V0 <= 0)
	{
		ZZ_CLOCKCYCLES(6,0x800282A4);
		goto ZZ_281B0_F4;
	}
	V0 = EMU_ReadU32(S1 + 8); //+ 0x8
	V1 = EMU_ReadU32(S1 + 20); //+ 0x14
	V0 += V1;
	ZZ_CLOCKCYCLES(10,0x800282A8);
	goto ZZ_281B0_F8;
ZZ_281B0_F4:
	V0 = EMU_ReadU32(S1 + 8); //+ 0x8
	ZZ_CLOCKCYCLES(1,0x800282A8);
ZZ_281B0_F8:
	EMU_Write32(SP + 32,V0); //+ 0x20
	A0 = EMU_ReadU32(S7);
	if (!A0)
	{
		ZZ_CLOCKCYCLES(6,0x80028314);
		goto ZZ_281B0_164;
	}
	V0 = EMU_ReadU32(SP + 24); //+ 0x18
	V1 = EMU_ReadU32(S3);
	V0 = V0 - V1;
	V0 <<= 8;
	EMU_SDivide(V0,A0);
	if (A0)
	{
		ZZ_CLOCKCYCLES(14,0x800282E4);
		goto ZZ_281B0_134;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(15,0x800282E4);
ZZ_281B0_134:
	AT = -1;
	if (A0 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x800282FC);
		goto ZZ_281B0_14C;
	}
	AT = 0x80000000;
	if (V0 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x800282FC);
		goto ZZ_281B0_14C;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x800282FC);
ZZ_281B0_14C:
	V1 = LO;
	V0 = (int32_t)V1 < (int32_t)A1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(5,0x80028314);
		goto ZZ_281B0_164;
	}
	A1 = V1;
	ZZ_CLOCKCYCLES(6,0x80028314);
ZZ_281B0_164:
	A0 = EMU_ReadU32(S7 + 4); //+ 0x4
	if (!A0)
	{
		ZZ_CLOCKCYCLES(4,0x80028378);
		goto ZZ_281B0_1C8;
	}
	V0 = EMU_ReadU32(SP + 28); //+ 0x1C
	V1 = EMU_ReadU32(S3 + 4); //+ 0x4
	V0 = V0 - V1;
	V0 <<= 8;
	EMU_SDivide(V0,A0);
	if (A0)
	{
		ZZ_CLOCKCYCLES(12,0x80028348);
		goto ZZ_281B0_198;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(13,0x80028348);
ZZ_281B0_198:
	AT = -1;
	if (A0 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x80028360);
		goto ZZ_281B0_1B0;
	}
	AT = 0x80000000;
	if (V0 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x80028360);
		goto ZZ_281B0_1B0;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x80028360);
ZZ_281B0_1B0:
	V1 = LO;
	V0 = (int32_t)V1 < (int32_t)A1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(5,0x80028378);
		goto ZZ_281B0_1C8;
	}
	A1 = V1;
	ZZ_CLOCKCYCLES(6,0x80028378);
ZZ_281B0_1C8:
	A0 = EMU_ReadU32(S7 + 8); //+ 0x8
	if (!A0)
	{
		ZZ_CLOCKCYCLES(4,0x800283DC);
		goto ZZ_281B0_22C;
	}
	V0 = EMU_ReadU32(SP + 32); //+ 0x20
	V1 = EMU_ReadU32(S3 + 8); //+ 0x8
	V0 = V0 - V1;
	V0 <<= 8;
	EMU_SDivide(V0,A0);
	if (A0)
	{
		ZZ_CLOCKCYCLES(12,0x800283AC);
		goto ZZ_281B0_1FC;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(13,0x800283AC);
ZZ_281B0_1FC:
	AT = -1;
	if (A0 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x800283C4);
		goto ZZ_281B0_214;
	}
	AT = 0x80000000;
	if (V0 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x800283C4);
		goto ZZ_281B0_214;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x800283C4);
ZZ_281B0_214:
	V1 = LO;
	V0 = (int32_t)V1 < (int32_t)A1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(5,0x800283DC);
		goto ZZ_281B0_22C;
	}
	A1 = V1;
	ZZ_CLOCKCYCLES(6,0x800283DC);
ZZ_281B0_22C:
	V0 = EMU_ReadU32(S7);
	A1 += 256;
	EMU_SMultiply(A1,V0);
	V0 = EMU_ReadU32(S3);
	T2 = LO;
	V1 = (int32_t)T2 >> 8;
	V0 += V1;
	EMU_Write32(S3,V0);
	V0 = EMU_ReadU32(S7 + 4); //+ 0x4
	EMU_SMultiply(A1,V0);
	V0 = EMU_ReadU32(S3 + 4); //+ 0x4
	T2 = LO;
	V1 = (int32_t)T2 >> 8;
	V0 += V1;
	EMU_Write32(S3 + 4,V0); //+ 0x4
	V0 = EMU_ReadU32(S7 + 8); //+ 0x8
	EMU_SMultiply(A1,V0);
	V0 = EMU_ReadU32(S3 + 8); //+ 0x8
	T2 = LO;
	V1 = (int32_t)T2 >> 8;
	V0 += V1;
	ZZ_CLOCKCYCLES(24,0x80028728);
	goto ZZ_281B0_578;
ZZ_281B0_28C:
	V0 = EMU_ReadU32(S7);
	if ((int32_t)V0 >= 0)
	{
		ZZ_CLOCKCYCLES(4,0x8002845C);
		goto ZZ_281B0_2AC;
	}
	V0 = EMU_ReadU32(S1);
	V1 = EMU_ReadU32(S1 + 12); //+ 0xC
	V0 += V1;
	ZZ_CLOCKCYCLES(8,0x80028460);
	goto ZZ_281B0_2B0;
ZZ_281B0_2AC:
	V0 = EMU_ReadU32(S1);
	ZZ_CLOCKCYCLES(1,0x80028460);
ZZ_281B0_2B0:
	EMU_Write32(SP + 24,V0); //+ 0x18
	V0 = EMU_ReadU32(S7 + 4); //+ 0x4
	if ((int32_t)V0 >= 0)
	{
		ZZ_CLOCKCYCLES(6,0x80028488);
		goto ZZ_281B0_2D8;
	}
	V0 = EMU_ReadU32(S1 + 4); //+ 0x4
	V1 = EMU_ReadU32(S1 + 16); //+ 0x10
	V0 += V1;
	ZZ_CLOCKCYCLES(10,0x8002848C);
	goto ZZ_281B0_2DC;
ZZ_281B0_2D8:
	V0 = EMU_ReadU32(S1 + 4); //+ 0x4
	ZZ_CLOCKCYCLES(1,0x8002848C);
ZZ_281B0_2DC:
	EMU_Write32(SP + 28,V0); //+ 0x1C
	V0 = EMU_ReadU32(S7 + 8); //+ 0x8
	if ((int32_t)V0 >= 0)
	{
		ZZ_CLOCKCYCLES(6,0x800284B4);
		goto ZZ_281B0_304;
	}
	V0 = EMU_ReadU32(S1 + 8); //+ 0x8
	V1 = EMU_ReadU32(S1 + 20); //+ 0x14
	V0 += V1;
	ZZ_CLOCKCYCLES(10,0x800284B8);
	goto ZZ_281B0_308;
ZZ_281B0_304:
	V0 = EMU_ReadU32(S1 + 8); //+ 0x8
	ZZ_CLOCKCYCLES(1,0x800284B8);
ZZ_281B0_308:
	EMU_Write32(SP + 32,V0); //+ 0x20
	A0 = EMU_ReadU32(S7);
	if (!A0)
	{
		A1 = 0x80000000;
		ZZ_CLOCKCYCLES(6,0x80028528);
		goto ZZ_281B0_378;
	}
	A1 = 0x80000000;
	V1 = EMU_ReadU32(S3);
	V0 = EMU_ReadU32(SP + 24); //+ 0x18
	V1 = V1 - A0;
	V0 = V0 - V1;
	V0 <<= 8;
	EMU_SDivide(V0,A0);
	if (A0)
	{
		ZZ_CLOCKCYCLES(14,0x800284F4);
		goto ZZ_281B0_344;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(15,0x800284F4);
ZZ_281B0_344:
	AT = -1;
	if (A0 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x8002850C);
		goto ZZ_281B0_35C;
	}
	AT = 0x80000000;
	if (V0 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x8002850C);
		goto ZZ_281B0_35C;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x8002850C);
ZZ_281B0_35C:
	V1 = LO;
	V0 = (int32_t)A1 < (int32_t)V1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(5,0x80028528);
		goto ZZ_281B0_378;
	}
	A1 = V1;
	T0 = R0;
	ZZ_CLOCKCYCLES(7,0x80028528);
ZZ_281B0_378:
	A0 = EMU_ReadU32(S7 + 8); //+ 0x8
	if (!A0)
	{
		ZZ_CLOCKCYCLES(4,0x800285CC);
		goto ZZ_281B0_41C;
	}
	V1 = EMU_ReadU32(S3 + 8); //+ 0x8
	V0 = EMU_ReadU32(SP + 32); //+ 0x20
	V1 = V1 - A0;
	V0 = V0 - V1;
	V0 <<= 8;
	EMU_SDivide(V0,A0);
	if (A0)
	{
		ZZ_CLOCKCYCLES(12,0x8002855C);
		goto ZZ_281B0_3AC;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(13,0x8002855C);
ZZ_281B0_3AC:
	AT = -1;
	if (A0 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x80028574);
		goto ZZ_281B0_3C4;
	}
	AT = 0x80000000;
	if (V0 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x80028574);
		goto ZZ_281B0_3C4;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x80028574);
ZZ_281B0_3C4:
	V1 = LO;
	V0 = (int32_t)A1 < (int32_t)V1;
	if (V0)
	{
		ZZ_CLOCKCYCLES(5,0x800285C4);
		goto ZZ_281B0_414;
	}
	V0 = EMU_ReadU32(S7);
	if ((int32_t)A0 >= 0)
	{
		ZZ_CLOCKCYCLES(8,0x80028598);
		goto ZZ_281B0_3E8;
	}
	A0 = -A0;
	ZZ_CLOCKCYCLES(9,0x80028598);
ZZ_281B0_3E8:
	if ((int32_t)V0 < 0)
	{
		ZZ_CLOCKCYCLES(2,0x800285B4);
		goto ZZ_281B0_404;
	}
	V0 = (int32_t)V0 < (int32_t)A0;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(5,0x800285CC);
		goto ZZ_281B0_41C;
	}
	A1 = V1;
	ZZ_CLOCKCYCLES(7,0x800285C8);
	goto ZZ_281B0_418;
ZZ_281B0_404:
	V0 = -V0;
	V0 = (int32_t)V0 < (int32_t)A0;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(4,0x800285CC);
		goto ZZ_281B0_41C;
	}
	ZZ_CLOCKCYCLES(4,0x800285C4);
ZZ_281B0_414:
	A1 = V1;
	ZZ_CLOCKCYCLES(1,0x800285C8);
ZZ_281B0_418:
	T0 = 0x2;
	ZZ_CLOCKCYCLES(1,0x800285CC);
ZZ_281B0_41C:
	A0 = EMU_ReadU32(S7 + 4); //+ 0x4
	if (!A0)
	{
		V0 = 0x1;
		ZZ_CLOCKCYCLES(4,0x800286A8);
		goto ZZ_281B0_4F8;
	}
	V0 = 0x1;
	V1 = EMU_ReadU32(S3 + 4); //+ 0x4
	V0 = EMU_ReadU32(SP + 28); //+ 0x1C
	V1 = V1 - A0;
	V0 = V0 - V1;
	V0 <<= 8;
	EMU_SDivide(V0,A0);
	if (A0)
	{
		ZZ_CLOCKCYCLES(12,0x80028600);
		goto ZZ_281B0_450;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(13,0x80028600);
ZZ_281B0_450:
	AT = -1;
	if (A0 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x80028618);
		goto ZZ_281B0_468;
	}
	AT = 0x80000000;
	if (V0 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x80028618);
		goto ZZ_281B0_468;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x80028618);
ZZ_281B0_468:
	V1 = LO;
	V0 = (int32_t)A1 < (int32_t)V1;
	if (V0)
	{
		ZZ_CLOCKCYCLES(5,0x800286A0);
		goto ZZ_281B0_4F0;
	}
	if (T0)
	{
		V0 = 0x2;
		ZZ_CLOCKCYCLES(7,0x8002865C);
		goto ZZ_281B0_4AC;
	}
	V0 = 0x2;
	V0 = EMU_ReadU32(S7);
	if ((int32_t)A0 >= 0)
	{
		V1 = A0;
		ZZ_CLOCKCYCLES(10,0x80028644);
		goto ZZ_281B0_494;
	}
	V1 = A0;
	V1 = -V1;
	ZZ_CLOCKCYCLES(11,0x80028644);
ZZ_281B0_494:
	if ((int32_t)V0 >= 0)
	{
		ZZ_CLOCKCYCLES(2,0x80028650);
		goto ZZ_281B0_4A0;
	}
	V0 = -V0;
	ZZ_CLOCKCYCLES(3,0x80028650);
ZZ_281B0_4A0:
	V0 = (int32_t)V0 < (int32_t)V1;
	if (V0)
	{
		V0 = 0x2;
		ZZ_CLOCKCYCLES(3,0x800286A0);
		goto ZZ_281B0_4F0;
	}
	V0 = 0x2;
	ZZ_CLOCKCYCLES(3,0x8002865C);
ZZ_281B0_4AC:
	if (T0 != V0)
	{
		V0 = 0x1;
		ZZ_CLOCKCYCLES(2,0x800286A8);
		goto ZZ_281B0_4F8;
	}
	V0 = 0x1;
	V0 = EMU_ReadU32(S7 + 4); //+ 0x4
	V1 = EMU_ReadU32(S7 + 8); //+ 0x8
	if ((int32_t)V0 >= 0)
	{
		A0 = V0;
		ZZ_CLOCKCYCLES(6,0x80028678);
		goto ZZ_281B0_4C8;
	}
	A0 = V0;
	A0 = -A0;
	ZZ_CLOCKCYCLES(7,0x80028678);
ZZ_281B0_4C8:
	if ((int32_t)V1 < 0)
	{
		V0 = (int32_t)V1 < (int32_t)A0;
		ZZ_CLOCKCYCLES(2,0x80028690);
		goto ZZ_281B0_4E0;
	}
	V0 = (int32_t)V1 < (int32_t)A0;
	if (V0)
	{
		V0 = 0x1;
		ZZ_CLOCKCYCLES(4,0x800286A0);
		goto ZZ_281B0_4F0;
	}
	V0 = 0x1;
	ZZ_CLOCKCYCLES(6,0x800286A8);
	goto ZZ_281B0_4F8;
ZZ_281B0_4E0:
	V0 = -V1;
	V0 = (int32_t)V0 < (int32_t)A0;
	if (!V0)
	{
		V0 = 0x1;
		ZZ_CLOCKCYCLES(4,0x800286A8);
		goto ZZ_281B0_4F8;
	}
	V0 = 0x1;
	ZZ_CLOCKCYCLES(4,0x800286A0);
ZZ_281B0_4F0:
	T0 = 0x1;
	V0 = 0x1;
	ZZ_CLOCKCYCLES(2,0x800286A8);
ZZ_281B0_4F8:
	if (T0 == V0)
	{
		V0 = (int32_t)T0 < 2;
		ZZ_CLOCKCYCLES(2,0x800286F8);
		goto ZZ_281B0_548;
	}
	V0 = (int32_t)T0 < 2;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(4,0x800286C8);
		goto ZZ_281B0_518;
	}
	if (!T0)
	{
		V0 = T1;
		ZZ_CLOCKCYCLES(6,0x800286DC);
		goto ZZ_281B0_52C;
	}
	V0 = T1;
	ZZ_CLOCKCYCLES(8,0x80028990);
	goto ZZ_281B0_7E0;
ZZ_281B0_518:
	V0 = 0x2;
	if (T0 == V0)
	{
		ZZ_CLOCKCYCLES(3,0x80028714);
		goto ZZ_281B0_564;
	}
	V0 = T1;
	ZZ_CLOCKCYCLES(5,0x80028990);
	goto ZZ_281B0_7E0;
ZZ_281B0_52C:
	V0 = EMU_ReadU32(S7);
	V0 = -V0;
	EMU_Write32(S7,V0);
	V0 = EMU_ReadU32(SP + 24); //+ 0x18
	EMU_Write32(S3,V0);
	ZZ_CLOCKCYCLES(7,0x80028730);
	goto ZZ_281B0_580;
ZZ_281B0_548:
	V0 = EMU_ReadU32(S7 + 4); //+ 0x4
	V0 = -V0;
	EMU_Write32(S7 + 4,V0); //+ 0x4
	V0 = EMU_ReadU32(SP + 28); //+ 0x1C
	EMU_Write32(S3 + 4,V0); //+ 0x4
	ZZ_CLOCKCYCLES(7,0x80028730);
	goto ZZ_281B0_580;
ZZ_281B0_564:
	V0 = EMU_ReadU32(S7 + 8); //+ 0x8
	V0 = -V0;
	EMU_Write32(S7 + 8,V0); //+ 0x8
	V0 = EMU_ReadU32(SP + 32); //+ 0x20
	ZZ_CLOCKCYCLES(5,0x80028728);
ZZ_281B0_578:
	EMU_Write32(S3 + 8,V0); //+ 0x8
	ZZ_CLOCKCYCLES(2,0x80028730);
ZZ_281B0_580:
	V0 = T1;
	ZZ_CLOCKCYCLES(2,0x80028990);
	goto ZZ_281B0_7E0;
ZZ_281B0_588:
	V0 = EMU_ReadS16(S6 + 30); //+ 0x1E
	V0 = (int32_t)FP < (int32_t)V0;
	if (!V0)
	{
		EMU_Write32(SP + 24,V0); //+ 0x18
		ZZ_CLOCKCYCLES(5,0x80028764);
		goto ZZ_281B0_5B4;
	}
	EMU_Write32(SP + 24,V0); //+ 0x18
	V0 = EMU_ReadU32(S1 + 12); //+ 0xC
	V1 = V0 >> 31;
	V0 += V1;
	V0 = (int32_t)V0 >> 1;
	ZZ_CLOCKCYCLES(11,0x80028768);
	goto ZZ_281B0_5B8;
ZZ_281B0_5B4:
	V0 = EMU_ReadU32(S1 + 12); //+ 0xC
	ZZ_CLOCKCYCLES(1,0x80028768);
ZZ_281B0_5B8:
	EMU_Write32(SP + 52,V0); //+ 0x34
	V0 = EMU_ReadS16(S6 + 32); //+ 0x20
	V0 = (int32_t)FP < (int32_t)V0;
	if (!V0)
	{
		EMU_Write32(SP + 28,V0); //+ 0x1C
		ZZ_CLOCKCYCLES(7,0x8002879C);
		goto ZZ_281B0_5EC;
	}
	EMU_Write32(SP + 28,V0); //+ 0x1C
	V0 = EMU_ReadU32(S1 + 16); //+ 0x10
	V1 = V0 >> 31;
	V0 += V1;
	V0 = (int32_t)V0 >> 1;
	ZZ_CLOCKCYCLES(13,0x800287A0);
	goto ZZ_281B0_5F0;
ZZ_281B0_5EC:
	V0 = EMU_ReadU32(S1 + 16); //+ 0x10
	ZZ_CLOCKCYCLES(1,0x800287A0);
ZZ_281B0_5F0:
	EMU_Write32(SP + 56,V0); //+ 0x38
	V0 = EMU_ReadS16(S6 + 34); //+ 0x22
	V0 = (int32_t)FP < (int32_t)V0;
	if (!V0)
	{
		EMU_Write32(SP + 32,V0); //+ 0x20
		ZZ_CLOCKCYCLES(7,0x800287D4);
		goto ZZ_281B0_624;
	}
	EMU_Write32(SP + 32,V0); //+ 0x20
	V0 = EMU_ReadU32(S1 + 20); //+ 0x14
	V1 = V0 >> 31;
	V0 += V1;
	V0 = (int32_t)V0 >> 1;
	ZZ_CLOCKCYCLES(13,0x800287D8);
	goto ZZ_281B0_628;
ZZ_281B0_624:
	V0 = EMU_ReadU32(S1 + 20); //+ 0x14
	ZZ_CLOCKCYCLES(1,0x800287D8);
ZZ_281B0_628:
	EMU_Write32(SP + 60,V0); //+ 0x3C
	V0 = EMU_ReadU32(SP + 24); //+ 0x18
	S4 = R0;
	S5 = R0;
	if (V0)
	{
		V1 = R0;
		ZZ_CLOCKCYCLES(7,0x800287FC);
		goto ZZ_281B0_64C;
	}
	V1 = R0;
	ZZ_CLOCKCYCLES(7,0x800287F4);
ZZ_281B0_644:
	if ((int32_t)V1 > 0)
	{
		ZZ_CLOCKCYCLES(2,0x80028990);
		goto ZZ_281B0_7E0;
	}
	ZZ_CLOCKCYCLES(2,0x800287FC);
ZZ_281B0_64C:
	V0 = EMU_ReadU32(SP + 28); //+ 0x1C
	S2 = R0;
	if (V0)
	{
		V1 = R0;
		ZZ_CLOCKCYCLES(4,0x80028814);
		goto ZZ_281B0_664;
	}
	V1 = R0;
	ZZ_CLOCKCYCLES(4,0x8002880C);
ZZ_281B0_65C:
	if ((int32_t)V1 > 0)
	{
		ZZ_CLOCKCYCLES(2,0x80028974);
		goto ZZ_281B0_7C4;
	}
	ZZ_CLOCKCYCLES(2,0x80028814);
ZZ_281B0_664:
	V0 = EMU_ReadU32(SP + 32); //+ 0x20
	S0 = R0;
	if (V0)
	{
		V1 = R0;
		ZZ_CLOCKCYCLES(4,0x8002882C);
		goto ZZ_281B0_67C;
	}
	V1 = R0;
	ZZ_CLOCKCYCLES(4,0x80028824);
ZZ_281B0_674:
	if ((int32_t)V1 > 0)
	{
		ZZ_CLOCKCYCLES(2,0x80028958);
		goto ZZ_281B0_7A8;
	}
	ZZ_CLOCKCYCLES(2,0x8002882C);
ZZ_281B0_67C:
	A1 = EMU_ReadU32(S1);
	if (!S5)
	{
		ZZ_CLOCKCYCLES(3,0x80028844);
		goto ZZ_281B0_694;
	}
	V0 = EMU_ReadU32(SP + 52); //+ 0x34
	A1 += V0;
	ZZ_CLOCKCYCLES(6,0x80028844);
ZZ_281B0_694:
	EMU_Write32(SP + 40,A1); //+ 0x28
	A0 = EMU_ReadU32(S1 + 4); //+ 0x4
	if (!S2)
	{
		ZZ_CLOCKCYCLES(4,0x80028860);
		goto ZZ_281B0_6B0;
	}
	V0 = EMU_ReadU32(SP + 56); //+ 0x38
	A0 += V0;
	ZZ_CLOCKCYCLES(7,0x80028860);
ZZ_281B0_6B0:
	EMU_Write32(SP + 44,A0); //+ 0x2C
	V1 = EMU_ReadU32(S1 + 8); //+ 0x8
	if (!S0)
	{
		ZZ_CLOCKCYCLES(4,0x8002887C);
		goto ZZ_281B0_6CC;
	}
	V0 = EMU_ReadU32(SP + 60); //+ 0x3C
	V1 += V0;
	ZZ_CLOCKCYCLES(7,0x8002887C);
ZZ_281B0_6CC:
	EMU_Write32(SP + 48,V1); //+ 0x30
	A2 = EMU_ReadU32(S3);
	V0 = (int32_t)A1 < (int32_t)A2;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(6,0x80028938);
		goto ZZ_281B0_788;
	}
	A3 = EMU_ReadU32(S3 + 4); //+ 0x4
	V0 = (int32_t)A0 < (int32_t)A3;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(11,0x80028938);
		goto ZZ_281B0_788;
	}
	T0 = EMU_ReadU32(S3 + 8); //+ 0x8
	V0 = (int32_t)V1 < (int32_t)T0;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(16,0x80028938);
		goto ZZ_281B0_788;
	}
	V0 = EMU_ReadU32(SP + 52); //+ 0x34
	V0 += A1;
	V0 = (int32_t)V0 < (int32_t)A2;
	if (V0)
	{
		ZZ_CLOCKCYCLES(22,0x80028938);
		goto ZZ_281B0_788;
	}
	V0 = EMU_ReadU32(SP + 56); //+ 0x38
	V0 += A0;
	V0 = (int32_t)V0 < (int32_t)A3;
	if (V0)
	{
		ZZ_CLOCKCYCLES(28,0x80028938);
		goto ZZ_281B0_788;
	}
	V0 = EMU_ReadU32(SP + 60); //+ 0x3C
	V0 += V1;
	V0 = (int32_t)V0 < (int32_t)T0;
	if (V0)
	{
		V0 = S4 << 1;
		ZZ_CLOCKCYCLES(34,0x80028938);
		goto ZZ_281B0_788;
	}
	V0 = S4 << 1;
	V0 += T1;
	A1 = EMU_ReadU16(V0);
	V0 = FP + 1;
	A0 = S6;
	A2 = SP + 40;
	A3 = S3;
	EMU_Write32(SP + 16,S7); //+ 0x10
	EMU_Write32(SP + 20,V0); //+ 0x14
	RA = 0x8002892C; //ZZ_281B0_77C
	EMU_Write32(SP + 64,T1); //+ 0x40
	ZZ_CLOCKCYCLES(44,0x800281B0);
	goto ZZ_281B0;
ZZ_281B0_77C:
	T1 = EMU_ReadU32(SP + 64); //+ 0x40
	if (V0)
	{
		ZZ_CLOCKCYCLES(3,0x80028990);
		goto ZZ_281B0_7E0;
	}
	ZZ_CLOCKCYCLES(3,0x80028938);
ZZ_281B0_788:
	V0 = EMU_ReadU32(SP + 32); //+ 0x20
	S0 += 1;
	S4 += 1;
	if (!V0)
	{
		V1 = S0;
		ZZ_CLOCKCYCLES(5,0x80028824);
		goto ZZ_281B0_674;
	}
	V1 = S0;
	V0 = (int32_t)V1 < 2;
	if (V0)
	{
		ZZ_CLOCKCYCLES(8,0x8002882C);
		goto ZZ_281B0_67C;
	}
	ZZ_CLOCKCYCLES(8,0x80028958);
ZZ_281B0_7A8:
	V0 = EMU_ReadU32(SP + 28); //+ 0x1C
	V1 = S2 + 1;
	if (!V0)
	{
		S2 = V1;
		ZZ_CLOCKCYCLES(4,0x8002880C);
		goto ZZ_281B0_65C;
	}
	S2 = V1;
	V0 = (int32_t)V1 < 2;
	if (V0)
	{
		ZZ_CLOCKCYCLES(7,0x80028814);
		goto ZZ_281B0_664;
	}
	ZZ_CLOCKCYCLES(7,0x80028974);
ZZ_281B0_7C4:
	V0 = EMU_ReadU32(SP + 24); //+ 0x18
	V1 = S5 + 1;
	if (!V0)
	{
		S5 = V1;
		ZZ_CLOCKCYCLES(4,0x800287F4);
		goto ZZ_281B0_644;
	}
	S5 = V1;
	V0 = (int32_t)V1 < 2;
	if (V0)
	{
		ZZ_CLOCKCYCLES(7,0x800287FC);
		goto ZZ_281B0_64C;
	}
	ZZ_CLOCKCYCLES(7,0x80028990);
ZZ_281B0_7E0:
	RA = EMU_ReadU32(SP + 108); //+ 0x6C
	FP = EMU_ReadU32(SP + 104); //+ 0x68
	S7 = EMU_ReadU32(SP + 100); //+ 0x64
	S6 = EMU_ReadU32(SP + 96); //+ 0x60
	S5 = EMU_ReadU32(SP + 92); //+ 0x5C
	S4 = EMU_ReadU32(SP + 88); //+ 0x58
	S3 = EMU_ReadU32(SP + 84); //+ 0x54
	S2 = EMU_ReadU32(SP + 80); //+ 0x50
	S1 = EMU_ReadU32(SP + 76); //+ 0x4C
	S0 = EMU_ReadU32(SP + 72); //+ 0x48
	SP += 112;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(13);
	ZZ_JUMPREGISTER(0x80028B44,ZZ_289C4_180);
	ZZ_JUMPREGISTER(0x8002892C,ZZ_281B0_77C);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x800281B0,ZZ_281B0);
ZZ_MARK(0x800281B4);
ZZ_MARK(0x800281B8);
ZZ_MARK(0x800281BC);
ZZ_MARK(0x800281C0);
ZZ_MARK(0x800281C4);
ZZ_MARK(0x800281C8);
ZZ_MARK(0x800281CC);
ZZ_MARK(0x800281D0);
ZZ_MARK(0x800281D4);
ZZ_MARK(0x800281D8);
ZZ_MARK(0x800281DC);
ZZ_MARK(0x800281E0);
ZZ_MARK(0x800281E4);
ZZ_MARK(0x800281E8);
ZZ_MARK(0x800281EC);
ZZ_MARK(0x800281F0);
ZZ_MARK(0x800281F4);
ZZ_MARK(0x800281F8);
ZZ_MARK(0x800281FC);
ZZ_MARK(0x80028200);
ZZ_MARK(0x80028204);
ZZ_MARK_TARGET(0x80028208,ZZ_281B0_58);
ZZ_MARK_TARGET(0x8002820C,ZZ_281B0_5C);
ZZ_MARK(0x80028210);
ZZ_MARK(0x80028214);
ZZ_MARK(0x80028218);
ZZ_MARK(0x8002821C);
ZZ_MARK(0x80028220);
ZZ_MARK_TARGET(0x80028224,ZZ_281B0_74);
ZZ_MARK(0x80028228);
ZZ_MARK(0x8002822C);
ZZ_MARK(0x80028230);
ZZ_MARK(0x80028234);
ZZ_MARK(0x80028238);
ZZ_MARK(0x8002823C);
ZZ_MARK(0x80028240);
ZZ_MARK(0x80028244);
ZZ_MARK(0x80028248);
ZZ_MARK_TARGET(0x8002824C,ZZ_281B0_9C);
ZZ_MARK_TARGET(0x80028250,ZZ_281B0_A0);
ZZ_MARK(0x80028254);
ZZ_MARK(0x80028258);
ZZ_MARK(0x8002825C);
ZZ_MARK(0x80028260);
ZZ_MARK(0x80028264);
ZZ_MARK(0x80028268);
ZZ_MARK(0x8002826C);
ZZ_MARK(0x80028270);
ZZ_MARK(0x80028274);
ZZ_MARK_TARGET(0x80028278,ZZ_281B0_C8);
ZZ_MARK_TARGET(0x8002827C,ZZ_281B0_CC);
ZZ_MARK(0x80028280);
ZZ_MARK(0x80028284);
ZZ_MARK(0x80028288);
ZZ_MARK(0x8002828C);
ZZ_MARK(0x80028290);
ZZ_MARK(0x80028294);
ZZ_MARK(0x80028298);
ZZ_MARK(0x8002829C);
ZZ_MARK(0x800282A0);
ZZ_MARK_TARGET(0x800282A4,ZZ_281B0_F4);
ZZ_MARK_TARGET(0x800282A8,ZZ_281B0_F8);
ZZ_MARK(0x800282AC);
ZZ_MARK(0x800282B0);
ZZ_MARK(0x800282B4);
ZZ_MARK(0x800282B8);
ZZ_MARK(0x800282BC);
ZZ_MARK(0x800282C0);
ZZ_MARK(0x800282C4);
ZZ_MARK(0x800282C8);
ZZ_MARK(0x800282CC);
ZZ_MARK(0x800282D0);
ZZ_MARK(0x800282D4);
ZZ_MARK(0x800282D8);
ZZ_MARK(0x800282DC);
ZZ_MARK(0x800282E0);
ZZ_MARK_TARGET(0x800282E4,ZZ_281B0_134);
ZZ_MARK(0x800282E8);
ZZ_MARK(0x800282EC);
ZZ_MARK(0x800282F0);
ZZ_MARK(0x800282F4);
ZZ_MARK(0x800282F8);
ZZ_MARK_TARGET(0x800282FC,ZZ_281B0_14C);
ZZ_MARK(0x80028300);
ZZ_MARK(0x80028304);
ZZ_MARK(0x80028308);
ZZ_MARK(0x8002830C);
ZZ_MARK(0x80028310);
ZZ_MARK_TARGET(0x80028314,ZZ_281B0_164);
ZZ_MARK(0x80028318);
ZZ_MARK(0x8002831C);
ZZ_MARK(0x80028320);
ZZ_MARK(0x80028324);
ZZ_MARK(0x80028328);
ZZ_MARK(0x8002832C);
ZZ_MARK(0x80028330);
ZZ_MARK(0x80028334);
ZZ_MARK(0x80028338);
ZZ_MARK(0x8002833C);
ZZ_MARK(0x80028340);
ZZ_MARK(0x80028344);
ZZ_MARK_TARGET(0x80028348,ZZ_281B0_198);
ZZ_MARK(0x8002834C);
ZZ_MARK(0x80028350);
ZZ_MARK(0x80028354);
ZZ_MARK(0x80028358);
ZZ_MARK(0x8002835C);
ZZ_MARK_TARGET(0x80028360,ZZ_281B0_1B0);
ZZ_MARK(0x80028364);
ZZ_MARK(0x80028368);
ZZ_MARK(0x8002836C);
ZZ_MARK(0x80028370);
ZZ_MARK(0x80028374);
ZZ_MARK_TARGET(0x80028378,ZZ_281B0_1C8);
ZZ_MARK(0x8002837C);
ZZ_MARK(0x80028380);
ZZ_MARK(0x80028384);
ZZ_MARK(0x80028388);
ZZ_MARK(0x8002838C);
ZZ_MARK(0x80028390);
ZZ_MARK(0x80028394);
ZZ_MARK(0x80028398);
ZZ_MARK(0x8002839C);
ZZ_MARK(0x800283A0);
ZZ_MARK(0x800283A4);
ZZ_MARK(0x800283A8);
ZZ_MARK_TARGET(0x800283AC,ZZ_281B0_1FC);
ZZ_MARK(0x800283B0);
ZZ_MARK(0x800283B4);
ZZ_MARK(0x800283B8);
ZZ_MARK(0x800283BC);
ZZ_MARK(0x800283C0);
ZZ_MARK_TARGET(0x800283C4,ZZ_281B0_214);
ZZ_MARK(0x800283C8);
ZZ_MARK(0x800283CC);
ZZ_MARK(0x800283D0);
ZZ_MARK(0x800283D4);
ZZ_MARK(0x800283D8);
ZZ_MARK_TARGET(0x800283DC,ZZ_281B0_22C);
ZZ_MARK(0x800283E0);
ZZ_MARK(0x800283E4);
ZZ_MARK(0x800283E8);
ZZ_MARK(0x800283EC);
ZZ_MARK(0x800283F0);
ZZ_MARK(0x800283F4);
ZZ_MARK(0x800283F8);
ZZ_MARK(0x800283FC);
ZZ_MARK(0x80028400);
ZZ_MARK(0x80028404);
ZZ_MARK(0x80028408);
ZZ_MARK(0x8002840C);
ZZ_MARK(0x80028410);
ZZ_MARK(0x80028414);
ZZ_MARK(0x80028418);
ZZ_MARK(0x8002841C);
ZZ_MARK(0x80028420);
ZZ_MARK(0x80028424);
ZZ_MARK(0x80028428);
ZZ_MARK(0x8002842C);
ZZ_MARK(0x80028430);
ZZ_MARK(0x80028434);
ZZ_MARK(0x80028438);
ZZ_MARK_TARGET(0x8002843C,ZZ_281B0_28C);
ZZ_MARK(0x80028440);
ZZ_MARK(0x80028444);
ZZ_MARK(0x80028448);
ZZ_MARK(0x8002844C);
ZZ_MARK(0x80028450);
ZZ_MARK(0x80028454);
ZZ_MARK(0x80028458);
ZZ_MARK_TARGET(0x8002845C,ZZ_281B0_2AC);
ZZ_MARK_TARGET(0x80028460,ZZ_281B0_2B0);
ZZ_MARK(0x80028464);
ZZ_MARK(0x80028468);
ZZ_MARK(0x8002846C);
ZZ_MARK(0x80028470);
ZZ_MARK(0x80028474);
ZZ_MARK(0x80028478);
ZZ_MARK(0x8002847C);
ZZ_MARK(0x80028480);
ZZ_MARK(0x80028484);
ZZ_MARK_TARGET(0x80028488,ZZ_281B0_2D8);
ZZ_MARK_TARGET(0x8002848C,ZZ_281B0_2DC);
ZZ_MARK(0x80028490);
ZZ_MARK(0x80028494);
ZZ_MARK(0x80028498);
ZZ_MARK(0x8002849C);
ZZ_MARK(0x800284A0);
ZZ_MARK(0x800284A4);
ZZ_MARK(0x800284A8);
ZZ_MARK(0x800284AC);
ZZ_MARK(0x800284B0);
ZZ_MARK_TARGET(0x800284B4,ZZ_281B0_304);
ZZ_MARK_TARGET(0x800284B8,ZZ_281B0_308);
ZZ_MARK(0x800284BC);
ZZ_MARK(0x800284C0);
ZZ_MARK(0x800284C4);
ZZ_MARK(0x800284C8);
ZZ_MARK(0x800284CC);
ZZ_MARK(0x800284D0);
ZZ_MARK(0x800284D4);
ZZ_MARK(0x800284D8);
ZZ_MARK(0x800284DC);
ZZ_MARK(0x800284E0);
ZZ_MARK(0x800284E4);
ZZ_MARK(0x800284E8);
ZZ_MARK(0x800284EC);
ZZ_MARK(0x800284F0);
ZZ_MARK_TARGET(0x800284F4,ZZ_281B0_344);
ZZ_MARK(0x800284F8);
ZZ_MARK(0x800284FC);
ZZ_MARK(0x80028500);
ZZ_MARK(0x80028504);
ZZ_MARK(0x80028508);
ZZ_MARK_TARGET(0x8002850C,ZZ_281B0_35C);
ZZ_MARK(0x80028510);
ZZ_MARK(0x80028514);
ZZ_MARK(0x80028518);
ZZ_MARK(0x8002851C);
ZZ_MARK(0x80028520);
ZZ_MARK(0x80028524);
ZZ_MARK_TARGET(0x80028528,ZZ_281B0_378);
ZZ_MARK(0x8002852C);
ZZ_MARK(0x80028530);
ZZ_MARK(0x80028534);
ZZ_MARK(0x80028538);
ZZ_MARK(0x8002853C);
ZZ_MARK(0x80028540);
ZZ_MARK(0x80028544);
ZZ_MARK(0x80028548);
ZZ_MARK(0x8002854C);
ZZ_MARK(0x80028550);
ZZ_MARK(0x80028554);
ZZ_MARK(0x80028558);
ZZ_MARK_TARGET(0x8002855C,ZZ_281B0_3AC);
ZZ_MARK(0x80028560);
ZZ_MARK(0x80028564);
ZZ_MARK(0x80028568);
ZZ_MARK(0x8002856C);
ZZ_MARK(0x80028570);
ZZ_MARK_TARGET(0x80028574,ZZ_281B0_3C4);
ZZ_MARK(0x80028578);
ZZ_MARK(0x8002857C);
ZZ_MARK(0x80028580);
ZZ_MARK(0x80028584);
ZZ_MARK(0x80028588);
ZZ_MARK(0x8002858C);
ZZ_MARK(0x80028590);
ZZ_MARK(0x80028594);
ZZ_MARK_TARGET(0x80028598,ZZ_281B0_3E8);
ZZ_MARK(0x8002859C);
ZZ_MARK(0x800285A0);
ZZ_MARK(0x800285A4);
ZZ_MARK(0x800285A8);
ZZ_MARK(0x800285AC);
ZZ_MARK(0x800285B0);
ZZ_MARK_TARGET(0x800285B4,ZZ_281B0_404);
ZZ_MARK(0x800285B8);
ZZ_MARK(0x800285BC);
ZZ_MARK(0x800285C0);
ZZ_MARK_TARGET(0x800285C4,ZZ_281B0_414);
ZZ_MARK_TARGET(0x800285C8,ZZ_281B0_418);
ZZ_MARK_TARGET(0x800285CC,ZZ_281B0_41C);
ZZ_MARK(0x800285D0);
ZZ_MARK(0x800285D4);
ZZ_MARK(0x800285D8);
ZZ_MARK(0x800285DC);
ZZ_MARK(0x800285E0);
ZZ_MARK(0x800285E4);
ZZ_MARK(0x800285E8);
ZZ_MARK(0x800285EC);
ZZ_MARK(0x800285F0);
ZZ_MARK(0x800285F4);
ZZ_MARK(0x800285F8);
ZZ_MARK(0x800285FC);
ZZ_MARK_TARGET(0x80028600,ZZ_281B0_450);
ZZ_MARK(0x80028604);
ZZ_MARK(0x80028608);
ZZ_MARK(0x8002860C);
ZZ_MARK(0x80028610);
ZZ_MARK(0x80028614);
ZZ_MARK_TARGET(0x80028618,ZZ_281B0_468);
ZZ_MARK(0x8002861C);
ZZ_MARK(0x80028620);
ZZ_MARK(0x80028624);
ZZ_MARK(0x80028628);
ZZ_MARK(0x8002862C);
ZZ_MARK(0x80028630);
ZZ_MARK(0x80028634);
ZZ_MARK(0x80028638);
ZZ_MARK(0x8002863C);
ZZ_MARK(0x80028640);
ZZ_MARK_TARGET(0x80028644,ZZ_281B0_494);
ZZ_MARK(0x80028648);
ZZ_MARK(0x8002864C);
ZZ_MARK_TARGET(0x80028650,ZZ_281B0_4A0);
ZZ_MARK(0x80028654);
ZZ_MARK(0x80028658);
ZZ_MARK_TARGET(0x8002865C,ZZ_281B0_4AC);
ZZ_MARK(0x80028660);
ZZ_MARK(0x80028664);
ZZ_MARK(0x80028668);
ZZ_MARK(0x8002866C);
ZZ_MARK(0x80028670);
ZZ_MARK(0x80028674);
ZZ_MARK_TARGET(0x80028678,ZZ_281B0_4C8);
ZZ_MARK(0x8002867C);
ZZ_MARK(0x80028680);
ZZ_MARK(0x80028684);
ZZ_MARK(0x80028688);
ZZ_MARK(0x8002868C);
ZZ_MARK_TARGET(0x80028690,ZZ_281B0_4E0);
ZZ_MARK(0x80028694);
ZZ_MARK(0x80028698);
ZZ_MARK(0x8002869C);
ZZ_MARK_TARGET(0x800286A0,ZZ_281B0_4F0);
ZZ_MARK(0x800286A4);
ZZ_MARK_TARGET(0x800286A8,ZZ_281B0_4F8);
ZZ_MARK(0x800286AC);
ZZ_MARK(0x800286B0);
ZZ_MARK(0x800286B4);
ZZ_MARK(0x800286B8);
ZZ_MARK(0x800286BC);
ZZ_MARK(0x800286C0);
ZZ_MARK(0x800286C4);
ZZ_MARK_TARGET(0x800286C8,ZZ_281B0_518);
ZZ_MARK(0x800286CC);
ZZ_MARK(0x800286D0);
ZZ_MARK(0x800286D4);
ZZ_MARK(0x800286D8);
ZZ_MARK_TARGET(0x800286DC,ZZ_281B0_52C);
ZZ_MARK(0x800286E0);
ZZ_MARK(0x800286E4);
ZZ_MARK(0x800286E8);
ZZ_MARK(0x800286EC);
ZZ_MARK(0x800286F0);
ZZ_MARK(0x800286F4);
ZZ_MARK_TARGET(0x800286F8,ZZ_281B0_548);
ZZ_MARK(0x800286FC);
ZZ_MARK(0x80028700);
ZZ_MARK(0x80028704);
ZZ_MARK(0x80028708);
ZZ_MARK(0x8002870C);
ZZ_MARK(0x80028710);
ZZ_MARK_TARGET(0x80028714,ZZ_281B0_564);
ZZ_MARK(0x80028718);
ZZ_MARK(0x8002871C);
ZZ_MARK(0x80028720);
ZZ_MARK(0x80028724);
ZZ_MARK_TARGET(0x80028728,ZZ_281B0_578);
ZZ_MARK(0x8002872C);
ZZ_MARK_TARGET(0x80028730,ZZ_281B0_580);
ZZ_MARK(0x80028734);
ZZ_MARK_TARGET(0x80028738,ZZ_281B0_588);
ZZ_MARK(0x8002873C);
ZZ_MARK(0x80028740);
ZZ_MARK(0x80028744);
ZZ_MARK(0x80028748);
ZZ_MARK(0x8002874C);
ZZ_MARK(0x80028750);
ZZ_MARK(0x80028754);
ZZ_MARK(0x80028758);
ZZ_MARK(0x8002875C);
ZZ_MARK(0x80028760);
ZZ_MARK_TARGET(0x80028764,ZZ_281B0_5B4);
ZZ_MARK_TARGET(0x80028768,ZZ_281B0_5B8);
ZZ_MARK(0x8002876C);
ZZ_MARK(0x80028770);
ZZ_MARK(0x80028774);
ZZ_MARK(0x80028778);
ZZ_MARK(0x8002877C);
ZZ_MARK(0x80028780);
ZZ_MARK(0x80028784);
ZZ_MARK(0x80028788);
ZZ_MARK(0x8002878C);
ZZ_MARK(0x80028790);
ZZ_MARK(0x80028794);
ZZ_MARK(0x80028798);
ZZ_MARK_TARGET(0x8002879C,ZZ_281B0_5EC);
ZZ_MARK_TARGET(0x800287A0,ZZ_281B0_5F0);
ZZ_MARK(0x800287A4);
ZZ_MARK(0x800287A8);
ZZ_MARK(0x800287AC);
ZZ_MARK(0x800287B0);
ZZ_MARK(0x800287B4);
ZZ_MARK(0x800287B8);
ZZ_MARK(0x800287BC);
ZZ_MARK(0x800287C0);
ZZ_MARK(0x800287C4);
ZZ_MARK(0x800287C8);
ZZ_MARK(0x800287CC);
ZZ_MARK(0x800287D0);
ZZ_MARK_TARGET(0x800287D4,ZZ_281B0_624);
ZZ_MARK_TARGET(0x800287D8,ZZ_281B0_628);
ZZ_MARK(0x800287DC);
ZZ_MARK(0x800287E0);
ZZ_MARK(0x800287E4);
ZZ_MARK(0x800287E8);
ZZ_MARK(0x800287EC);
ZZ_MARK(0x800287F0);
ZZ_MARK_TARGET(0x800287F4,ZZ_281B0_644);
ZZ_MARK(0x800287F8);
ZZ_MARK_TARGET(0x800287FC,ZZ_281B0_64C);
ZZ_MARK(0x80028800);
ZZ_MARK(0x80028804);
ZZ_MARK(0x80028808);
ZZ_MARK_TARGET(0x8002880C,ZZ_281B0_65C);
ZZ_MARK(0x80028810);
ZZ_MARK_TARGET(0x80028814,ZZ_281B0_664);
ZZ_MARK(0x80028818);
ZZ_MARK(0x8002881C);
ZZ_MARK(0x80028820);
ZZ_MARK_TARGET(0x80028824,ZZ_281B0_674);
ZZ_MARK(0x80028828);
ZZ_MARK_TARGET(0x8002882C,ZZ_281B0_67C);
ZZ_MARK(0x80028830);
ZZ_MARK(0x80028834);
ZZ_MARK(0x80028838);
ZZ_MARK(0x8002883C);
ZZ_MARK(0x80028840);
ZZ_MARK_TARGET(0x80028844,ZZ_281B0_694);
ZZ_MARK(0x80028848);
ZZ_MARK(0x8002884C);
ZZ_MARK(0x80028850);
ZZ_MARK(0x80028854);
ZZ_MARK(0x80028858);
ZZ_MARK(0x8002885C);
ZZ_MARK_TARGET(0x80028860,ZZ_281B0_6B0);
ZZ_MARK(0x80028864);
ZZ_MARK(0x80028868);
ZZ_MARK(0x8002886C);
ZZ_MARK(0x80028870);
ZZ_MARK(0x80028874);
ZZ_MARK(0x80028878);
ZZ_MARK_TARGET(0x8002887C,ZZ_281B0_6CC);
ZZ_MARK(0x80028880);
ZZ_MARK(0x80028884);
ZZ_MARK(0x80028888);
ZZ_MARK(0x8002888C);
ZZ_MARK(0x80028890);
ZZ_MARK(0x80028894);
ZZ_MARK(0x80028898);
ZZ_MARK(0x8002889C);
ZZ_MARK(0x800288A0);
ZZ_MARK(0x800288A4);
ZZ_MARK(0x800288A8);
ZZ_MARK(0x800288AC);
ZZ_MARK(0x800288B0);
ZZ_MARK(0x800288B4);
ZZ_MARK(0x800288B8);
ZZ_MARK(0x800288BC);
ZZ_MARK(0x800288C0);
ZZ_MARK(0x800288C4);
ZZ_MARK(0x800288C8);
ZZ_MARK(0x800288CC);
ZZ_MARK(0x800288D0);
ZZ_MARK(0x800288D4);
ZZ_MARK(0x800288D8);
ZZ_MARK(0x800288DC);
ZZ_MARK(0x800288E0);
ZZ_MARK(0x800288E4);
ZZ_MARK(0x800288E8);
ZZ_MARK(0x800288EC);
ZZ_MARK(0x800288F0);
ZZ_MARK(0x800288F4);
ZZ_MARK(0x800288F8);
ZZ_MARK(0x800288FC);
ZZ_MARK(0x80028900);
ZZ_MARK(0x80028904);
ZZ_MARK(0x80028908);
ZZ_MARK(0x8002890C);
ZZ_MARK(0x80028910);
ZZ_MARK(0x80028914);
ZZ_MARK(0x80028918);
ZZ_MARK(0x8002891C);
ZZ_MARK(0x80028920);
ZZ_MARK(0x80028924);
ZZ_MARK(0x80028928);
ZZ_MARK_TARGET(0x8002892C,ZZ_281B0_77C);
ZZ_MARK(0x80028930);
ZZ_MARK(0x80028934);
ZZ_MARK_TARGET(0x80028938,ZZ_281B0_788);
ZZ_MARK(0x8002893C);
ZZ_MARK(0x80028940);
ZZ_MARK(0x80028944);
ZZ_MARK(0x80028948);
ZZ_MARK(0x8002894C);
ZZ_MARK(0x80028950);
ZZ_MARK(0x80028954);
ZZ_MARK_TARGET(0x80028958,ZZ_281B0_7A8);
ZZ_MARK(0x8002895C);
ZZ_MARK(0x80028960);
ZZ_MARK(0x80028964);
ZZ_MARK(0x80028968);
ZZ_MARK(0x8002896C);
ZZ_MARK(0x80028970);
ZZ_MARK_TARGET(0x80028974,ZZ_281B0_7C4);
ZZ_MARK(0x80028978);
ZZ_MARK(0x8002897C);
ZZ_MARK(0x80028980);
ZZ_MARK(0x80028984);
ZZ_MARK(0x80028988);
ZZ_MARK(0x8002898C);
ZZ_MARK_TARGET(0x80028990,ZZ_281B0_7E0);
ZZ_MARK(0x80028994);
ZZ_MARK(0x80028998);
ZZ_MARK(0x8002899C);
ZZ_MARK(0x800289A0);
ZZ_MARK(0x800289A4);
ZZ_MARK(0x800289A8);
ZZ_MARK(0x800289AC);
ZZ_MARK(0x800289B0);
ZZ_MARK(0x800289B4);
ZZ_MARK(0x800289B8);
ZZ_MARK(0x800289BC);
ZZ_MARK(0x800289C0);
