#ifdef ZZ_INCLUDE_CODE
ZZ_4C668:
	SP -= 32;
	EMU_Write32(SP + 16,S0); //+ 0x10
	S0 = A0;
	EMU_Write32(SP + 24,S2); //+ 0x18
	S2 = A1;
	EMU_Write32(SP + 20,S1); //+ 0x14
	S1 = A2;
	A0 = 0x80010000;
	A0 += 4004;
	EMU_Write32(SP + 28,RA); //+ 0x1C
	RA = 0x8004C698; //ZZ_4C668_30
	A1 = S0;
	ZZ_CLOCKCYCLES(12,0x8004C348);
	goto ZZ_4C348;
ZZ_4C668_30:
	V0 = EMU_ReadS16(S0 + 4); //+ 0x4
	if (!V0)
	{
		V0 = -1;
		ZZ_CLOCKCYCLES(4,0x8004C710);
		goto ZZ_4C668_A8;
	}
	V0 = -1;
	V0 = EMU_ReadS16(S0 + 6); //+ 0x6
	if (V0)
	{
		V0 = S1 << 16;
		ZZ_CLOCKCYCLES(8,0x8004C6C0);
		goto ZZ_4C668_58;
	}
	V0 = S1 << 16;
	V0 = -1;
	ZZ_CLOCKCYCLES(10,0x8004C710);
	goto ZZ_4C668_A8;
ZZ_4C668_58:
	V1 = S2 & 0xFFFF;
	V0 |= V1;
	A1 = 0x80060000;
	A1 -= 8092;
	A0 = EMU_ReadU32(S0);
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 8276); //+ 0xFFFFDFAC
	A2 = 20;
	AT = 0x80060000;
	EMU_Write32(AT - 8088,V0); //+ 0xFFFFE068
	EMU_Write32(A1,A0);
	V0 = EMU_ReadU32(S0 + 4); //+ 0x4
	A3 = R0;
	AT = 0x80060000;
	EMU_Write32(AT - 8084,V0); //+ 0xFFFFE06C
	A0 = EMU_ReadU32(V1 + 24); //+ 0x18
	V0 = EMU_ReadU32(V1 + 8); //+ 0x8
	ZZ_JUMPREGISTER_BEGIN(V0);
	RA = 0x8004C710; //ZZ_4C668_A8
	A1 -= 8;
	ZZ_CLOCKCYCLES_JR(20);
	// UNIMPLEMENTED JUMP-TO-REGISTER-AND-LINK (V0,8004C708)
	ZZ_JUMPREGISTER_END();
ZZ_4C668_A8:
	RA = EMU_ReadU32(SP + 28); //+ 0x1C
	S2 = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 32;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(7);
	ZZ_JUMPREGISTER(0x80027328,ZZ_272E0_48);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8004C668,0x8004C698,ZZ_4C668);
ZZ_MARK_TARGET(0x8004C698,0x8004C6C0,ZZ_4C668_30);
ZZ_MARK_TARGET(0x8004C6C0,0x8004C710,ZZ_4C668_58);
ZZ_MARK_TARGET(0x8004C710,0x8004C72C,ZZ_4C668_A8);
