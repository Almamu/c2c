#ifdef ZZ_INCLUDE_CODE
ZZ_55730:
	SP -= 72;
	A3 = A0;
	V0 = A3 << 16;
	V1 = 0x80070000;
	V1 -= 15268;
	V0 = (int32_t)V0 >> 14;
	EMU_Write32(SP + 52,S3); //+ 0x34
	S3 = V0 + V1;
	V1 = A1 << 16;
	V1 = (int32_t)V1 >> 16;
	V0 = V1 << 1;
	V0 += V1;
	V0 <<= 2;
	V0 = V0 - V1;
	EMU_Write32(SP + 48,S2); //+ 0x30
	S2 = V0 << 4;
	EMU_Write32(SP + 64,RA); //+ 0x40
	EMU_Write32(SP + 60,S5); //+ 0x3C
	EMU_Write32(SP + 56,S4); //+ 0x38
	EMU_Write32(SP + 44,S1); //+ 0x2C
	EMU_Write32(SP + 40,S0); //+ 0x28
	V1 = EMU_ReadU32(S3);
	S5 = A3;
	S0 = V1 + S2;
	V0 = EMU_ReadU32(S0 + 160); //+ 0xA0
	S4 = A1;
	V0 -= 1;
	if ((int32_t)V0 >= 0)
	{
		EMU_Write32(S0 + 160,V0); //+ 0xA0
		ZZ_CLOCKCYCLES(29,0x800557B0);
		goto ZZ_55730_80;
	}
	EMU_Write32(S0 + 160,V0); //+ 0xA0
	V0 = EMU_ReadU32(S3);
	V0 += S2;
	ZZ_CLOCKCYCLES(32,0x80055A88);
	goto ZZ_55730_358;
ZZ_55730_80:
	A2 = EMU_ReadS16(S0 + 76); //+ 0x4C
	if ((int32_t)A2 <= 0)
	{
		V1 = A2;
		ZZ_CLOCKCYCLES(4,0x800558A0);
		goto ZZ_55730_170;
	}
	V1 = A2;
	EMU_SDivide(V0,A2);
	if (A2)
	{
		ZZ_CLOCKCYCLES(7,0x800557D0);
		goto ZZ_55730_A0;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(8,0x800557D0);
ZZ_55730_A0:
	AT = -1;
	if (A2 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x800557E8);
		goto ZZ_55730_B8;
	}
	AT = 0x80000000;
	if (V0 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x800557E8);
		goto ZZ_55730_B8;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x800557E8);
ZZ_55730_B8:
	V0 = HI;
	if (V0)
	{
		A0 = S4 << 8;
		ZZ_CLOCKCYCLES(4,0x80055A9C);
		goto ZZ_55730_36C;
	}
	A0 = S4 << 8;
	V0 = EMU_ReadU16(S0 + 74); //+ 0x4A
	V0 -= 1;
	EMU_Write16(S0 + 74,V0); //+ 0x4A
	V0 <<= 16;
	if ((int32_t)V0 < 0)
	{
		V0 = A1 << 8;
		ZZ_CLOCKCYCLES(11,0x800559F8);
		goto ZZ_55730_2C8;
	}
	V0 = A1 << 8;
	V0 |= A3;
	V0 <<= 16;
	S1 = (int32_t)V0 >> 16;
	A0 = S1;
	A1 = SP + 16;
	RA = 0x80055830; //ZZ_55730_100
	A2 = SP + 18;
	ZZ_CLOCKCYCLES(18,0x80059DDC);
	goto ZZ_59DDC;
ZZ_55730_100:
	A1 = EMU_ReadU16(SP + 16); //+ 0x10
	A2 = EMU_ReadS16(S0 + 74); //+ 0x4A
	A0 = A1 & 0xFFFF;
	V0 = A0 - 1;
	V1 = A0 - A2;
	V0 = (int32_t)V0 < (int32_t)V1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(8,0x8005586C);
		goto ZZ_55730_13C;
	}
	V0 = EMU_ReadU16(SP + 18); //+ 0x12
	V1 = V0 - 1;
	V0 = V0 - A2;
	V1 = (int32_t)V1 < (int32_t)V0;
	if (V1)
	{
		ZZ_CLOCKCYCLES(15,0x80055A34);
		goto ZZ_55730_304;
	}
	ZZ_CLOCKCYCLES(15,0x8005586C);
ZZ_55730_13C:
	if (!A0)
	{
		ZZ_CLOCKCYCLES(2,0x80055884);
		goto ZZ_55730_154;
	}
	A2 = EMU_ReadU16(SP + 18); //+ 0x12
	if (A2)
	{
		A0 = S1;
		ZZ_CLOCKCYCLES(6,0x80055890);
		goto ZZ_55730_160;
	}
	A0 = S1;
	ZZ_CLOCKCYCLES(6,0x80055884);
ZZ_55730_154:
	V0 = EMU_ReadU32(S3);
	V0 += S2;
	ZZ_CLOCKCYCLES(3,0x800559B8);
	goto ZZ_55730_288;
ZZ_55730_160:
	A1 -= 1;
	A1 &= 0xFFFF;
	A2 -= 1;
	ZZ_CLOCKCYCLES(4,0x800559E4);
	goto ZZ_55730_2B4;
ZZ_55730_170:
	if ((int32_t)A2 >= 0)
	{
		A0 = S4 << 8;
		ZZ_CLOCKCYCLES(2,0x80055A9C);
		goto ZZ_55730_36C;
	}
	A0 = S4 << 8;
	V0 = EMU_ReadU16(S0 + 74); //+ 0x4A
	V0 += V1;
	EMU_Write16(S0 + 74,V0); //+ 0x4A
	V0 <<= 16;
	if ((int32_t)V0 < 0)
	{
		V0 = A1 << 8;
		ZZ_CLOCKCYCLES(9,0x800559F8);
		goto ZZ_55730_2C8;
	}
	V0 = A1 << 8;
	V0 |= A3;
	V0 <<= 16;
	S1 = (int32_t)V0 >> 16;
	A0 = S1;
	A1 = SP + 16;
	RA = 0x800558E0; //ZZ_55730_1B0
	A2 = SP + 18;
	ZZ_CLOCKCYCLES(16,0x80059DDC);
	goto ZZ_59DDC;
ZZ_55730_1B0:
	V0 = EMU_ReadU16(SP + 16); //+ 0x10
	V1 = EMU_ReadS16(S0 + 76); //+ 0x4C
	V0 += V1;
	if ((int32_t)V0 > 0)
	{
		ZZ_CLOCKCYCLES(6,0x80055938);
		goto ZZ_55730_208;
	}
	V0 = EMU_ReadU16(SP + 18); //+ 0x12
	V0 += V1;
	if ((int32_t)V0 > 0)
	{
		A0 = S1;
		ZZ_CLOCKCYCLES(11,0x80055938);
		goto ZZ_55730_208;
	}
	A0 = S1;
	A1 = R0;
	A2 = R0;
	RA = 0x8005591C; //ZZ_55730_1EC
	A3 = 1;
	ZZ_CLOCKCYCLES(15,0x800598A0);
	goto ZZ_598A0;
ZZ_55730_1EC:
	V0 = EMU_ReadU32(S3);
	V0 += S2;
	V1 = EMU_ReadU32(V0 + 152); //+ 0x98
	A0 = -33;
	V1 &= A0;
	EMU_Write32(V0 + 152,V1); //+ 0x98
	ZZ_CLOCKCYCLES(7,0x80055938);
ZZ_55730_208:
	V1 = EMU_ReadU32(S0 + 156); //+ 0x9C
	V0 = EMU_ReadU32(S0 + 160); //+ 0xA0
	A0 = EMU_ReadS16(S0 + 76); //+ 0x4C
	V1 = V1 - V0;
	V0 = -A0;
	EMU_SMultiply(V1,V0);
	V0 = EMU_ReadS16(S0 + 72); //+ 0x48
	T0 = LO;
	V0 = (int32_t)T0 < (int32_t)V0;
	if (!V0)
	{
		V1 = A0;
		ZZ_CLOCKCYCLES(11,0x80055A34);
		goto ZZ_55730_304;
	}
	V1 = A0;
	A1 = EMU_ReadU16(SP + 16); //+ 0x10
	if (!A1)
	{
		ZZ_CLOCKCYCLES(15,0x80055984);
		goto ZZ_55730_254;
	}
	A2 = EMU_ReadU16(SP + 18); //+ 0x12
	if (A2)
	{
		A0 = S4 << 8;
		ZZ_CLOCKCYCLES(19,0x800559CC);
		goto ZZ_55730_29C;
	}
	A0 = S4 << 8;
	ZZ_CLOCKCYCLES(19,0x80055984);
ZZ_55730_254:
	A0 = S5 << 16;
	A0 = (int32_t)A0 >> 14;
	V1 = S4 << 16;
	V1 = (int32_t)V1 >> 16;
	V0 = V1 << 1;
	V0 += V1;
	V0 <<= 2;
	V0 = V0 - V1;
	AT = 0x80070000;
	AT += A0;
	V1 = EMU_ReadU32(AT - 15268); //+ 0xFFFFC45C
	V0 <<= 4;
	V0 += V1;
	ZZ_CLOCKCYCLES(13,0x800559B8);
ZZ_55730_288:
	V1 = EMU_ReadU32(V0 + 152); //+ 0x98
	A0 = -33;
	V1 &= A0;
	EMU_Write32(V0 + 152,V1); //+ 0x98
	ZZ_CLOCKCYCLES(5,0x80055A34);
	goto ZZ_55730_304;
ZZ_55730_29C:
	A0 |= S5;
	A0 <<= 16;
	A0 = (int32_t)A0 >> 16;
	A1 += V1;
	A1 &= 0xFFFF;
	A2 += V1;
	ZZ_CLOCKCYCLES(6,0x800559E4);
ZZ_55730_2B4:
	A2 &= 0xFFFF;
	RA = 0x800559F0; //ZZ_55730_2C0
	A3 = 1;
	ZZ_CLOCKCYCLES(3,0x800598A0);
	goto ZZ_598A0;
ZZ_55730_2C0:
	ZZ_CLOCKCYCLES(2,0x80055A34);
	goto ZZ_55730_304;
ZZ_55730_2C8:
	A0 = A1 << 8;
	A0 |= A3;
	A0 <<= 16;
	A0 = (int32_t)A0 >> 16;
	A1 = R0;
	A2 = R0;
	RA = 0x80055A18; //ZZ_55730_2E8
	A3 = 1;
	ZZ_CLOCKCYCLES(8,0x800598A0);
	goto ZZ_598A0;
ZZ_55730_2E8:
	V1 = EMU_ReadU32(S3);
	V1 += S2;
	V0 = EMU_ReadU32(V1 + 152); //+ 0x98
	A0 = -33;
	V0 &= A0;
	EMU_Write32(V1 + 152,V0); //+ 0x98
	ZZ_CLOCKCYCLES(7,0x80055A34);
ZZ_55730_304:
	V0 = EMU_ReadU32(S0 + 160); //+ 0xA0
	if (!V0)
	{
		A0 = S5 << 16;
		ZZ_CLOCKCYCLES(4,0x80055A58);
		goto ZZ_55730_328;
	}
	A0 = S5 << 16;
	V0 = EMU_ReadS16(S0 + 74); //+ 0x4A
	if ((int32_t)V0 > 0)
	{
		A0 = S4 << 8;
		ZZ_CLOCKCYCLES(8,0x80055A9C);
		goto ZZ_55730_36C;
	}
	A0 = S4 << 8;
	A0 = S5 << 16;
	ZZ_CLOCKCYCLES(9,0x80055A58);
ZZ_55730_328:
	A0 = (int32_t)A0 >> 14;
	V1 = S4 << 16;
	V1 = (int32_t)V1 >> 16;
	V0 = V1 << 1;
	V0 += V1;
	V0 <<= 2;
	V0 = V0 - V1;
	AT = 0x80070000;
	AT += A0;
	V1 = EMU_ReadU32(AT - 15268); //+ 0xFFFFC45C
	V0 <<= 4;
	V0 += V1;
	ZZ_CLOCKCYCLES(12,0x80055A88);
ZZ_55730_358:
	V1 = EMU_ReadU32(V0 + 152); //+ 0x98
	A0 = -33;
	V1 &= A0;
	EMU_Write32(V0 + 152,V1); //+ 0x98
	A0 = S4 << 8;
	ZZ_CLOCKCYCLES(5,0x80055A9C);
ZZ_55730_36C:
	A0 |= S5;
	A0 <<= 16;
	A0 = (int32_t)A0 >> 16;
	A1 = S0 + 92;
	RA = 0x80055AB4; //ZZ_55730_384
	A2 = S0 + 94;
	ZZ_CLOCKCYCLES(6,0x80059DDC);
	goto ZZ_59DDC;
ZZ_55730_384:
	RA = EMU_ReadU32(SP + 64); //+ 0x40
	S5 = EMU_ReadU32(SP + 60); //+ 0x3C
	S4 = EMU_ReadU32(SP + 56); //+ 0x38
	S3 = EMU_ReadU32(SP + 52); //+ 0x34
	S2 = EMU_ReadU32(SP + 48); //+ 0x30
	S1 = EMU_ReadU32(SP + 44); //+ 0x2C
	S0 = EMU_ReadU32(SP + 40); //+ 0x28
	SP += 72;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(10);
	ZZ_JUMPREGISTER(0x800552C4,ZZ_5519C_128);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80055730,ZZ_55730);
ZZ_MARK(0x80055734);
ZZ_MARK(0x80055738);
ZZ_MARK(0x8005573C);
ZZ_MARK(0x80055740);
ZZ_MARK(0x80055744);
ZZ_MARK(0x80055748);
ZZ_MARK(0x8005574C);
ZZ_MARK(0x80055750);
ZZ_MARK(0x80055754);
ZZ_MARK(0x80055758);
ZZ_MARK(0x8005575C);
ZZ_MARK(0x80055760);
ZZ_MARK(0x80055764);
ZZ_MARK(0x80055768);
ZZ_MARK(0x8005576C);
ZZ_MARK(0x80055770);
ZZ_MARK(0x80055774);
ZZ_MARK(0x80055778);
ZZ_MARK(0x8005577C);
ZZ_MARK(0x80055780);
ZZ_MARK(0x80055784);
ZZ_MARK(0x80055788);
ZZ_MARK(0x8005578C);
ZZ_MARK(0x80055790);
ZZ_MARK(0x80055794);
ZZ_MARK(0x80055798);
ZZ_MARK(0x8005579C);
ZZ_MARK(0x800557A0);
ZZ_MARK(0x800557A4);
ZZ_MARK(0x800557A8);
ZZ_MARK(0x800557AC);
ZZ_MARK_TARGET(0x800557B0,ZZ_55730_80);
ZZ_MARK(0x800557B4);
ZZ_MARK(0x800557B8);
ZZ_MARK(0x800557BC);
ZZ_MARK(0x800557C0);
ZZ_MARK(0x800557C4);
ZZ_MARK(0x800557C8);
ZZ_MARK(0x800557CC);
ZZ_MARK_TARGET(0x800557D0,ZZ_55730_A0);
ZZ_MARK(0x800557D4);
ZZ_MARK(0x800557D8);
ZZ_MARK(0x800557DC);
ZZ_MARK(0x800557E0);
ZZ_MARK(0x800557E4);
ZZ_MARK_TARGET(0x800557E8,ZZ_55730_B8);
ZZ_MARK(0x800557EC);
ZZ_MARK(0x800557F0);
ZZ_MARK(0x800557F4);
ZZ_MARK(0x800557F8);
ZZ_MARK(0x800557FC);
ZZ_MARK(0x80055800);
ZZ_MARK(0x80055804);
ZZ_MARK(0x80055808);
ZZ_MARK(0x8005580C);
ZZ_MARK(0x80055810);
ZZ_MARK(0x80055814);
ZZ_MARK(0x80055818);
ZZ_MARK(0x8005581C);
ZZ_MARK(0x80055820);
ZZ_MARK(0x80055824);
ZZ_MARK(0x80055828);
ZZ_MARK(0x8005582C);
ZZ_MARK_TARGET(0x80055830,ZZ_55730_100);
ZZ_MARK(0x80055834);
ZZ_MARK(0x80055838);
ZZ_MARK(0x8005583C);
ZZ_MARK(0x80055840);
ZZ_MARK(0x80055844);
ZZ_MARK(0x80055848);
ZZ_MARK(0x8005584C);
ZZ_MARK(0x80055850);
ZZ_MARK(0x80055854);
ZZ_MARK(0x80055858);
ZZ_MARK(0x8005585C);
ZZ_MARK(0x80055860);
ZZ_MARK(0x80055864);
ZZ_MARK(0x80055868);
ZZ_MARK_TARGET(0x8005586C,ZZ_55730_13C);
ZZ_MARK(0x80055870);
ZZ_MARK(0x80055874);
ZZ_MARK(0x80055878);
ZZ_MARK(0x8005587C);
ZZ_MARK(0x80055880);
ZZ_MARK_TARGET(0x80055884,ZZ_55730_154);
ZZ_MARK(0x80055888);
ZZ_MARK(0x8005588C);
ZZ_MARK_TARGET(0x80055890,ZZ_55730_160);
ZZ_MARK(0x80055894);
ZZ_MARK(0x80055898);
ZZ_MARK(0x8005589C);
ZZ_MARK_TARGET(0x800558A0,ZZ_55730_170);
ZZ_MARK(0x800558A4);
ZZ_MARK(0x800558A8);
ZZ_MARK(0x800558AC);
ZZ_MARK(0x800558B0);
ZZ_MARK(0x800558B4);
ZZ_MARK(0x800558B8);
ZZ_MARK(0x800558BC);
ZZ_MARK(0x800558C0);
ZZ_MARK(0x800558C4);
ZZ_MARK(0x800558C8);
ZZ_MARK(0x800558CC);
ZZ_MARK(0x800558D0);
ZZ_MARK(0x800558D4);
ZZ_MARK(0x800558D8);
ZZ_MARK(0x800558DC);
ZZ_MARK_TARGET(0x800558E0,ZZ_55730_1B0);
ZZ_MARK(0x800558E4);
ZZ_MARK(0x800558E8);
ZZ_MARK(0x800558EC);
ZZ_MARK(0x800558F0);
ZZ_MARK(0x800558F4);
ZZ_MARK(0x800558F8);
ZZ_MARK(0x800558FC);
ZZ_MARK(0x80055900);
ZZ_MARK(0x80055904);
ZZ_MARK(0x80055908);
ZZ_MARK(0x8005590C);
ZZ_MARK(0x80055910);
ZZ_MARK(0x80055914);
ZZ_MARK(0x80055918);
ZZ_MARK_TARGET(0x8005591C,ZZ_55730_1EC);
ZZ_MARK(0x80055920);
ZZ_MARK(0x80055924);
ZZ_MARK(0x80055928);
ZZ_MARK(0x8005592C);
ZZ_MARK(0x80055930);
ZZ_MARK(0x80055934);
ZZ_MARK_TARGET(0x80055938,ZZ_55730_208);
ZZ_MARK(0x8005593C);
ZZ_MARK(0x80055940);
ZZ_MARK(0x80055944);
ZZ_MARK(0x80055948);
ZZ_MARK(0x8005594C);
ZZ_MARK(0x80055950);
ZZ_MARK(0x80055954);
ZZ_MARK(0x80055958);
ZZ_MARK(0x8005595C);
ZZ_MARK(0x80055960);
ZZ_MARK(0x80055964);
ZZ_MARK(0x80055968);
ZZ_MARK(0x8005596C);
ZZ_MARK(0x80055970);
ZZ_MARK(0x80055974);
ZZ_MARK(0x80055978);
ZZ_MARK(0x8005597C);
ZZ_MARK(0x80055980);
ZZ_MARK_TARGET(0x80055984,ZZ_55730_254);
ZZ_MARK(0x80055988);
ZZ_MARK(0x8005598C);
ZZ_MARK(0x80055990);
ZZ_MARK(0x80055994);
ZZ_MARK(0x80055998);
ZZ_MARK(0x8005599C);
ZZ_MARK(0x800559A0);
ZZ_MARK(0x800559A4);
ZZ_MARK(0x800559A8);
ZZ_MARK(0x800559AC);
ZZ_MARK(0x800559B0);
ZZ_MARK(0x800559B4);
ZZ_MARK_TARGET(0x800559B8,ZZ_55730_288);
ZZ_MARK(0x800559BC);
ZZ_MARK(0x800559C0);
ZZ_MARK(0x800559C4);
ZZ_MARK(0x800559C8);
ZZ_MARK_TARGET(0x800559CC,ZZ_55730_29C);
ZZ_MARK(0x800559D0);
ZZ_MARK(0x800559D4);
ZZ_MARK(0x800559D8);
ZZ_MARK(0x800559DC);
ZZ_MARK(0x800559E0);
ZZ_MARK_TARGET(0x800559E4,ZZ_55730_2B4);
ZZ_MARK(0x800559E8);
ZZ_MARK(0x800559EC);
ZZ_MARK_TARGET(0x800559F0,ZZ_55730_2C0);
ZZ_MARK(0x800559F4);
ZZ_MARK_TARGET(0x800559F8,ZZ_55730_2C8);
ZZ_MARK(0x800559FC);
ZZ_MARK(0x80055A00);
ZZ_MARK(0x80055A04);
ZZ_MARK(0x80055A08);
ZZ_MARK(0x80055A0C);
ZZ_MARK(0x80055A10);
ZZ_MARK(0x80055A14);
ZZ_MARK_TARGET(0x80055A18,ZZ_55730_2E8);
ZZ_MARK(0x80055A1C);
ZZ_MARK(0x80055A20);
ZZ_MARK(0x80055A24);
ZZ_MARK(0x80055A28);
ZZ_MARK(0x80055A2C);
ZZ_MARK(0x80055A30);
ZZ_MARK_TARGET(0x80055A34,ZZ_55730_304);
ZZ_MARK(0x80055A38);
ZZ_MARK(0x80055A3C);
ZZ_MARK(0x80055A40);
ZZ_MARK(0x80055A44);
ZZ_MARK(0x80055A48);
ZZ_MARK(0x80055A4C);
ZZ_MARK(0x80055A50);
ZZ_MARK(0x80055A54);
ZZ_MARK_TARGET(0x80055A58,ZZ_55730_328);
ZZ_MARK(0x80055A5C);
ZZ_MARK(0x80055A60);
ZZ_MARK(0x80055A64);
ZZ_MARK(0x80055A68);
ZZ_MARK(0x80055A6C);
ZZ_MARK(0x80055A70);
ZZ_MARK(0x80055A74);
ZZ_MARK(0x80055A78);
ZZ_MARK(0x80055A7C);
ZZ_MARK(0x80055A80);
ZZ_MARK(0x80055A84);
ZZ_MARK_TARGET(0x80055A88,ZZ_55730_358);
ZZ_MARK(0x80055A8C);
ZZ_MARK(0x80055A90);
ZZ_MARK(0x80055A94);
ZZ_MARK(0x80055A98);
ZZ_MARK_TARGET(0x80055A9C,ZZ_55730_36C);
ZZ_MARK(0x80055AA0);
ZZ_MARK(0x80055AA4);
ZZ_MARK(0x80055AA8);
ZZ_MARK(0x80055AAC);
ZZ_MARK(0x80055AB0);
ZZ_MARK_TARGET(0x80055AB4,ZZ_55730_384);
ZZ_MARK(0x80055AB8);
ZZ_MARK(0x80055ABC);
ZZ_MARK(0x80055AC0);
ZZ_MARK(0x80055AC4);
ZZ_MARK(0x80055AC8);
ZZ_MARK(0x80055ACC);
ZZ_MARK(0x80055AD0);
ZZ_MARK(0x80055AD4);
ZZ_MARK(0x80055AD8);
