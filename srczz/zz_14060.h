#ifdef ZZ_INCLUDE_CODE
ZZ_14060:
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 32164); //+ 0xFFFF825C
	SP -= 24;
	V1 = (int32_t)A0 >> 1;
	V1 <<= 2;
	EMU_Write32(SP + 16,RA); //+ 0x10
	V1 += V0;
	V1 = EMU_ReadU32(V1);
	V0 = -18;
	if (V1 == V0)
	{
		V0 = -255;
		ZZ_CLOCKCYCLES(11,0x800140C4);
		goto ZZ_14060_64;
	}
	V0 = -255;
	if (V1 == V0)
	{
		V0 = A2 & 0x4;
		ZZ_CLOCKCYCLES(13,0x800140BC);
		goto ZZ_14060_5C;
	}
	V0 = A2 & 0x4;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(15,0x800140AC);
		goto ZZ_14060_4C;
	}
	V0 = EMU_ReadU8(V1 + 14); //+ 0xE
	V0 += A3;
	EMU_Write8(V1 + 14,V0); //+ 0xE
	ZZ_CLOCKCYCLES(19,0x800140AC);
ZZ_14060_4C:
	V0 = EMU_ReadU8(V1 + 15); //+ 0xF
	EMU_Write32(V1 + 24,A1); //+ 0x18
	V0 += A3;
	EMU_Write8(V1 + 15,V0); //+ 0xF
	ZZ_CLOCKCYCLES(4,0x800140BC);
ZZ_14060_5C:
	V0 = V1;
	ZZ_CLOCKCYCLES(2,0x800140CC);
	goto ZZ_14060_6C;
ZZ_14060_64:
	RA = 0x800140CC; //ZZ_14060_6C
	ZZ_CLOCKCYCLES(2,0x80013CDC);
	goto ZZ_13CDC;
ZZ_14060_6C:
	RA = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 24;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(4);
	ZZ_JUMPREGISTER(0x80014114,ZZ_140DC_38);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80014060,ZZ_14060);
ZZ_MARK(0x80014064);
ZZ_MARK(0x80014068);
ZZ_MARK(0x8001406C);
ZZ_MARK(0x80014070);
ZZ_MARK(0x80014074);
ZZ_MARK(0x80014078);
ZZ_MARK(0x8001407C);
ZZ_MARK(0x80014080);
ZZ_MARK(0x80014084);
ZZ_MARK(0x80014088);
ZZ_MARK(0x8001408C);
ZZ_MARK(0x80014090);
ZZ_MARK(0x80014094);
ZZ_MARK(0x80014098);
ZZ_MARK(0x8001409C);
ZZ_MARK(0x800140A0);
ZZ_MARK(0x800140A4);
ZZ_MARK(0x800140A8);
ZZ_MARK_TARGET(0x800140AC,ZZ_14060_4C);
ZZ_MARK(0x800140B0);
ZZ_MARK(0x800140B4);
ZZ_MARK(0x800140B8);
ZZ_MARK_TARGET(0x800140BC,ZZ_14060_5C);
ZZ_MARK(0x800140C0);
ZZ_MARK_TARGET(0x800140C4,ZZ_14060_64);
ZZ_MARK(0x800140C8);
ZZ_MARK_TARGET(0x800140CC,ZZ_14060_6C);
ZZ_MARK(0x800140D0);
ZZ_MARK(0x800140D4);
ZZ_MARK(0x800140D8);
