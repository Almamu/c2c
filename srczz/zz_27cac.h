#ifdef ZZ_INCLUDE_CODE
ZZ_27CAC:
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 2428); //+ 0xFFFFF684
	SP -= 32;
	EMU_Write32(SP + 24,S0); //+ 0x18
	S0 = 0x80070000;
	S0 -= 27188;
	V0 = 0x2;
	EMU_Write32(SP + 28,RA); //+ 0x1C
	EMU_Write32(S0,R0);
	AT = 0x80070000;
	EMU_Write32(AT - 27180,R0); //+ 0xFFFF95D4
	EMU_Write32(S0 + 4,R0); //+ 0x4
	AT = 0x80070000;
	EMU_Write32(AT - 27152,R0); //+ 0xFFFF95F0
	if (V1 == V0)
	{
		V0 = 0x3C;
		ZZ_CLOCKCYCLES(16,0x80027CF4);
		goto ZZ_27CAC_48;
	}
	V0 = 0x3C;
	if (V1 != V0)
	{
		V0 = -255;
		ZZ_CLOCKCYCLES(18,0x80027DFC);
		goto ZZ_27CAC_150;
	}
	V0 = -255;
	ZZ_CLOCKCYCLES(18,0x80027CF4);
ZZ_27CAC_48:
	A0 = 0x1A4;
	V0 = 0x5;
	RA = 0x80027D04; //ZZ_27CAC_58
	EMU_Write32(S0,V0);
	ZZ_CLOCKCYCLES(4,0x8001148C);
	goto ZZ_1148C;
ZZ_27CAC_58:
	V1 = V0;
	if (!V1)
	{
		EMU_Write32(S0 + 4,V1); //+ 0x4
		ZZ_CLOCKCYCLES(3,0x80027DF8);
		goto ZZ_27CAC_14C;
	}
	EMU_Write32(S0 + 4,V1); //+ 0x4
	V0 = EMU_ReadU32(S0);
	if ((int32_t)V0 <= 0)
	{
		A0 = R0;
		ZZ_CLOCKCYCLES(7,0x80027D44);
		goto ZZ_27CAC_98;
	}
	A0 = R0;
	A1 = S0;
	V1 += 12;
	ZZ_CLOCKCYCLES(9,0x80027D28);
ZZ_27CAC_7C:
	EMU_Write32(V1 - 4,R0); //+ 0xFFFFFFFC
	EMU_Write32(V1,R0);
	V0 = EMU_ReadU32(A1);
	A0 += 1;
	V0 = (int32_t)A0 < (int32_t)V0;
	if (V0)
	{
		V1 += 84;
		ZZ_CLOCKCYCLES(7,0x80027D28);
		goto ZZ_27CAC_7C;
	}
	V1 += 84;
	ZZ_CLOCKCYCLES(7,0x80027D44);
ZZ_27CAC_98:
	V1 = 0x80070000;
	V1 = EMU_ReadU32(V1 - 27188); //+ 0xFFFF95CC
	V0 = V1 << 1;
	V0 += V1;
	V0 <<= 2;
	V0 = V0 - V1;
	V0 <<= 9;
	S0 = V0 + 16912;
	RA = 0x80027D70; //ZZ_27CAC_C4
	A0 = S0;
	ZZ_CLOCKCYCLES(11,0x8001148C);
	goto ZZ_1148C;
ZZ_27CAC_C4:
	A0 = V0;
	AT = 0x80070000;
	EMU_Write32(AT - 27180,A0); //+ 0xFFFF95D4
	if (!A0)
	{
		V1 = A0 & 0xF;
		ZZ_CLOCKCYCLES(5,0x80027DF8);
		goto ZZ_27CAC_14C;
	}
	V1 = A0 & 0xF;
	if (!V1)
	{
		ZZ_CLOCKCYCLES(7,0x80027D94);
		goto ZZ_27CAC_E8;
	}
	V0 = 0x10;
	V1 = V0 - V1;
	ZZ_CLOCKCYCLES(9,0x80027D94);
ZZ_27CAC_E8:
	V0 = A0 + V1;
	A0 = S0 - V1;
	V1 = V0 + 4096;
	AT = 0x80070000;
	EMU_Write32(AT - 27168,V1); //+ 0xFFFF95E0
	V1 = V0 + 8192;
	AT = 0x80070000;
	EMU_Write32(AT - 27164,V1); //+ 0xFFFF95E4
	V1 = V0 + 8704;
	AT = 0x80070000;
	EMU_Write32(AT - 27172,V0); //+ 0xFFFF95DC
	AT = 0x80070000;
	EMU_Write32(AT - 27160,V0); //+ 0xFFFF95E8
	V0 += 16896;
	AT = 0x80070000;
	EMU_Write32(AT - 27176,A0); //+ 0xFFFF95D8
	A0 -= 16896;
	AT = 0x80070000;
	EMU_Write32(AT - 27156,V1); //+ 0xFFFF95EC
	AT = 0x80070000;
	EMU_Write32(AT - 27172,V0); //+ 0xFFFF95DC
	AT = 0x80070000;
	EMU_Write32(AT - 27176,A0); //+ 0xFFFF95D8
	V0 = -255;
	ZZ_CLOCKCYCLES(25,0x80027DFC);
	goto ZZ_27CAC_150;
ZZ_27CAC_14C:
	V0 = -15;
	ZZ_CLOCKCYCLES(1,0x80027DFC);
ZZ_27CAC_150:
	RA = EMU_ReadU32(SP + 28); //+ 0x1C
	S0 = EMU_ReadU32(SP + 24); //+ 0x18
	SP += 32;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(5);
	ZZ_JUMPREGISTER(0x80014FC8,ZZ_14D6C_25C);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80027CAC,0x80027CF4,ZZ_27CAC);
ZZ_MARK_TARGET(0x80027CF4,0x80027D04,ZZ_27CAC_48);
ZZ_MARK_TARGET(0x80027D04,0x80027D28,ZZ_27CAC_58);
ZZ_MARK_TARGET(0x80027D28,0x80027D44,ZZ_27CAC_7C);
ZZ_MARK_TARGET(0x80027D44,0x80027D70,ZZ_27CAC_98);
ZZ_MARK_TARGET(0x80027D70,0x80027D94,ZZ_27CAC_C4);
ZZ_MARK_TARGET(0x80027D94,0x80027DF8,ZZ_27CAC_E8);
ZZ_MARK_TARGET(0x80027DF8,0x80027DFC,ZZ_27CAC_14C);
ZZ_MARK_TARGET(0x80027DFC,0x80027E10,ZZ_27CAC_150);
