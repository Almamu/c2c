#ifdef ZZ_INCLUDE_CODE
ZZ_27168:
	SP -= 64;
	EMU_Write32(SP + 40,S2); //+ 0x28
	S2 = A0;
	A0 = 0x8;
	A1 = 0x1;
	EMU_Write32(SP + 56,RA); //+ 0x38
	EMU_Write32(SP + 52,S5); //+ 0x34
	EMU_Write32(SP + 48,S4); //+ 0x30
	EMU_Write32(SP + 44,S3); //+ 0x2C
	EMU_Write32(SP + 36,S1); //+ 0x24
	RA = 0x80027198; //ZZ_27168_30
	EMU_Write32(SP + 32,S0); //+ 0x20
	ZZ_CLOCKCYCLES(12,0x80013B58);
	goto ZZ_13B58;
ZZ_27168_30:
	A0 = 0x9;
	RA = 0x800271A4; //ZZ_27168_3C
	A1 = 0x1;
	ZZ_CLOCKCYCLES(3,0x80013B58);
	goto ZZ_13B58;
ZZ_27168_3C:
	A0 = 0xC;
	RA = 0x800271B0; //ZZ_27168_48
	A1 = 0x1;
	ZZ_CLOCKCYCLES(3,0x80013B58);
	goto ZZ_13B58;
ZZ_27168_48:
	A0 = 0xD;
	RA = 0x800271BC; //ZZ_27168_54
	A1 = 0x1;
	ZZ_CLOCKCYCLES(3,0x80013B58);
	goto ZZ_13B58;
ZZ_27168_54:
	V1 = EMU_ReadU32(S2 + 24); //+ 0x18
	S3 = EMU_ReadU32(S2 + 28); //+ 0x1C
	EMU_SMultiply(V1,S3);
	V0 = 0x100;
	EMU_Write16(SP + 16,R0); //+ 0x10
	EMU_Write16(SP + 18,V0); //+ 0x12
	EMU_Write16(SP + 20,V1); //+ 0x14
	EMU_Write16(SP + 22,S3); //+ 0x16
	S4 = EMU_ReadU32(S2 + 4); //+ 0x4
	S0 = EMU_ReadU32(S2 + 56); //+ 0x38
	S5 = LO;
	if ((int32_t)S4 <= 0)
	{
		S1 = R0;
		ZZ_CLOCKCYCLES(14,0x800272B8);
		goto ZZ_27168_150;
	}
	S1 = R0;
	A0 = S2;
	ZZ_CLOCKCYCLES(15,0x800271F8);
ZZ_27168_90:
	RA = 0x80027200; //ZZ_27168_98
	A1 = S1;
	ZZ_CLOCKCYCLES(2,0x80027338);
	goto ZZ_27338;
ZZ_27168_98:
	A3 = EMU_ReadU32(S2 + 52); //+ 0x34
	A1 = EMU_ReadU32(S2 + 72); //+ 0x48
	A2 = (int32_t)S5 >> 2;
	if ((int32_t)A2 <= 0)
	{
		ZZ_CLOCKCYCLES(5,0x8002728C);
		goto ZZ_27168_124;
	}
	ZZ_CLOCKCYCLES(5,0x80027214);
ZZ_27168_AC:
	A0 = EMU_ReadU32(A3);
	V0 = A0 >> 7;
	V0 &= 0x1FE;
	V0 += S0;
	V1 = EMU_ReadU16(V0);
	V0 = A0 & 0xFF;
	V0 <<= 1;
	V0 += S0;
	V0 = EMU_ReadU16(V0);
	A3 += 4;
	V1 <<= 16;
	V1 |= V0;
	V0 = A0 >> 24;
	V0 <<= 1;
	V0 += S0;
	EMU_Write32(A1,V1);
	V0 = EMU_ReadU16(V0);
	A0 >>= 15;
	A0 &= 0x1FE;
	A0 += S0;
	V1 = EMU_ReadU16(A0);
	A2 -= 1;
	A1 += 4;
	V0 <<= 16;
	V0 |= V1;
	EMU_Write32(A1,V0);
	if ((int32_t)A2 > 0)
	{
		A1 += 4;
		ZZ_CLOCKCYCLES(29,0x80027214);
		goto ZZ_27168_AC;
	}
	A1 += 4;
	A1 = EMU_ReadU32(S2 + 72); //+ 0x48
	ZZ_CLOCKCYCLES(30,0x8002728C);
ZZ_27168_124:
	RA = 0x80027294; //ZZ_27168_12C
	A0 = SP + 16;
	ZZ_CLOCKCYCLES(2,0x8004C5A0);
	goto ZZ_4C5A0;
ZZ_27168_12C:
	RA = 0x8002729C; //ZZ_27168_134
	A0 = R0;
	ZZ_CLOCKCYCLES(2,0x8004C2DC);
	goto ZZ_4C2DC;
ZZ_27168_134:
	V0 = EMU_ReadU16(SP + 18); //+ 0x12
	S1 += 256;
	V0 += S3;
	EMU_Write16(SP + 18,V0); //+ 0x12
	V0 = (int32_t)S1 < (int32_t)S4;
	if (V0)
	{
		A0 = S2;
		ZZ_CLOCKCYCLES(7,0x800271F8);
		goto ZZ_27168_90;
	}
	A0 = S2;
	ZZ_CLOCKCYCLES(7,0x800272B8);
ZZ_27168_150:
	RA = EMU_ReadU32(SP + 56); //+ 0x38
	S5 = EMU_ReadU32(SP + 52); //+ 0x34
	S4 = EMU_ReadU32(SP + 48); //+ 0x30
	S3 = EMU_ReadU32(SP + 44); //+ 0x2C
	S2 = EMU_ReadU32(SP + 40); //+ 0x28
	S1 = EMU_ReadU32(SP + 36); //+ 0x24
	S0 = EMU_ReadU32(SP + 32); //+ 0x20
	SP += 64;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(10);
	ZZ_JUMPREGISTER(0x800279EC,ZZ_278D8_114);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80027168,0x80027198,ZZ_27168);
ZZ_MARK_TARGET(0x80027198,0x800271A4,ZZ_27168_30);
ZZ_MARK_TARGET(0x800271A4,0x800271B0,ZZ_27168_3C);
ZZ_MARK_TARGET(0x800271B0,0x800271BC,ZZ_27168_48);
ZZ_MARK_TARGET(0x800271BC,0x800271F8,ZZ_27168_54);
ZZ_MARK_TARGET(0x800271F8,0x80027200,ZZ_27168_90);
ZZ_MARK_TARGET(0x80027200,0x80027214,ZZ_27168_98);
ZZ_MARK_TARGET(0x80027214,0x8002728C,ZZ_27168_AC);
ZZ_MARK_TARGET(0x8002728C,0x80027294,ZZ_27168_124);
ZZ_MARK_TARGET(0x80027294,0x8002729C,ZZ_27168_12C);
ZZ_MARK_TARGET(0x8002729C,0x800272B8,ZZ_27168_134);
ZZ_MARK_TARGET(0x800272B8,0x800272E0,ZZ_27168_150);
