#ifdef ZZ_INCLUDE_CODE
ZZ_3CE88:
	if ((int32_t)V1 >= 0)
	{
		AT = A3 + 32;
		ZZ_CLOCKCYCLES(2,0x8003CEB4);
		goto ZZ_3CE88_2C;
	}
	AT = A3 + 32;
	V0 = 0x1F800000;
	V0 |= 0x180;
	AT <<= 3;
	T0 = AT + V0;
	V0 = V1 + 32;
	AT = 1;
	T1 = EMU_ReadU32(T0);
	V0 = AT << V0;
	ZZ_CLOCKCYCLES(11,0x8003CED4);
	goto ZZ_3CE88_4C;
ZZ_3CE88_2C:
	AT <<= 3;
	V0 = 0x1F800000;
	V0 |= 0x180;
	AT += 4;
	T0 = AT + V0;
	AT = 1;
	T1 = EMU_ReadU32(T0);
	V0 = AT << V1;
	ZZ_CLOCKCYCLES(8,0x8003CED4);
ZZ_3CE88_4C:
	AT = V0 & T1;
	if (AT)
	{
		AT = V0 | T1;
		ZZ_CLOCKCYCLES(3,0x8003CF9C);
		goto ZZ_3CE88_114;
	}
	AT = V0 | T1;
	EMU_Write32(T0,AT);
	if ((int32_t)A3 >= 0)
	{
		T1 = R0;
		ZZ_CLOCKCYCLES(6,0x8003CEF8);
		goto ZZ_3CE88_70;
	}
	T1 = R0;
	T1 = -A3;
	T2 = 32;
	ZZ_CLOCKCYCLES(9,0x8003CF00);
	goto ZZ_3CE88_78;
ZZ_3CE88_70:
	AT = 32;
	T2 = AT - A3;
	ZZ_CLOCKCYCLES(2,0x8003CF00);
ZZ_3CE88_78:
	if ((int32_t)A3 >= 0)
	{
		ZZ_CLOCKCYCLES(2,0x8003CF0C);
		goto ZZ_3CE88_84;
	}
	A3 = R0;
	ZZ_CLOCKCYCLES(3,0x8003CF0C);
ZZ_3CE88_84:
	V0 = 0x1F800000;
	V0 |= 0x100;
	AT = A3 << 2;
	if ((int32_t)V1 >= 0)
	{
		T0 = AT + V0;
		ZZ_CLOCKCYCLES(5,0x8003CF90);
		goto ZZ_3CE88_108;
	}
	T0 = AT + V0;
	AT = (int32_t)T1 < (int32_t)T2;
	if (!AT)
	{
		V1 = -V1;
		ZZ_CLOCKCYCLES(8,0x8003CF9C);
		goto ZZ_3CE88_114;
	}
	V1 = -V1;
	ZZ_CLOCKCYCLES(8,0x8003CF2C);
ZZ_3CE88_A4:
	AT = T1 << 2;
	V0 = 0x1F800000;
	V0 |= 0x380;
	T1 += 1;
	AT += V0;
	AT = EMU_ReadU32(AT);
	V0 = EMU_ReadU32(T0);
	AT <<= V1;
	AT |= V0;
	EMU_Write32(T0,AT);
	AT = (int32_t)T1 < (int32_t)T2;
	if (AT)
	{
		T0 += 4;
		ZZ_CLOCKCYCLES(13,0x8003CF2C);
		goto ZZ_3CE88_A4;
	}
	T0 += 4;
	ZZ_CLOCKCYCLES(15,0x8003CF9C);
	goto ZZ_3CE88_114;
ZZ_3CE88_E0:
	V0 = 0x1F800000;
	V0 |= 0x380;
	T1 += 1;
	AT += V0;
	AT = EMU_ReadU32(AT);
	V0 = EMU_ReadU32(T0);
	AT >>= V1;
	AT |= V0;
	EMU_Write32(T0,AT);
	T0 += 4;
	ZZ_CLOCKCYCLES(10,0x8003CF90);
ZZ_3CE88_108:
	AT = (int32_t)T1 < (int32_t)T2;
	if (AT)
	{
		AT = T1 << 2;
		ZZ_CLOCKCYCLES(3,0x8003CF68);
		goto ZZ_3CE88_E0;
	}
	AT = T1 << 2;
	ZZ_CLOCKCYCLES(3,0x8003CF9C);
ZZ_3CE88_114:
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(2);
	ZZ_JUMPREGISTER(0x8003CD50,ZZ_3CB24_22C);
	ZZ_JUMPREGISTER(0x8003CD90,ZZ_3CB24_26C);
	ZZ_JUMPREGISTER(0x8003CDD0,ZZ_3CB24_2AC);
	ZZ_JUMPREGISTER(0x8003CE10,ZZ_3CB24_2EC);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8003CE88,ZZ_3CE88);
ZZ_MARK(0x8003CE8C);
ZZ_MARK(0x8003CE90);
ZZ_MARK(0x8003CE94);
ZZ_MARK(0x8003CE98);
ZZ_MARK(0x8003CE9C);
ZZ_MARK(0x8003CEA0);
ZZ_MARK(0x8003CEA4);
ZZ_MARK(0x8003CEA8);
ZZ_MARK(0x8003CEAC);
ZZ_MARK(0x8003CEB0);
ZZ_MARK_TARGET(0x8003CEB4,ZZ_3CE88_2C);
ZZ_MARK(0x8003CEB8);
ZZ_MARK(0x8003CEBC);
ZZ_MARK(0x8003CEC0);
ZZ_MARK(0x8003CEC4);
ZZ_MARK(0x8003CEC8);
ZZ_MARK(0x8003CECC);
ZZ_MARK(0x8003CED0);
ZZ_MARK_TARGET(0x8003CED4,ZZ_3CE88_4C);
ZZ_MARK(0x8003CED8);
ZZ_MARK(0x8003CEDC);
ZZ_MARK(0x8003CEE0);
ZZ_MARK(0x8003CEE4);
ZZ_MARK(0x8003CEE8);
ZZ_MARK(0x8003CEEC);
ZZ_MARK(0x8003CEF0);
ZZ_MARK(0x8003CEF4);
ZZ_MARK_TARGET(0x8003CEF8,ZZ_3CE88_70);
ZZ_MARK(0x8003CEFC);
ZZ_MARK_TARGET(0x8003CF00,ZZ_3CE88_78);
ZZ_MARK(0x8003CF04);
ZZ_MARK(0x8003CF08);
ZZ_MARK_TARGET(0x8003CF0C,ZZ_3CE88_84);
ZZ_MARK(0x8003CF10);
ZZ_MARK(0x8003CF14);
ZZ_MARK(0x8003CF18);
ZZ_MARK(0x8003CF1C);
ZZ_MARK(0x8003CF20);
ZZ_MARK(0x8003CF24);
ZZ_MARK(0x8003CF28);
ZZ_MARK_TARGET(0x8003CF2C,ZZ_3CE88_A4);
ZZ_MARK(0x8003CF30);
ZZ_MARK(0x8003CF34);
ZZ_MARK(0x8003CF38);
ZZ_MARK(0x8003CF3C);
ZZ_MARK(0x8003CF40);
ZZ_MARK(0x8003CF44);
ZZ_MARK(0x8003CF48);
ZZ_MARK(0x8003CF4C);
ZZ_MARK(0x8003CF50);
ZZ_MARK(0x8003CF54);
ZZ_MARK(0x8003CF58);
ZZ_MARK(0x8003CF5C);
ZZ_MARK(0x8003CF60);
ZZ_MARK(0x8003CF64);
ZZ_MARK_TARGET(0x8003CF68,ZZ_3CE88_E0);
ZZ_MARK(0x8003CF6C);
ZZ_MARK(0x8003CF70);
ZZ_MARK(0x8003CF74);
ZZ_MARK(0x8003CF78);
ZZ_MARK(0x8003CF7C);
ZZ_MARK(0x8003CF80);
ZZ_MARK(0x8003CF84);
ZZ_MARK(0x8003CF88);
ZZ_MARK(0x8003CF8C);
ZZ_MARK_TARGET(0x8003CF90,ZZ_3CE88_108);
ZZ_MARK(0x8003CF94);
ZZ_MARK(0x8003CF98);
ZZ_MARK_TARGET(0x8003CF9C,ZZ_3CE88_114);
ZZ_MARK(0x8003CFA0);
