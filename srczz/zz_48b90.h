#ifdef ZZ_INCLUDE_CODE
ZZ_48B90:
	SP -= 40;
	EMU_Write32(SP + 32,S0); //+ 0x20
	S0 = A1;
	A0 &= 0xFF;
	V0 = 1;
	EMU_Write32(SP + 36,RA); //+ 0x24
	AT = 0x80060000;
	EMU_Write32(AT - 12884,S0); //+ 0xFFFFCDAC
	if (A0 != V0)
	{
		V0 = -1;
		ZZ_CLOCKCYCLES(10,0x80048D2C);
		goto ZZ_48B90_19C;
	}
	V0 = -1;
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 12916); //+ 0xFFFFCD8C
	if ((int32_t)V0 <= 0)
	{
		ZZ_CLOCKCYCLES(15,0x80048D34);
		goto ZZ_48B90_1A4;
	}
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 12920); //+ 0xFFFFCD88
	V0 = 512;
	if (V1 != V0)
	{
		ZZ_CLOCKCYCLES(20,0x80048C70);
		goto ZZ_48B90_E0;
	}
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 12888); //+ 0xFFFFCDA8
	V0 &= 0x1;
	if (!V0)
	{
		A0 = SP + 16;
		ZZ_CLOCKCYCLES(26,0x80048C2C);
		goto ZZ_48B90_9C;
	}
	A0 = SP + 16;
	RA = 0x80048C00; //ZZ_48B90_70
	A0 = R0;
	ZZ_CLOCKCYCLES(28,0x800471F0);
	goto ZZ_471F0;
ZZ_48B90_70:
	A0 = SP + 16;
	RA = 0x80048C0C; //ZZ_48B90_7C
	A1 = 3;
	ZZ_CLOCKCYCLES(3,0x800471D0);
	goto ZZ_471D0;
ZZ_48B90_7C:
	RA = 0x80048C14; //ZZ_48B90_84
	A0 = R0;
	ZZ_CLOCKCYCLES(2,0x80047214);
	goto ZZ_47214;
ZZ_48B90_84:
	A0 = 0x80050000;
	A0 -= 29088;
	RA = 0x80048C24; //ZZ_48B90_94
	ZZ_CLOCKCYCLES(4,0x800471F0);
	goto ZZ_471F0;
ZZ_48B90_94:
	ZZ_CLOCKCYCLES(2,0x80048C34);
	goto ZZ_48B90_A4;
ZZ_48B90_9C:
	RA = 0x80048C34; //ZZ_48B90_A4
	A1 = 3;
	ZZ_CLOCKCYCLES(2,0x800471B0);
	goto ZZ_471B0;
ZZ_48B90_A4:
	RA = 0x80048C3C; //ZZ_48B90_AC
	A0 = SP + 16;
	ZZ_CLOCKCYCLES(2,0x80047338);
	goto ZZ_47338;
ZZ_48B90_AC:
	V1 = 0x80060000;
	V1 -= 12904;
	V1 = EMU_ReadU32(V1);
	if (V0 == V1)
	{
		ZZ_CLOCKCYCLES(6,0x80048C70);
		goto ZZ_48B90_E0;
	}
	A0 = 0x80010000;
	A0 += 3008;
	RA = 0x80048C64; //ZZ_48B90_D4
	ZZ_CLOCKCYCLES(10,0x80049424);
	goto ZZ_49424;
ZZ_48B90_D4:
	V0 = -1;
	AT = 0x80060000;
	EMU_Write32(AT - 12916,V0); //+ 0xFFFFCD8C
	ZZ_CLOCKCYCLES(3,0x80048C70);
ZZ_48B90_E0:
	V0 = 0x80060000;
	V0 -= 12888;
	V0 = EMU_ReadU32(V0);
	V0 &= 0x1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(7,0x80048CAC);
		goto ZZ_48B90_11C;
	}
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 - 12928); //+ 0xFFFFCD80
	A1 = 0x80060000;
	A1 = EMU_ReadU32(A1 - 12920); //+ 0xFFFFCD88
	RA = 0x80048CA4; //ZZ_48B90_114
	ZZ_CLOCKCYCLES(13,0x800471D0);
	goto ZZ_471D0;
ZZ_48B90_114:
	ZZ_CLOCKCYCLES(2,0x80048D34);
	goto ZZ_48B90_1A4;
ZZ_48B90_11C:
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 - 12928); //+ 0xFFFFCD80
	A1 = 0x80060000;
	A1 = EMU_ReadU32(A1 - 12920); //+ 0xFFFFCD88
	RA = 0x80048CC4; //ZZ_48B90_134
	ZZ_CLOCKCYCLES(6,0x800471B0);
	goto ZZ_471B0;
ZZ_48B90_134:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 12920); //+ 0xFFFFCD88
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 12928); //+ 0xFFFFCD80
	V0 <<= 2;
	V1 += V0;
	AT = 0x80060000;
	EMU_Write32(AT - 12928,V1); //+ 0xFFFFCD80
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 12916); //+ 0xFFFFCD8C
	V0 -= 1;
	AT = 0x80060000;
	EMU_Write32(AT - 12916,V0); //+ 0xFFFFCD8C
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 12916); //+ 0xFFFFCD8C
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 12904); //+ 0xFFFFCD98
	V0 += 1;
	AT = 0x80060000;
	EMU_Write32(AT - 12904,V0); //+ 0xFFFFCD98
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 12904); //+ 0xFFFFCD98
	ZZ_CLOCKCYCLES(26,0x80048D34);
	goto ZZ_48B90_1A4;
ZZ_48B90_19C:
	AT = 0x80060000;
	EMU_Write32(AT - 12916,V0); //+ 0xFFFFCD8C
	ZZ_CLOCKCYCLES(2,0x80048D34);
ZZ_48B90_1A4:
	RA = 0x80048D3C; //ZZ_48B90_1AC
	A0 = -1;
	ZZ_CLOCKCYCLES(2,0x8004A71C);
	goto ZZ_4A71C;
ZZ_48B90_1AC:
	AT = 0x80060000;
	EMU_Write32(AT - 12912,V0); //+ 0xFFFFCD90
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 12916); //+ 0xFFFFCD8C
	if ((int32_t)V0 >= 0)
	{
		ZZ_CLOCKCYCLES(7,0x80048D60);
		goto ZZ_48B90_1D0;
	}
	RA = 0x80048D60; //ZZ_48B90_1D0
	A0 = 1;
	ZZ_CLOCKCYCLES(9,0x80048F5C);
	goto ZZ_48F5C;
ZZ_48B90_1D0:
	RA = 0x80048D68; //ZZ_48B90_1D8
	A0 = -1;
	ZZ_CLOCKCYCLES(2,0x8004A71C);
	goto ZZ_4A71C;
ZZ_48B90_1D8:
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 12908); //+ 0xFFFFCD94
	V1 += 1200;
	V1 = (int32_t)V1 < (int32_t)V0;
	if (!V1)
	{
		V0 = -1;
		ZZ_CLOCKCYCLES(7,0x80048D8C);
		goto ZZ_48B90_1FC;
	}
	V0 = -1;
	AT = 0x80060000;
	EMU_Write32(AT - 12916,V0); //+ 0xFFFFCD8C
	ZZ_CLOCKCYCLES(9,0x80048D8C);
ZZ_48B90_1FC:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 12916); //+ 0xFFFFCD8C
	if (!V0)
	{
		ZZ_CLOCKCYCLES(5,0x80048DC4);
		goto ZZ_48B90_234;
	}
	RA = 0x80048DA8; //ZZ_48B90_218
	A0 = -1;
	ZZ_CLOCKCYCLES(7,0x8004A71C);
	goto ZZ_4A71C;
ZZ_48B90_218:
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 12908); //+ 0xFFFFCD94
	V1 += 1200;
	V1 = (int32_t)V1 < (int32_t)V0;
	if (!V1)
	{
		ZZ_CLOCKCYCLES(7,0x80048E4C);
		goto ZZ_48B90_2BC;
	}
	ZZ_CLOCKCYCLES(7,0x80048DC4);
ZZ_48B90_234:
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 - 12900); //+ 0xFFFFCD9C
	RA = 0x80048DD4; //ZZ_48B90_244
	ZZ_CLOCKCYCLES(4,0x80046DB8);
	goto ZZ_46DB8;
ZZ_48B90_244:
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 - 12896); //+ 0xFFFFCDA0
	RA = 0x80048DE4; //ZZ_48B90_254
	ZZ_CLOCKCYCLES(4,0x80046DD0);
	goto ZZ_46DD0;
ZZ_48B90_254:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 12888); //+ 0xFFFFCDA8
	V0 &= 0x1;
	if (!V0)
	{
		A0 = 9;
		ZZ_CLOCKCYCLES(6,0x80048E10);
		goto ZZ_48B90_280;
	}
	A0 = 9;
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 - 12892); //+ 0xFFFFCDA4
	RA = 0x80048E0C; //ZZ_48B90_27C
	ZZ_CLOCKCYCLES(10,0x800471F0);
	goto ZZ_471F0;
ZZ_48B90_27C:
	A0 = 9;
	ZZ_CLOCKCYCLES(1,0x80048E10);
ZZ_48B90_280:
	RA = 0x80048E18; //ZZ_48B90_288
	A1 = R0;
	ZZ_CLOCKCYCLES(2,0x80046F20);
	goto ZZ_46F20;
ZZ_48B90_288:
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 12940); //+ 0xFFFFCD74
	if (!V1)
	{
		ZZ_CLOCKCYCLES(5,0x80048E4C);
		goto ZZ_48B90_2BC;
	}
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 12916); //+ 0xFFFFCD8C
	if (V0)
	{
		A0 = 5;
		ZZ_CLOCKCYCLES(10,0x80048E44);
		goto ZZ_48B90_2B4;
	}
	A0 = 5;
	A0 = 2;
	ZZ_CLOCKCYCLES(11,0x80048E44);
ZZ_48B90_2B4:
	ZZ_JUMPREGISTER_BEGIN(V1);
	RA = 0x80048E4C; //ZZ_48B90_2BC
	A1 = S0;
	ZZ_CLOCKCYCLES_JR(2);
	// UNIMPLEMENTED JUMP-TO-REGISTER-AND-LINK (V1,80048E44)
	ZZ_JUMPREGISTER_END();
ZZ_48B90_2BC:
	RA = EMU_ReadU32(SP + 36); //+ 0x24
	S0 = EMU_ReadU32(SP + 32); //+ 0x20
	SP += 40;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(5);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80048B90,ZZ_48B90);
ZZ_MARK(0x80048B94);
ZZ_MARK(0x80048B98);
ZZ_MARK(0x80048B9C);
ZZ_MARK(0x80048BA0);
ZZ_MARK(0x80048BA4);
ZZ_MARK(0x80048BA8);
ZZ_MARK(0x80048BAC);
ZZ_MARK(0x80048BB0);
ZZ_MARK(0x80048BB4);
ZZ_MARK(0x80048BB8);
ZZ_MARK(0x80048BBC);
ZZ_MARK(0x80048BC0);
ZZ_MARK(0x80048BC4);
ZZ_MARK(0x80048BC8);
ZZ_MARK(0x80048BCC);
ZZ_MARK(0x80048BD0);
ZZ_MARK(0x80048BD4);
ZZ_MARK(0x80048BD8);
ZZ_MARK(0x80048BDC);
ZZ_MARK(0x80048BE0);
ZZ_MARK(0x80048BE4);
ZZ_MARK(0x80048BE8);
ZZ_MARK(0x80048BEC);
ZZ_MARK(0x80048BF0);
ZZ_MARK(0x80048BF4);
ZZ_MARK(0x80048BF8);
ZZ_MARK(0x80048BFC);
ZZ_MARK_TARGET(0x80048C00,ZZ_48B90_70);
ZZ_MARK(0x80048C04);
ZZ_MARK(0x80048C08);
ZZ_MARK_TARGET(0x80048C0C,ZZ_48B90_7C);
ZZ_MARK(0x80048C10);
ZZ_MARK_TARGET(0x80048C14,ZZ_48B90_84);
ZZ_MARK(0x80048C18);
ZZ_MARK(0x80048C1C);
ZZ_MARK(0x80048C20);
ZZ_MARK_TARGET(0x80048C24,ZZ_48B90_94);
ZZ_MARK(0x80048C28);
ZZ_MARK_TARGET(0x80048C2C,ZZ_48B90_9C);
ZZ_MARK(0x80048C30);
ZZ_MARK_TARGET(0x80048C34,ZZ_48B90_A4);
ZZ_MARK(0x80048C38);
ZZ_MARK_TARGET(0x80048C3C,ZZ_48B90_AC);
ZZ_MARK(0x80048C40);
ZZ_MARK(0x80048C44);
ZZ_MARK(0x80048C48);
ZZ_MARK(0x80048C4C);
ZZ_MARK(0x80048C50);
ZZ_MARK(0x80048C54);
ZZ_MARK(0x80048C58);
ZZ_MARK(0x80048C5C);
ZZ_MARK(0x80048C60);
ZZ_MARK_TARGET(0x80048C64,ZZ_48B90_D4);
ZZ_MARK(0x80048C68);
ZZ_MARK(0x80048C6C);
ZZ_MARK_TARGET(0x80048C70,ZZ_48B90_E0);
ZZ_MARK(0x80048C74);
ZZ_MARK(0x80048C78);
ZZ_MARK(0x80048C7C);
ZZ_MARK(0x80048C80);
ZZ_MARK(0x80048C84);
ZZ_MARK(0x80048C88);
ZZ_MARK(0x80048C8C);
ZZ_MARK(0x80048C90);
ZZ_MARK(0x80048C94);
ZZ_MARK(0x80048C98);
ZZ_MARK(0x80048C9C);
ZZ_MARK(0x80048CA0);
ZZ_MARK_TARGET(0x80048CA4,ZZ_48B90_114);
ZZ_MARK(0x80048CA8);
ZZ_MARK_TARGET(0x80048CAC,ZZ_48B90_11C);
ZZ_MARK(0x80048CB0);
ZZ_MARK(0x80048CB4);
ZZ_MARK(0x80048CB8);
ZZ_MARK(0x80048CBC);
ZZ_MARK(0x80048CC0);
ZZ_MARK_TARGET(0x80048CC4,ZZ_48B90_134);
ZZ_MARK(0x80048CC8);
ZZ_MARK(0x80048CCC);
ZZ_MARK(0x80048CD0);
ZZ_MARK(0x80048CD4);
ZZ_MARK(0x80048CD8);
ZZ_MARK(0x80048CDC);
ZZ_MARK(0x80048CE0);
ZZ_MARK(0x80048CE4);
ZZ_MARK(0x80048CE8);
ZZ_MARK(0x80048CEC);
ZZ_MARK(0x80048CF0);
ZZ_MARK(0x80048CF4);
ZZ_MARK(0x80048CF8);
ZZ_MARK(0x80048CFC);
ZZ_MARK(0x80048D00);
ZZ_MARK(0x80048D04);
ZZ_MARK(0x80048D08);
ZZ_MARK(0x80048D0C);
ZZ_MARK(0x80048D10);
ZZ_MARK(0x80048D14);
ZZ_MARK(0x80048D18);
ZZ_MARK(0x80048D1C);
ZZ_MARK(0x80048D20);
ZZ_MARK(0x80048D24);
ZZ_MARK(0x80048D28);
ZZ_MARK_TARGET(0x80048D2C,ZZ_48B90_19C);
ZZ_MARK(0x80048D30);
ZZ_MARK_TARGET(0x80048D34,ZZ_48B90_1A4);
ZZ_MARK(0x80048D38);
ZZ_MARK_TARGET(0x80048D3C,ZZ_48B90_1AC);
ZZ_MARK(0x80048D40);
ZZ_MARK(0x80048D44);
ZZ_MARK(0x80048D48);
ZZ_MARK(0x80048D4C);
ZZ_MARK(0x80048D50);
ZZ_MARK(0x80048D54);
ZZ_MARK(0x80048D58);
ZZ_MARK(0x80048D5C);
ZZ_MARK_TARGET(0x80048D60,ZZ_48B90_1D0);
ZZ_MARK(0x80048D64);
ZZ_MARK_TARGET(0x80048D68,ZZ_48B90_1D8);
ZZ_MARK(0x80048D6C);
ZZ_MARK(0x80048D70);
ZZ_MARK(0x80048D74);
ZZ_MARK(0x80048D78);
ZZ_MARK(0x80048D7C);
ZZ_MARK(0x80048D80);
ZZ_MARK(0x80048D84);
ZZ_MARK(0x80048D88);
ZZ_MARK_TARGET(0x80048D8C,ZZ_48B90_1FC);
ZZ_MARK(0x80048D90);
ZZ_MARK(0x80048D94);
ZZ_MARK(0x80048D98);
ZZ_MARK(0x80048D9C);
ZZ_MARK(0x80048DA0);
ZZ_MARK(0x80048DA4);
ZZ_MARK_TARGET(0x80048DA8,ZZ_48B90_218);
ZZ_MARK(0x80048DAC);
ZZ_MARK(0x80048DB0);
ZZ_MARK(0x80048DB4);
ZZ_MARK(0x80048DB8);
ZZ_MARK(0x80048DBC);
ZZ_MARK(0x80048DC0);
ZZ_MARK_TARGET(0x80048DC4,ZZ_48B90_234);
ZZ_MARK(0x80048DC8);
ZZ_MARK(0x80048DCC);
ZZ_MARK(0x80048DD0);
ZZ_MARK_TARGET(0x80048DD4,ZZ_48B90_244);
ZZ_MARK(0x80048DD8);
ZZ_MARK(0x80048DDC);
ZZ_MARK(0x80048DE0);
ZZ_MARK_TARGET(0x80048DE4,ZZ_48B90_254);
ZZ_MARK(0x80048DE8);
ZZ_MARK(0x80048DEC);
ZZ_MARK(0x80048DF0);
ZZ_MARK(0x80048DF4);
ZZ_MARK(0x80048DF8);
ZZ_MARK(0x80048DFC);
ZZ_MARK(0x80048E00);
ZZ_MARK(0x80048E04);
ZZ_MARK(0x80048E08);
ZZ_MARK_TARGET(0x80048E0C,ZZ_48B90_27C);
ZZ_MARK_TARGET(0x80048E10,ZZ_48B90_280);
ZZ_MARK(0x80048E14);
ZZ_MARK_TARGET(0x80048E18,ZZ_48B90_288);
ZZ_MARK(0x80048E1C);
ZZ_MARK(0x80048E20);
ZZ_MARK(0x80048E24);
ZZ_MARK(0x80048E28);
ZZ_MARK(0x80048E2C);
ZZ_MARK(0x80048E30);
ZZ_MARK(0x80048E34);
ZZ_MARK(0x80048E38);
ZZ_MARK(0x80048E3C);
ZZ_MARK(0x80048E40);
ZZ_MARK_TARGET(0x80048E44,ZZ_48B90_2B4);
ZZ_MARK(0x80048E48);
ZZ_MARK_TARGET(0x80048E4C,ZZ_48B90_2BC);
ZZ_MARK(0x80048E50);
ZZ_MARK(0x80048E54);
ZZ_MARK(0x80048E58);
ZZ_MARK(0x80048E5C);
