#ifdef ZZ_INCLUDE_CODE
ZZ_598A0:
	SP -= 72;
	A3 = A0 & 0xFF;
	A3 <<= 2;
	V1 = A0 & 0xFF00;
	V1 = (int32_t)V1 >> 8;
	V0 = V1 << 1;
	V0 += V1;
	V0 <<= 2;
	V0 = V0 - V1;
	EMU_Write32(SP + 64,RA); //+ 0x40
	EMU_Write32(SP + 60,S5); //+ 0x3C
	EMU_Write32(SP + 56,S4); //+ 0x38
	EMU_Write32(SP + 52,S3); //+ 0x34
	EMU_Write32(SP + 48,S2); //+ 0x30
	EMU_Write32(SP + 44,S1); //+ 0x2C
	EMU_Write32(SP + 40,S0); //+ 0x28
	AT = 0x80070000;
	AT += A3;
	V1 = EMU_ReadU32(AT - 15268); //+ 0xFFFFC45C
	V0 <<= 4;
	S2 = V1 + V0;
	EMU_Write16(S2 + 88,A1); //+ 0x58
	V0 = EMU_ReadU16(S2 + 88); //+ 0x58
	S5 = A0;
	V0 = V0 < 127;
	if (V0)
	{
		EMU_Write16(S2 + 90,A2); //+ 0x5A
		ZZ_CLOCKCYCLES(27,0x80059914);
		goto ZZ_598A0_74;
	}
	EMU_Write16(S2 + 90,A2); //+ 0x5A
	V0 = 127;
	EMU_Write16(S2 + 88,V0); //+ 0x58
	ZZ_CLOCKCYCLES(29,0x80059914);
ZZ_598A0_74:
	V0 = EMU_ReadU16(S2 + 90); //+ 0x5A
	V0 = V0 < 127;
	if (V0)
	{
		V0 = 127;
		ZZ_CLOCKCYCLES(5,0x8005992C);
		goto ZZ_598A0_8C;
	}
	V0 = 127;
	EMU_Write16(S2 + 90,V0); //+ 0x5A
	ZZ_CLOCKCYCLES(6,0x8005992C);
ZZ_598A0_8C:
	V0 = 0x80070000;
	V0 = EMU_ReadU8(V0 - 32136); //+ 0xFFFF8278
	if (!V0)
	{
		S1 = R0;
		ZZ_CLOCKCYCLES(5,0x80059DAC);
		goto ZZ_598A0_50C;
	}
	S1 = R0;
	S4 = 0x2040000;
	S4 |= 0x811;
	S3 = 0x82080000;
	S3 |= 0x2083;
	V1 = S1 << 16;
	ZZ_CLOCKCYCLES(10,0x80059954);
ZZ_598A0_B4:
	V1 = (int32_t)V1 >> 16;
	V0 = V1 << 3;
	V0 = V0 - V1;
	V0 <<= 2;
	V0 = V0 - V1;
	S0 = V0 << 1;
	AT = 0x80060000;
	AT += S0;
	V1 = EMU_ReadS16(AT + 1204); //+ 0x4B4
	V0 = S5 << 16;
	V0 = (int32_t)V0 >> 16;
	if (V1 != V0)
	{
		V0 = S1 + 1;
		ZZ_CLOCKCYCLES(13,0x80059D8C);
		goto ZZ_598A0_4EC;
	}
	V0 = S1 + 1;
	AT = 0x80060000;
	AT += S0;
	A0 = EMU_ReadS16(AT + 1212); //+ 0x4BC
	AT = 0x80060000;
	AT += S0;
	A1 = EMU_ReadS16(AT + 1206); //+ 0x4B6
	RA = 0x800599A8; //ZZ_598A0_108
	ZZ_CLOCKCYCLES(21,0x8005A59C);
	goto ZZ_5A59C;
ZZ_598A0_108:
	AT = 0x80060000;
	AT += S0;
	V0 = EMU_ReadS16(AT + 1200); //+ 0x4B0
	AT = 0x80060000;
	AT += S0;
	V1 = EMU_ReadS16(AT + 1196); //+ 0x4AC
	V0 <<= 1;
	V0 += S2;
	V0 = EMU_ReadS16(V0 + 96); //+ 0x60
	EMU_SMultiply(V1,V0);
	V1 = LO;
	V0 = 0x81020000;
	V0 |= 0x409;
	EMU_SMultiply(V1,V0);
	A3 = HI;
	A0 = A3 + V1;
	A0 = (int32_t)A0 >> 6;
	V1 = (int32_t)V1 >> 31;
	A0 = A0 - V1;
	V1 = 0x80070000;
	V1 = EMU_ReadU32(V1 - 32144); //+ 0xFFFF8270
	V0 = A0 << 14;
	V1 = EMU_ReadU8(V1 + 24); //+ 0x18
	V0 = V0 - A0;
	EMU_SMultiply(V1,V0);
	V1 = LO;
	V0 = 0x82060000;
	V0 |= 0x1029;
	EMU_SMultiply(V1,V0);
	AT = 0x80060000;
	AT += S0;
	V0 = EMU_ReadS16(AT + 1208); //+ 0x4B8
	A0 = 0x80070000;
	A0 = EMU_ReadU32(A0 - 32152); //+ 0xFFFF8268
	V0 <<= 4;
	V0 += A0;
	V0 = EMU_ReadU8(V0 + 1); //+ 0x1
	A3 = HI;
	A1 = A3 + V1;
	A1 = (int32_t)A1 >> 13;
	V1 = (int32_t)V1 >> 31;
	A0 = A1 - V1;
	EMU_SMultiply(A0,V0);
	AT = 0x80060000;
	AT += S0;
	A2 = EMU_ReadS16(AT + 1206); //+ 0x4B6
	AT = 0x80060000;
	AT += S0;
	V0 = EMU_ReadS16(AT + 1210); //+ 0x4BA
	A2 <<= 4;
	A2 += V0;
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 32140); //+ 0xFFFF8274
	A2 <<= 5;
	A2 += V0;
	V1 = LO;
	V0 = EMU_ReadU8(A2 + 2); //+ 0x2
	EMU_SMultiply(V1,V0);
	V0 = LO;
	V1 = 0x40C0000;
	V1 |= 0x2051;
	EMU_UMultiply(V0,V1);
	V1 = HI;
	V0 = V0 - V1;
	V0 >>= 1;
	V1 += V0;
	V0 = EMU_ReadU16(S2 + 88); //+ 0x58
	A1 = V1 >> 13;
	EMU_SMultiply(A1,V0);
	V0 = LO;
	V1 = EMU_ReadU16(S2 + 90); //+ 0x5A
	EMU_SMultiply(A1,V1);
	V1 = LO;
	EMU_UMultiply(V0,S4);
	A0 = HI;
	EMU_UMultiply(V1,S4);
	V0 = V0 - A0;
	V0 >>= 1;
	A0 += V0;
	A0 >>= 6;
	A1 = HI;
	V1 = V1 - A1;
	V1 >>= 1;
	A1 += V1;
	V1 = EMU_ReadU8(A2 + 3); //+ 0x3
	V0 = V1 < 64;
	if (!V0)
	{
		A1 >>= 6;
		ZZ_CLOCKCYCLES(96,0x80059B54);
		goto ZZ_598A0_2B4;
	}
	A1 >>= 6;
	EMU_SMultiply(A1,V1);
	V0 = LO;
	V1 = 0x4100000;
	V1 |= 0x4105;
	EMU_UMultiply(V0,V1);
	V1 = HI;
	V0 = V0 - V1;
	V0 >>= 1;
	V1 += V0;
	A3 = V1 >> 5;
	ZZ_CLOCKCYCLES(107,0x80059B88);
	goto ZZ_598A0_2E8;
ZZ_598A0_2B4:
	V0 = 127;
	V0 = V0 - V1;
	EMU_SMultiply(A0,V0);
	V0 = LO;
	V1 = 0x4100000;
	V1 |= 0x4105;
	EMU_UMultiply(V0,V1);
	A3 = A1;
	V1 = HI;
	V0 = V0 - V1;
	V0 >>= 1;
	V1 += V0;
	A0 = V1 >> 5;
	ZZ_CLOCKCYCLES(13,0x80059B88);
ZZ_598A0_2E8:
	V1 = S1 << 16;
	V1 = (int32_t)V1 >> 16;
	V0 = V1 << 3;
	V0 = V0 - V1;
	V0 <<= 2;
	V0 = V0 - V1;
	V0 <<= 1;
	AT = 0x80060000;
	AT += V0;
	V0 = EMU_ReadS16(AT + 1208); //+ 0x4B8
	V1 = 0x80070000;
	V1 = EMU_ReadU32(V1 - 32152); //+ 0xFFFF8268
	V0 <<= 4;
	V0 += V1;
	A1 = EMU_ReadU8(V0 + 4); //+ 0x4
	V0 = A1 < 64;
	if (!V0)
	{
		V0 = A3 & 0xFFFF;
		ZZ_CLOCKCYCLES(19,0x80059BF8);
		goto ZZ_598A0_358;
	}
	V0 = A3 & 0xFFFF;
	EMU_SMultiply(V0,A1);
	V0 = LO;
	EMU_SMultiply(V0,S3);
	T1 = HI;
	V0 += T1;
	A3 = V0 >> 5;
	ZZ_CLOCKCYCLES(28,0x80059C2C);
	goto ZZ_598A0_38C;
ZZ_598A0_358:
	V1 = A0 & 0xFFFF;
	V0 = 127;
	V0 = V0 - A1;
	EMU_SMultiply(V1,V0);
	V1 = LO;
	EMU_SMultiply(V1,S3);
	T1 = HI;
	V0 = T1 + V1;
	V0 = (int32_t)V0 >> 5;
	V1 = (int32_t)V1 >> 31;
	A0 = V0 - V1;
	ZZ_CLOCKCYCLES(13,0x80059C2C);
ZZ_598A0_38C:
	V0 = S1 << 16;
	V0 = (int32_t)V0 >> 16;
	V1 = V0 << 3;
	V1 = V1 - V0;
	V1 <<= 2;
	V1 = V1 - V0;
	V1 <<= 1;
	AT = 0x80060000;
	AT += V1;
	A1 = EMU_ReadU8(AT + 1198); //+ 0x4AE
	V0 = A1 < 64;
	if (!V0)
	{
		V0 = A3 & 0xFFFF;
		ZZ_CLOCKCYCLES(14,0x80059C88);
		goto ZZ_598A0_3E8;
	}
	V0 = A3 & 0xFFFF;
	EMU_SMultiply(V0,A1);
	V0 = LO;
	EMU_SMultiply(V0,S3);
	T1 = HI;
	V0 += T1;
	A3 = V0 >> 5;
	ZZ_CLOCKCYCLES(23,0x80059CBC);
	goto ZZ_598A0_41C;
ZZ_598A0_3E8:
	V1 = A0 & 0xFFFF;
	V0 = 127;
	V0 = V0 - A1;
	EMU_SMultiply(V1,V0);
	V1 = LO;
	EMU_SMultiply(V1,S3);
	T1 = HI;
	V0 = T1 + V1;
	V0 = (int32_t)V0 >> 5;
	V1 = (int32_t)V1 >> 31;
	A0 = V0 - V1;
	ZZ_CLOCKCYCLES(13,0x80059CBC);
ZZ_598A0_41C:
	V1 = 0x80060000;
	V1 = EMU_ReadS16(V1 + 14048); //+ 0x36E0
	V0 = 1;
	if (V1 != V0)
	{
		V1 = A3 & 0xFFFF;
		ZZ_CLOCKCYCLES(5,0x80059CEC);
		goto ZZ_598A0_44C;
	}
	V1 = A3 & 0xFFFF;
	V0 = A0 & 0xFFFF;
	V0 = V0 < V1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(9,0x80059CE8);
		goto ZZ_598A0_448;
	}
	A0 = A3;
	ZZ_CLOCKCYCLES(11,0x80059CEC);
	goto ZZ_598A0_44C;
ZZ_598A0_448:
	A3 = A0;
	ZZ_CLOCKCYCLES(1,0x80059CEC);
ZZ_598A0_44C:
	A0 &= 0xFFFF;
	EMU_SMultiply(A0,A0);
	A0 = LO;
	V1 = A3 & 0xFFFF;
	EMU_SMultiply(V1,V1);
	V1 = LO;
	V0 = 0x80020000;
	V0 |= 0x9;
	EMU_SMultiply(V1,V0);
	A3 = HI;
	A1 = S1 << 16;
	EMU_SMultiply(A0,V0);
	A1 = (int32_t)A1 >> 16;
	A2 = A1 << 4;
	V0 = A3 + V1;
	V0 = (int32_t)V0 >> 13;
	V1 = (int32_t)V1 >> 31;
	A3 = V0 - V1;
	AT = 0x80070000;
	AT += A2;
	EMU_Write16(AT - 26578,A3); //+ 0xFFFF982E
	AT = 0x80060000;
	AT += A1;
	V1 = EMU_ReadU8(AT + 2508); //+ 0x9CC
	V1 |= 0x3;
	AT = 0x80060000;
	AT += A1;
	EMU_Write8(AT + 2508,V1); //+ 0x9CC
	T0 = HI;
	V0 = T0 + A0;
	V0 = (int32_t)V0 >> 13;
	A0 = (int32_t)A0 >> 31;
	A0 = V0 - A0;
	AT = 0x80070000;
	AT += A2;
	EMU_Write16(AT - 26580,A0); //+ 0xFFFF982C
	V0 = S1 + 1;
	ZZ_CLOCKCYCLES(40,0x80059D8C);
ZZ_598A0_4EC:
	S1 = V0;
	V0 <<= 16;
	V1 = 0x80070000;
	V1 = EMU_ReadU8(V1 - 32136); //+ 0xFFFF8278
	V0 = (int32_t)V0 >> 16;
	V0 = (int32_t)V0 < (int32_t)V1;
	if (V0)
	{
		V1 = S1 << 16;
		ZZ_CLOCKCYCLES(8,0x80059954);
		goto ZZ_598A0_B4;
	}
	V1 = S1 << 16;
	ZZ_CLOCKCYCLES(8,0x80059DAC);
ZZ_598A0_50C:
	V0 = S5 << 16;
	V0 = (int32_t)V0 >> 16;
	RA = EMU_ReadU32(SP + 64); //+ 0x40
	S5 = EMU_ReadU32(SP + 60); //+ 0x3C
	S4 = EMU_ReadU32(SP + 56); //+ 0x38
	S3 = EMU_ReadU32(SP + 52); //+ 0x34
	S2 = EMU_ReadU32(SP + 48); //+ 0x30
	S1 = EMU_ReadU32(SP + 44); //+ 0x2C
	S0 = EMU_ReadU32(SP + 40); //+ 0x28
	SP += 72;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(12);
	ZZ_JUMPREGISTER(0x80052858,ZZ_52830_28);
	ZZ_JUMPREGISTER(0x80056A74,ZZ_569F8_7C);
	ZZ_JUMPREGISTER(0x80054DD8,ZZ_54CF8_E0);
	ZZ_JUMPREGISTER(0x8005566C,ZZ_55410_25C);
	ZZ_JUMPREGISTER(0x80055A18,ZZ_55730_2E8);
	ZZ_JUMPREGISTER(0x800555CC,ZZ_55410_1BC);
	ZZ_JUMPREGISTER(0x80055644,ZZ_55410_234);
	ZZ_JUMPREGISTER(0x8005591C,ZZ_55730_1EC);
	ZZ_JUMPREGISTER(0x800559F0,ZZ_55730_2C0);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x800598A0,0x80059914,ZZ_598A0);
ZZ_MARK_TARGET(0x80059914,0x8005992C,ZZ_598A0_74);
ZZ_MARK_TARGET(0x8005992C,0x80059954,ZZ_598A0_8C);
ZZ_MARK_TARGET(0x80059954,0x800599A8,ZZ_598A0_B4);
ZZ_MARK_TARGET(0x800599A8,0x80059B54,ZZ_598A0_108);
ZZ_MARK_TARGET(0x80059B54,0x80059B88,ZZ_598A0_2B4);
ZZ_MARK_TARGET(0x80059B88,0x80059BF8,ZZ_598A0_2E8);
ZZ_MARK_TARGET(0x80059BF8,0x80059C2C,ZZ_598A0_358);
ZZ_MARK_TARGET(0x80059C2C,0x80059C88,ZZ_598A0_38C);
ZZ_MARK_TARGET(0x80059C88,0x80059CBC,ZZ_598A0_3E8);
ZZ_MARK_TARGET(0x80059CBC,0x80059CE8,ZZ_598A0_41C);
ZZ_MARK_TARGET(0x80059CE8,0x80059CEC,ZZ_598A0_448);
ZZ_MARK_TARGET(0x80059CEC,0x80059D8C,ZZ_598A0_44C);
ZZ_MARK_TARGET(0x80059D8C,0x80059DAC,ZZ_598A0_4EC);
ZZ_MARK_TARGET(0x80059DAC,0x80059DDC,ZZ_598A0_50C);
