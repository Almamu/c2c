#ifdef ZZ_INCLUDE_CODE
ZZ_58804:
	V0 = 0x80070000;
	V0 = EMU_ReadU8(V0 - 26621); //+ 0xFFFF9803
	V1 = 0x80070000;
	V1 = EMU_ReadU8(V1 - 26616); //+ 0xFFFF9808
	V0 <<= 4;
	V1 += V0;
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 32140); //+ 0xFFFF8274
	V1 <<= 5;
	V1 += V0;
	V0 = EMU_ReadU8(V1 + 5); //+ 0x5
	A1 &= 0xFFFF;
	V0 += A1;
	if ((int32_t)V0 >= 0)
	{
		T0 = A0;
		ZZ_CLOCKCYCLES(15,0x80058844);
		goto ZZ_58804_40;
	}
	T0 = A0;
	V0 += 7;
	ZZ_CLOCKCYCLES(16,0x80058844);
ZZ_58804_40:
	A1 = (int32_t)V0 >> 3;
	A3 = A1;
	V0 = (int32_t)A1 < 16;
	if (V0)
	{
		A2 = R0;
		ZZ_CLOCKCYCLES(5,0x80058860);
		goto ZZ_58804_5C;
	}
	A2 = R0;
	A2 = 1;
	A3 = A1 - 16;
	ZZ_CLOCKCYCLES(7,0x80058860);
ZZ_58804_5C:
	A0 = 0x2AAA0000;
	A0 |= 0xAAAB;
	V1 = EMU_ReadU8(V1 + 4); //+ 0x4
	V0 = T0 + 60;
	V0 = V0 - V1;
	V0 += A2;
	V0 <<= 16;
	V1 = (int32_t)V0 >> 16;
	EMU_SMultiply(V1,A0);
	V0 = (int32_t)V0 >> 31;
	T1 = HI;
	A0 = (int32_t)T1 >> 1;
	A0 = A0 - V0;
	V0 = A0 << 1;
	V0 += A0;
	V0 <<= 2;
	V1 = V1 - V0;
	V1 <<= 16;
	V1 = (int32_t)V1 >> 12;
	V0 = A3 << 16;
	V0 = (int32_t)V0 >> 16;
	V1 += V0;
	V1 <<= 1;
	A0 -= 5;
	A0 <<= 16;
	V0 = (int32_t)A0 >> 16;
	AT = 0x80060000;
	AT += V1;
	V1 = EMU_ReadU16(AT - 3448); //+ 0xFFFFF288
	if ((int32_t)V0 <= 0)
	{
		ZZ_CLOCKCYCLES(31,0x800588E4);
		goto ZZ_58804_E0;
	}
	V1 <<= V0;
	ZZ_CLOCKCYCLES(33,0x800588F8);
	goto ZZ_58804_F4;
ZZ_58804_E0:
	if ((int32_t)V0 >= 0)
	{
		ZZ_CLOCKCYCLES(2,0x800588F8);
		goto ZZ_58804_F4;
	}
	V1 &= 0xFFFF;
	V0 = -V0;
	V1 = (int32_t)V1 >> V0;
	ZZ_CLOCKCYCLES(5,0x800588F8);
ZZ_58804_F4:
	ZZ_JUMPREGISTER_BEGIN(RA);
	V0 = V1 & 0xFFFF;
	ZZ_CLOCKCYCLES_JR(2);
	ZZ_JUMPREGISTER(0x800595D8,ZZ_59420_1B8);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80058804,0x80058844,ZZ_58804);
ZZ_MARK_TARGET(0x80058844,0x80058860,ZZ_58804_40);
ZZ_MARK_TARGET(0x80058860,0x800588E4,ZZ_58804_5C);
ZZ_MARK_TARGET(0x800588E4,0x800588F8,ZZ_58804_E0);
ZZ_MARK_TARGET(0x800588F8,0x80058900,ZZ_58804_F4);
