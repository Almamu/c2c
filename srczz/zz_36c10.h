#ifdef ZZ_INCLUDE_CODE
ZZ_36C10:
	SP -= 32;
	EMU_Write32(SP + 16,S0); //+ 0x10
	S0 = EMU_ReadU32(GP + 232); //+ 0xE8
	A0 = 0xF0000;
	A0 |= 0x423F;
	V0 = 0x8;
	EMU_Write32(SP + 28,RA); //+ 0x1C
	EMU_Write32(SP + 24,S2); //+ 0x18
	EMU_Write32(SP + 20,S1); //+ 0x14
	RA = 0x80036C3C; //ZZ_36C10_2C
	EMU_Write32(S0 + 1780,V0); //+ 0x6F4
	ZZ_CLOCKCYCLES(11,0x80031884);
	goto ZZ_31884;
ZZ_36C10_2C:
	S1 = S0 + 1780;
	A0 = S1;
	A1 = 0x2A4;
	S2 = V0;
	EMU_Write32(S0 + 2388,S2); //+ 0x954
	RA = 0x80036C58; //ZZ_36C10_48
	EMU_Write32(S0 + 1816,R0); //+ 0x718
	ZZ_CLOCKCYCLES(7,0x80036D24);
	goto ZZ_36D24;
ZZ_36C10_48:
	A0 = S1;
	A1 = 0x2A4;
	A2 = S2;
	A3 = 0x1;
	RA = 0x80036C70; //ZZ_36C10_60
	EMU_Write32(S0 + 1816,V0); //+ 0x718
	ZZ_CLOCKCYCLES(6,0x80036D1C);
	goto ZZ_36D1C;
ZZ_36C10_60:
	RA = EMU_ReadU32(SP + 28); //+ 0x1C
	S2 = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 32;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(7);
	ZZ_JUMPREGISTER(0x80035C64,ZZ_3578C_4D8);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80036C10,ZZ_36C10);
ZZ_MARK(0x80036C14);
ZZ_MARK(0x80036C18);
ZZ_MARK(0x80036C1C);
ZZ_MARK(0x80036C20);
ZZ_MARK(0x80036C24);
ZZ_MARK(0x80036C28);
ZZ_MARK(0x80036C2C);
ZZ_MARK(0x80036C30);
ZZ_MARK(0x80036C34);
ZZ_MARK(0x80036C38);
ZZ_MARK_TARGET(0x80036C3C,ZZ_36C10_2C);
ZZ_MARK(0x80036C40);
ZZ_MARK(0x80036C44);
ZZ_MARK(0x80036C48);
ZZ_MARK(0x80036C4C);
ZZ_MARK(0x80036C50);
ZZ_MARK(0x80036C54);
ZZ_MARK_TARGET(0x80036C58,ZZ_36C10_48);
ZZ_MARK(0x80036C5C);
ZZ_MARK(0x80036C60);
ZZ_MARK(0x80036C64);
ZZ_MARK(0x80036C68);
ZZ_MARK(0x80036C6C);
ZZ_MARK_TARGET(0x80036C70,ZZ_36C10_60);
ZZ_MARK(0x80036C74);
ZZ_MARK(0x80036C78);
ZZ_MARK(0x80036C7C);
ZZ_MARK(0x80036C80);
ZZ_MARK(0x80036C84);
ZZ_MARK(0x80036C88);
