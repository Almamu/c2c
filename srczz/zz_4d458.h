#ifdef ZZ_INCLUDE_CODE
ZZ_4D458:
	SP -= 64;
	EMU_Write32(SP + 48,S0); //+ 0x30
	S0 = A1;
	EMU_Write32(SP + 52,S1); //+ 0x34
	S1 = A0;
	EMU_Write32(SP + 56,RA); //+ 0x38
	A0 = EMU_ReadS16(S0);
	A1 = EMU_ReadS16(S0 + 2); //+ 0x2
	RA = 0x8004D480; //ZZ_4D458_28
	ZZ_CLOCKCYCLES(10,0x8004D740);
	goto ZZ_4D740;
ZZ_4D458_28:
	EMU_Write32(S1 + 4,V0); //+ 0x4
	A0 = EMU_ReadU16(S0 + 4); //+ 0x4
	V0 = EMU_ReadU16(S0);
	A1 = EMU_ReadU16(S0 + 2); //+ 0x2
	A0 += V0;
	A0 -= 1;
	A0 <<= 16;
	V0 = EMU_ReadU16(S0 + 6); //+ 0x6
	A0 = (int32_t)A0 >> 16;
	A1 += V0;
	A1 -= 1;
	A1 <<= 16;
	RA = 0x8004D4B8; //ZZ_4D458_60
	A1 = (int32_t)A1 >> 16;
	ZZ_CLOCKCYCLES(14,0x8004D80C);
	goto ZZ_4D80C;
ZZ_4D458_60:
	EMU_Write32(S1 + 8,V0); //+ 0x8
	A0 = EMU_ReadS16(S0 + 8); //+ 0x8
	A1 = EMU_ReadS16(S0 + 10); //+ 0xA
	RA = 0x8004D4CC; //ZZ_4D458_74
	ZZ_CLOCKCYCLES(5,0x8004D8D8);
	goto ZZ_4D8D8;
ZZ_4D458_74:
	EMU_Write32(S1 + 12,V0); //+ 0xC
	A0 = EMU_ReadU8(S0 + 23); //+ 0x17
	A1 = EMU_ReadU8(S0 + 22); //+ 0x16
	A2 = EMU_ReadU16(S0 + 20); //+ 0x14
	RA = 0x8004D4E4; //ZZ_4D458_8C
	ZZ_CLOCKCYCLES(6,0x8004D6E8);
	goto ZZ_4D6E8;
ZZ_4D458_8C:
	A0 = S0 + 12;
	RA = 0x8004D4F0; //ZZ_4D458_98
	EMU_Write32(S1 + 16,V0); //+ 0x10
	ZZ_CLOCKCYCLES(3,0x8004D91C);
	goto ZZ_4D91C;
ZZ_4D458_98:
	EMU_Write32(S1 + 20,V0); //+ 0x14
	V0 = 0xE6000000;
	EMU_Write32(S1 + 24,V0); //+ 0x18
	V0 = EMU_ReadU8(S0 + 24); //+ 0x18
	if (!V0)
	{
		T0 = 7;
		ZZ_CLOCKCYCLES(7,0x8004D6C8);
		goto ZZ_4D458_270;
	}
	T0 = 7;
	V0 = EMU_ReadU16(S0);
	EMU_Write16(SP + 16,V0); //+ 0x10
	V0 = EMU_ReadU16(S0 + 2); //+ 0x2
	EMU_Write16(SP + 18,V0); //+ 0x12
	A0 = EMU_ReadU16(S0 + 4); //+ 0x4
	EMU_Write16(SP + 20,A0); //+ 0x14
	V0 = EMU_ReadU16(S0 + 6); //+ 0x6
	EMU_Write16(SP + 22,V0); //+ 0x16
	V0 = A0 << 16;
	A1 = (int32_t)V0 >> 16;
	if ((int32_t)A1 < 0)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(23,0x8004D570);
		goto ZZ_4D458_118;
	}
	V0 = R0;
	V0 = 0x80060000;
	V0 = EMU_ReadS16(V0 - 8264); //+ 0xFFFFDFB8
	V1 = V0;
	V0 -= 1;
	V0 = (int32_t)V0 < (int32_t)A1;
	if (V0)
	{
		V0 = V1 - 1;
		ZZ_CLOCKCYCLES(31,0x8004D570);
		goto ZZ_4D458_118;
	}
	V0 = V1 - 1;
	V0 = A0;
	ZZ_CLOCKCYCLES(32,0x8004D570);
ZZ_4D458_118:
	A1 = EMU_ReadS16(SP + 22); //+ 0x16
	EMU_Write16(SP + 20,V0); //+ 0x14
	if ((int32_t)A1 < 0)
	{
		A0 = A1;
		ZZ_CLOCKCYCLES(4,0x8004D5A8);
		goto ZZ_4D458_150;
	}
	A0 = A1;
	V0 = 0x80060000;
	V0 = EMU_ReadS16(V0 - 8262); //+ 0xFFFFDFBA
	V1 = V0;
	V0 -= 1;
	V0 = (int32_t)V0 < (int32_t)A1;
	if (V0)
	{
		V0 = V1 - 1;
		ZZ_CLOCKCYCLES(12,0x8004D5AC);
		goto ZZ_4D458_154;
	}
	V0 = V1 - 1;
	V0 = A0;
	ZZ_CLOCKCYCLES(14,0x8004D5AC);
	goto ZZ_4D458_154;
ZZ_4D458_150:
	V0 = R0;
	ZZ_CLOCKCYCLES(1,0x8004D5AC);
ZZ_4D458_154:
	V1 = EMU_ReadU16(SP + 16); //+ 0x10
	EMU_Write16(SP + 22,V0); //+ 0x16
	V0 = V1 & 0x3F;
	if (V0)
	{
		A2 = T0 << 2;
		ZZ_CLOCKCYCLES(5,0x8004D5D4);
		goto ZZ_4D458_17C;
	}
	A2 = T0 << 2;
	V0 = EMU_ReadU16(SP + 20); //+ 0x14
	V0 &= 0x3F;
	if (!V0)
	{
		A1 = T0 << 2;
		ZZ_CLOCKCYCLES(10,0x8004D670);
		goto ZZ_4D458_218;
	}
	A1 = T0 << 2;
	ZZ_CLOCKCYCLES(10,0x8004D5D4);
ZZ_4D458_17C:
	T0 += 1;
	A1 = T0 << 2;
	T0 += 1;
	V0 = EMU_ReadU16(S0 + 8); //+ 0x8
	A2 += S1;
	V0 = V1 - V0;
	EMU_Write16(SP + 16,V0); //+ 0x10
	V0 = EMU_ReadU16(SP + 18); //+ 0x12
	V1 = EMU_ReadU16(S0 + 10); //+ 0xA
	A0 = 0x60000000;
	V0 = V0 - V1;
	EMU_Write16(SP + 18,V0); //+ 0x12
	V0 = EMU_ReadU8(S0 + 27); //+ 0x1B
	V1 = EMU_ReadU8(S0 + 26); //+ 0x1A
	V0 <<= 16;
	V1 <<= 8;
	V1 |= A0;
	A0 = EMU_ReadU8(S0 + 25); //+ 0x19
	V0 |= V1;
	V0 |= A0;
	EMU_Write32(A2,V0);
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	A1 += S1;
	EMU_Write32(A1,V0);
	V0 = T0 << 2;
	V1 = EMU_ReadU32(SP + 20); //+ 0x14
	V0 += S1;
	EMU_Write32(V0,V1);
	V0 = EMU_ReadU16(SP + 16); //+ 0x10
	V1 = EMU_ReadU16(S0 + 8); //+ 0x8
	V0 += V1;
	EMU_Write16(SP + 16,V0); //+ 0x10
	V0 = EMU_ReadU16(SP + 18); //+ 0x12
	V1 = EMU_ReadU16(S0 + 10); //+ 0xA
	T0 += 1;
	V0 += V1;
	EMU_Write16(SP + 18,V0); //+ 0x12
	ZZ_CLOCKCYCLES(39,0x8004D6C8);
	goto ZZ_4D458_270;
ZZ_4D458_218:
	T0 += 1;
	A2 = T0 << 2;
	T0 += 1;
	A3 = T0 << 2;
	T0 += 1;
	A1 += S1;
	A0 = 0x2000000;
	V0 = EMU_ReadU8(S0 + 27); //+ 0x1B
	V1 = EMU_ReadU8(S0 + 26); //+ 0x1A
	V0 <<= 16;
	V1 <<= 8;
	V1 |= A0;
	A0 = EMU_ReadU8(S0 + 25); //+ 0x19
	V0 |= V1;
	V0 |= A0;
	EMU_Write32(A1,V0);
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	A2 += S1;
	EMU_Write32(A2,V0);
	V0 = EMU_ReadU32(SP + 20); //+ 0x14
	A3 += S1;
	EMU_Write32(A3,V0);
	ZZ_CLOCKCYCLES(22,0x8004D6C8);
ZZ_4D458_270:
	V0 = T0 - 1;
	EMU_Write8(S1 + 3,V0); //+ 0x3
	RA = EMU_ReadU32(SP + 56); //+ 0x38
	S1 = EMU_ReadU32(SP + 52); //+ 0x34
	S0 = EMU_ReadU32(SP + 48); //+ 0x30
	SP += 64;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(8);
	ZZ_JUMPREGISTER(0x8004C9AC,ZZ_4C950_5C);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8004D458,0x8004D480,ZZ_4D458);
ZZ_MARK_TARGET(0x8004D480,0x8004D4B8,ZZ_4D458_28);
ZZ_MARK_TARGET(0x8004D4B8,0x8004D4CC,ZZ_4D458_60);
ZZ_MARK_TARGET(0x8004D4CC,0x8004D4E4,ZZ_4D458_74);
ZZ_MARK_TARGET(0x8004D4E4,0x8004D4F0,ZZ_4D458_8C);
ZZ_MARK_TARGET(0x8004D4F0,0x8004D570,ZZ_4D458_98);
ZZ_MARK_TARGET(0x8004D570,0x8004D5A8,ZZ_4D458_118);
ZZ_MARK_TARGET(0x8004D5A8,0x8004D5AC,ZZ_4D458_150);
ZZ_MARK_TARGET(0x8004D5AC,0x8004D5D4,ZZ_4D458_154);
ZZ_MARK_TARGET(0x8004D5D4,0x8004D670,ZZ_4D458_17C);
ZZ_MARK_TARGET(0x8004D670,0x8004D6C8,ZZ_4D458_218);
ZZ_MARK_TARGET(0x8004D6C8,0x8004D6E8,ZZ_4D458_270);
