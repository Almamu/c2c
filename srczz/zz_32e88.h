#ifdef ZZ_INCLUDE_CODE
ZZ_32E88:
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 12656); //+ 0xFFFFCE90
	SP -= 136;
	EMU_Write32(SP + 116,S3); //+ 0x74
	S3 = A0;
	EMU_Write32(SP + 108,S1); //+ 0x6C
	S1 = A1;
	EMU_Write32(SP + 124,S5); //+ 0x7C
	S5 = A2;
	EMU_Write32(SP + 128,RA); //+ 0x80
	EMU_Write32(SP + 120,S4); //+ 0x78
	EMU_Write32(SP + 112,S2); //+ 0x70
	if (!V0)
	{
		EMU_Write32(SP + 104,S0); //+ 0x68
		ZZ_CLOCKCYCLES(14,0x80032EEC);
		goto ZZ_32E88_64;
	}
	EMU_Write32(SP + 104,S0); //+ 0x68
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 12756); //+ 0xFFFFCE2C
	V0 &= 0x1000;
	if (V0)
	{
		V1 = 0x100000;
		ZZ_CLOCKCYCLES(20,0x80032EF4);
		goto ZZ_32E88_6C;
	}
	V1 = 0x100000;
	V0 = EMU_ReadU32(S3 + 256); //+ 0x100
	V0 &= V1;
	if (V0)
	{
		ZZ_CLOCKCYCLES(25,0x80032EF4);
		goto ZZ_32E88_6C;
	}
	ZZ_CLOCKCYCLES(25,0x80032EEC);
ZZ_32E88_64:
	V0 = R0;
	ZZ_CLOCKCYCLES(2,0x80033204);
	goto ZZ_32E88_37C;
ZZ_32E88_6C:
	RA = 0x80032EFC; //ZZ_32E88_74
	ZZ_CLOCKCYCLES(2,0x80032BE0);
	goto ZZ_32BE0;
ZZ_32E88_74:
	S4 = V0;
	if ((int32_t)S4 <= 0)
	{
		V0 = S4 << 2;
		ZZ_CLOCKCYCLES(3,0x80033200);
		goto ZZ_32E88_378;
	}
	V0 = S4 << 2;
	V0 += S4;
	V0 <<= 4;
	V1 = 0x80060000;
	V1 -= 2172;
	S0 = V0 + V1;
	V0 = S1 & 0x1;
	if (!V0)
	{
		V0 = -2;
		ZZ_CLOCKCYCLES(11,0x80032F30);
		goto ZZ_32E88_A8;
	}
	V0 = -2;
	S1 &= V0;
	ZZ_CLOCKCYCLES(13,0x80032F70);
	goto ZZ_32E88_E8;
ZZ_32E88_A8:
	S2 = 0x80060000;
	S2 -= 228;
	A0 = S2;
	A1 = S1;
	RA = 0x80032F48; //ZZ_32E88_C0
	A2 = S3;
	ZZ_CLOCKCYCLES(6,0x80032DA4);
	goto ZZ_32DA4;
ZZ_32E88_C0:
	S1 = V0;
	V0 = -14;
	if (S1 == V0)
	{
		V0 = -1;
		ZZ_CLOCKCYCLES(4,0x80033204);
		goto ZZ_32E88_37C;
	}
	V0 = -1;
	V1 = EMU_ReadU32(S2);
	V0 = V1 & 0x7000;
	if (!V0)
	{
		V0 = V1 | 0x8000;
		ZZ_CLOCKCYCLES(9,0x80032F70);
		goto ZZ_32E88_E8;
	}
	V0 = V1 | 0x8000;
	EMU_Write32(S2,V0);
	ZZ_CLOCKCYCLES(10,0x80032F70);
ZZ_32E88_E8:
	A3 = S0 + 4;
	A2 = 0x80060000;
	A2 -= 228;
	T0 = A2 + 64;
	ZZ_CLOCKCYCLES(4,0x80032F80);
ZZ_32E88_F8:
	V0 = EMU_ReadU32(A2);
	V1 = EMU_ReadU32(A2 + 4); //+ 0x4
	A0 = EMU_ReadU32(A2 + 8); //+ 0x8
	A1 = EMU_ReadU32(A2 + 12); //+ 0xC
	EMU_Write32(A3,V0);
	EMU_Write32(A3 + 4,V1); //+ 0x4
	EMU_Write32(A3 + 8,A0); //+ 0x8
	EMU_Write32(A3 + 12,A1); //+ 0xC
	A2 += 16;
	if (A2 != T0)
	{
		A3 += 16;
		ZZ_CLOCKCYCLES(11,0x80032F80);
		goto ZZ_32E88_F8;
	}
	A3 += 16;
	V0 = EMU_ReadU32(A2);
	V1 = EMU_ReadU32(A2 + 4); //+ 0x4
	A0 = EMU_ReadU32(A2 + 8); //+ 0x8
	EMU_Write32(A3,V0);
	EMU_Write32(A3 + 4,V1); //+ 0x4
	EMU_Write32(A3 + 8,A0); //+ 0x8
	V0 = EMU_ReadS16(GP + 364); //+ 0x16C
	EMU_SMultiply(S5,V0);
	V0 = EMU_ReadU32(S0 + 4); //+ 0x4
	V0 &= 0x40;
	T1 = LO;
	A2 = (int32_t)T1 >> 14;
	if (!V0)
	{
		EMU_Write16(S0 + 30,A2); //+ 0x1E
		ZZ_CLOCKCYCLES(27,0x80033034);
		goto ZZ_32E88_1AC;
	}
	EMU_Write16(S0 + 30,A2); //+ 0x1E
	V1 = EMU_ReadS16(S0 + 60); //+ 0x3C
	A0 = EMU_ReadU32(S0 + 64); //+ 0x40
	V0 = A2 << 16;
	V0 = (int32_t)V0 >> 16;
	V1 = V1 - V0;
	EMU_SDivide(V1,A0);
	if (A0)
	{
		ZZ_CLOCKCYCLES(35,0x80033010);
		goto ZZ_32E88_188;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(36,0x80033010);
ZZ_32E88_188:
	AT = -1;
	if (A0 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x80033028);
		goto ZZ_32E88_1A0;
	}
	AT = 0x80000000;
	if (V1 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x80033028);
		goto ZZ_32E88_1A0;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x80033028);
ZZ_32E88_1A0:
	V1 = LO;
	EMU_Write32(S0 + 68,V1); //+ 0x44
	ZZ_CLOCKCYCLES(3,0x80033034);
ZZ_32E88_1AC:
	if (!S3)
	{
		EMU_Write32(S0 + 12,S3); //+ 0xC
		ZZ_CLOCKCYCLES(2,0x8003307C);
		goto ZZ_32E88_1F4;
	}
	EMU_Write32(S0 + 12,S3); //+ 0xC
	V0 = EMU_ReadU32(S3 + 96); //+ 0x60
	V1 = EMU_ReadU32(S3 + 100); //+ 0x64
	A0 = EMU_ReadU32(S3 + 104); //+ 0x68
	EMU_Write32(S0 + 48,V0); //+ 0x30
	EMU_Write32(S0 + 52,V1); //+ 0x34
	EMU_Write32(S0 + 56,A0); //+ 0x38
	A0 = S3 + 96;
	A1 = SP + 80;
	RA = 0x80033064; //ZZ_32E88_1DC
	A2 = 0x1;
	ZZ_CLOCKCYCLES(12,0x8001EE74);
	goto ZZ_1EE74;
ZZ_32E88_1DC:
	V0 = EMU_ReadU32(SP + 80); //+ 0x50
	V1 = EMU_ReadU32(SP + 84); //+ 0x54
	A0 = EMU_ReadU32(SP + 88); //+ 0x58
	EMU_Write32(S0 + 36,V0); //+ 0x24
	EMU_Write32(S0 + 40,V1); //+ 0x28
	EMU_Write32(S0 + 44,A0); //+ 0x2C
	ZZ_CLOCKCYCLES(6,0x8003307C);
ZZ_32E88_1F4:
	RA = 0x80033084; //ZZ_32E88_1FC
	ZZ_CLOCKCYCLES(2,0x800326B8);
	goto ZZ_326B8;
ZZ_32E88_1FC:
	V1 = EMU_ReadU32(S0 + 4); //+ 0x4
	V0 = 0xFFC00000;
	V0 |= 0xFFFF;
	V1 &= V0;
	V0 = S4 & 0x3F;
	V0 <<= 16;
	V1 |= V0;
	V0 = 0xFF93;
	EMU_Write32(S0 + 4,V1); //+ 0x4
	EMU_Write32(SP + 20,V0); //+ 0x14
	V0 = 0x1;
	V0 <<= S4;
	EMU_Write32(SP + 16,V0); //+ 0x10
	V0 = EMU_ReadU32(S0 + 12); //+ 0xC
	V0 = EMU_ReadU8(V0 + 288); //+ 0x120
	V0 -= 6;
	V0 = V0 < 2;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(21,0x8003311C);
		goto ZZ_32E88_294;
	}
	A0 = EMU_ReadS16(S0 + 30); //+ 0x1E
	V0 = (int32_t)A0 < 16383;
	if (!V0)
	{
		V1 = A0;
		ZZ_CLOCKCYCLES(26,0x800330FC);
		goto ZZ_32E88_274;
	}
	V1 = A0;
	if ((int32_t)A0 >= 0)
	{
		V0 = V1;
		ZZ_CLOCKCYCLES(28,0x80033100);
		goto ZZ_32E88_278;
	}
	V0 = V1;
	V0 = R0;
	ZZ_CLOCKCYCLES(30,0x80033100);
	goto ZZ_32E88_278;
ZZ_32E88_274:
	V0 = 0x3FFF;
	ZZ_CLOCKCYCLES(1,0x80033100);
ZZ_32E88_278:
	EMU_Write16(SP + 26,V0); //+ 0x1A
	EMU_Write16(SP + 24,V0); //+ 0x18
	V0 = EMU_ReadU32(S0 + 4); //+ 0x4
	V1 = -513;
	V0 &= V1;
	EMU_Write32(S0 + 4,V0); //+ 0x4
	ZZ_CLOCKCYCLES(7,0x8003313C);
	goto ZZ_32E88_2B4;
ZZ_32E88_294:
	A1 = EMU_ReadS16(S0 + 30); //+ 0x1E
	RA = 0x80033128; //ZZ_32E88_2A0
	A0 = S0 + 36;
	ZZ_CLOCKCYCLES(3,0x80032958);
	goto ZZ_32958;
ZZ_32E88_2A0:
	EMU_ReadLeft(V0 + 3,&V1); //+ 0x3
	EMU_ReadRight(V0,&V1);
	EMU_WriteLeft(SP + 27,V1); //+ 0x1B
	EMU_WriteRight(SP + 24,V1); //+ 0x18
	ZZ_CLOCKCYCLES(5,0x8003313C);
ZZ_32E88_2B4:
	V1 = EMU_ReadU16(S0 + 34); //+ 0x22
	V0 = V1 << 5;
	V0 += V1;
	V0 <<= 3;
	V0 = V0 - V1;
	V0 <<= 4;
	V0 += V1;
	if ((int32_t)V0 >= 0)
	{
		ZZ_CLOCKCYCLES(10,0x80033168);
		goto ZZ_32E88_2E0;
	}
	V0 += 4095;
	ZZ_CLOCKCYCLES(11,0x80033168);
ZZ_32E88_2E0:
	A0 = SP + 16;
	V0 = (int32_t)V0 >> 12;
	EMU_Write16(SP + 36,V0); //+ 0x24
	V0 = 0x1;
	EMU_Write32(SP + 52,V0); //+ 0x34
	EMU_Write32(SP + 56,V0); //+ 0x38
	V0 = 0x3;
	EMU_Write32(SP + 60,V0); //+ 0x3C
	V0 = 0xF;
	EMU_Write32(SP + 44,S1); //+ 0x2C
	EMU_Write16(SP + 64,R0); //+ 0x40
	EMU_Write16(SP + 66,R0); //+ 0x42
	EMU_Write16(SP + 68,R0); //+ 0x44
	EMU_Write16(SP + 70,R0); //+ 0x46
	RA = 0x800331A8; //ZZ_32E88_320
	EMU_Write16(SP + 72,V0); //+ 0x48
	ZZ_CLOCKCYCLES(16,0x80051B50);
	goto ZZ_51B50;
ZZ_32E88_320:
	A0 = EMU_ReadU32(S0 + 4); //+ 0x4
	A1 = EMU_ReadU32(SP + 16); //+ 0x10
	A0 >>= 10;
	RA = 0x800331BC; //ZZ_32E88_334
	A0 &= 0x1;
	ZZ_CLOCKCYCLES(5,0x80050E70);
	goto ZZ_50E70;
ZZ_32E88_334:
	V0 = EMU_ReadU32(S0 + 4); //+ 0x4
	V0 &= 0x8010;
	if (V0)
	{
		ZZ_CLOCKCYCLES(5,0x800331DC);
		goto ZZ_32E88_354;
	}
	A1 = EMU_ReadU32(SP + 16); //+ 0x10
	RA = 0x800331DC; //ZZ_32E88_354
	A0 = 0x1;
	ZZ_CLOCKCYCLES(8,0x80051310);
	goto ZZ_51310;
ZZ_32E88_354:
	A0 = EMU_ReadU32(GP + 356); //+ 0x164
	V1 = EMU_ReadU32(S0 + 4); //+ 0x4
	A0 += 1;
	EMU_Write32(S0,A0);
	V0 = EMU_ReadU32(S0);
	V1 |= 0x8;
	EMU_Write32(GP + 356,A0); //+ 0x164
	EMU_Write32(S0 + 4,V1); //+ 0x4
	ZZ_CLOCKCYCLES(9,0x80033204);
	goto ZZ_32E88_37C;
ZZ_32E88_378:
	V0 = -1;
	ZZ_CLOCKCYCLES(1,0x80033204);
ZZ_32E88_37C:
	RA = EMU_ReadU32(SP + 128); //+ 0x80
	S5 = EMU_ReadU32(SP + 124); //+ 0x7C
	S4 = EMU_ReadU32(SP + 120); //+ 0x78
	S3 = EMU_ReadU32(SP + 116); //+ 0x74
	S2 = EMU_ReadU32(SP + 112); //+ 0x70
	S1 = EMU_ReadU32(SP + 108); //+ 0x6C
	S0 = EMU_ReadU32(SP + 104); //+ 0x68
	SP += 136;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(10);
	ZZ_JUMPREGISTER(0x80038F80,ZZ_38EAC_D4);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80032E88,ZZ_32E88);
ZZ_MARK(0x80032E8C);
ZZ_MARK(0x80032E90);
ZZ_MARK(0x80032E94);
ZZ_MARK(0x80032E98);
ZZ_MARK(0x80032E9C);
ZZ_MARK(0x80032EA0);
ZZ_MARK(0x80032EA4);
ZZ_MARK(0x80032EA8);
ZZ_MARK(0x80032EAC);
ZZ_MARK(0x80032EB0);
ZZ_MARK(0x80032EB4);
ZZ_MARK(0x80032EB8);
ZZ_MARK(0x80032EBC);
ZZ_MARK(0x80032EC0);
ZZ_MARK(0x80032EC4);
ZZ_MARK(0x80032EC8);
ZZ_MARK(0x80032ECC);
ZZ_MARK(0x80032ED0);
ZZ_MARK(0x80032ED4);
ZZ_MARK(0x80032ED8);
ZZ_MARK(0x80032EDC);
ZZ_MARK(0x80032EE0);
ZZ_MARK(0x80032EE4);
ZZ_MARK(0x80032EE8);
ZZ_MARK_TARGET(0x80032EEC,ZZ_32E88_64);
ZZ_MARK(0x80032EF0);
ZZ_MARK_TARGET(0x80032EF4,ZZ_32E88_6C);
ZZ_MARK(0x80032EF8);
ZZ_MARK_TARGET(0x80032EFC,ZZ_32E88_74);
ZZ_MARK(0x80032F00);
ZZ_MARK(0x80032F04);
ZZ_MARK(0x80032F08);
ZZ_MARK(0x80032F0C);
ZZ_MARK(0x80032F10);
ZZ_MARK(0x80032F14);
ZZ_MARK(0x80032F18);
ZZ_MARK(0x80032F1C);
ZZ_MARK(0x80032F20);
ZZ_MARK(0x80032F24);
ZZ_MARK(0x80032F28);
ZZ_MARK(0x80032F2C);
ZZ_MARK_TARGET(0x80032F30,ZZ_32E88_A8);
ZZ_MARK(0x80032F34);
ZZ_MARK(0x80032F38);
ZZ_MARK(0x80032F3C);
ZZ_MARK(0x80032F40);
ZZ_MARK(0x80032F44);
ZZ_MARK_TARGET(0x80032F48,ZZ_32E88_C0);
ZZ_MARK(0x80032F4C);
ZZ_MARK(0x80032F50);
ZZ_MARK(0x80032F54);
ZZ_MARK(0x80032F58);
ZZ_MARK(0x80032F5C);
ZZ_MARK(0x80032F60);
ZZ_MARK(0x80032F64);
ZZ_MARK(0x80032F68);
ZZ_MARK(0x80032F6C);
ZZ_MARK_TARGET(0x80032F70,ZZ_32E88_E8);
ZZ_MARK(0x80032F74);
ZZ_MARK(0x80032F78);
ZZ_MARK(0x80032F7C);
ZZ_MARK_TARGET(0x80032F80,ZZ_32E88_F8);
ZZ_MARK(0x80032F84);
ZZ_MARK(0x80032F88);
ZZ_MARK(0x80032F8C);
ZZ_MARK(0x80032F90);
ZZ_MARK(0x80032F94);
ZZ_MARK(0x80032F98);
ZZ_MARK(0x80032F9C);
ZZ_MARK(0x80032FA0);
ZZ_MARK(0x80032FA4);
ZZ_MARK(0x80032FA8);
ZZ_MARK(0x80032FAC);
ZZ_MARK(0x80032FB0);
ZZ_MARK(0x80032FB4);
ZZ_MARK(0x80032FB8);
ZZ_MARK(0x80032FBC);
ZZ_MARK(0x80032FC0);
ZZ_MARK(0x80032FC4);
ZZ_MARK(0x80032FC8);
ZZ_MARK(0x80032FCC);
ZZ_MARK(0x80032FD0);
ZZ_MARK(0x80032FD4);
ZZ_MARK(0x80032FD8);
ZZ_MARK(0x80032FDC);
ZZ_MARK(0x80032FE0);
ZZ_MARK(0x80032FE4);
ZZ_MARK(0x80032FE8);
ZZ_MARK(0x80032FEC);
ZZ_MARK(0x80032FF0);
ZZ_MARK(0x80032FF4);
ZZ_MARK(0x80032FF8);
ZZ_MARK(0x80032FFC);
ZZ_MARK(0x80033000);
ZZ_MARK(0x80033004);
ZZ_MARK(0x80033008);
ZZ_MARK(0x8003300C);
ZZ_MARK_TARGET(0x80033010,ZZ_32E88_188);
ZZ_MARK(0x80033014);
ZZ_MARK(0x80033018);
ZZ_MARK(0x8003301C);
ZZ_MARK(0x80033020);
ZZ_MARK(0x80033024);
ZZ_MARK_TARGET(0x80033028,ZZ_32E88_1A0);
ZZ_MARK(0x8003302C);
ZZ_MARK(0x80033030);
ZZ_MARK_TARGET(0x80033034,ZZ_32E88_1AC);
ZZ_MARK(0x80033038);
ZZ_MARK(0x8003303C);
ZZ_MARK(0x80033040);
ZZ_MARK(0x80033044);
ZZ_MARK(0x80033048);
ZZ_MARK(0x8003304C);
ZZ_MARK(0x80033050);
ZZ_MARK(0x80033054);
ZZ_MARK(0x80033058);
ZZ_MARK(0x8003305C);
ZZ_MARK(0x80033060);
ZZ_MARK_TARGET(0x80033064,ZZ_32E88_1DC);
ZZ_MARK(0x80033068);
ZZ_MARK(0x8003306C);
ZZ_MARK(0x80033070);
ZZ_MARK(0x80033074);
ZZ_MARK(0x80033078);
ZZ_MARK_TARGET(0x8003307C,ZZ_32E88_1F4);
ZZ_MARK(0x80033080);
ZZ_MARK_TARGET(0x80033084,ZZ_32E88_1FC);
ZZ_MARK(0x80033088);
ZZ_MARK(0x8003308C);
ZZ_MARK(0x80033090);
ZZ_MARK(0x80033094);
ZZ_MARK(0x80033098);
ZZ_MARK(0x8003309C);
ZZ_MARK(0x800330A0);
ZZ_MARK(0x800330A4);
ZZ_MARK(0x800330A8);
ZZ_MARK(0x800330AC);
ZZ_MARK(0x800330B0);
ZZ_MARK(0x800330B4);
ZZ_MARK(0x800330B8);
ZZ_MARK(0x800330BC);
ZZ_MARK(0x800330C0);
ZZ_MARK(0x800330C4);
ZZ_MARK(0x800330C8);
ZZ_MARK(0x800330CC);
ZZ_MARK(0x800330D0);
ZZ_MARK(0x800330D4);
ZZ_MARK(0x800330D8);
ZZ_MARK(0x800330DC);
ZZ_MARK(0x800330E0);
ZZ_MARK(0x800330E4);
ZZ_MARK(0x800330E8);
ZZ_MARK(0x800330EC);
ZZ_MARK(0x800330F0);
ZZ_MARK(0x800330F4);
ZZ_MARK(0x800330F8);
ZZ_MARK_TARGET(0x800330FC,ZZ_32E88_274);
ZZ_MARK_TARGET(0x80033100,ZZ_32E88_278);
ZZ_MARK(0x80033104);
ZZ_MARK(0x80033108);
ZZ_MARK(0x8003310C);
ZZ_MARK(0x80033110);
ZZ_MARK(0x80033114);
ZZ_MARK(0x80033118);
ZZ_MARK_TARGET(0x8003311C,ZZ_32E88_294);
ZZ_MARK(0x80033120);
ZZ_MARK(0x80033124);
ZZ_MARK_TARGET(0x80033128,ZZ_32E88_2A0);
ZZ_MARK(0x8003312C);
ZZ_MARK(0x80033130);
ZZ_MARK(0x80033134);
ZZ_MARK(0x80033138);
ZZ_MARK_TARGET(0x8003313C,ZZ_32E88_2B4);
ZZ_MARK(0x80033140);
ZZ_MARK(0x80033144);
ZZ_MARK(0x80033148);
ZZ_MARK(0x8003314C);
ZZ_MARK(0x80033150);
ZZ_MARK(0x80033154);
ZZ_MARK(0x80033158);
ZZ_MARK(0x8003315C);
ZZ_MARK(0x80033160);
ZZ_MARK(0x80033164);
ZZ_MARK_TARGET(0x80033168,ZZ_32E88_2E0);
ZZ_MARK(0x8003316C);
ZZ_MARK(0x80033170);
ZZ_MARK(0x80033174);
ZZ_MARK(0x80033178);
ZZ_MARK(0x8003317C);
ZZ_MARK(0x80033180);
ZZ_MARK(0x80033184);
ZZ_MARK(0x80033188);
ZZ_MARK(0x8003318C);
ZZ_MARK(0x80033190);
ZZ_MARK(0x80033194);
ZZ_MARK(0x80033198);
ZZ_MARK(0x8003319C);
ZZ_MARK(0x800331A0);
ZZ_MARK(0x800331A4);
ZZ_MARK_TARGET(0x800331A8,ZZ_32E88_320);
ZZ_MARK(0x800331AC);
ZZ_MARK(0x800331B0);
ZZ_MARK(0x800331B4);
ZZ_MARK(0x800331B8);
ZZ_MARK_TARGET(0x800331BC,ZZ_32E88_334);
ZZ_MARK(0x800331C0);
ZZ_MARK(0x800331C4);
ZZ_MARK(0x800331C8);
ZZ_MARK(0x800331CC);
ZZ_MARK(0x800331D0);
ZZ_MARK(0x800331D4);
ZZ_MARK(0x800331D8);
ZZ_MARK_TARGET(0x800331DC,ZZ_32E88_354);
ZZ_MARK(0x800331E0);
ZZ_MARK(0x800331E4);
ZZ_MARK(0x800331E8);
ZZ_MARK(0x800331EC);
ZZ_MARK(0x800331F0);
ZZ_MARK(0x800331F4);
ZZ_MARK(0x800331F8);
ZZ_MARK(0x800331FC);
ZZ_MARK_TARGET(0x80033200,ZZ_32E88_378);
ZZ_MARK_TARGET(0x80033204,ZZ_32E88_37C);
ZZ_MARK(0x80033208);
ZZ_MARK(0x8003320C);
ZZ_MARK(0x80033210);
ZZ_MARK(0x80033214);
ZZ_MARK(0x80033218);
ZZ_MARK(0x8003321C);
ZZ_MARK(0x80033220);
ZZ_MARK(0x80033224);
ZZ_MARK(0x80033228);
