#ifdef ZZ_INCLUDE_CODE
ZZ_21C64:
	SP -= 112;
	EMU_Write32(SP + 100,S3); //+ 0x64
	S3 = A0;
	EMU_Write32(SP + 104,RA); //+ 0x68
	EMU_Write32(SP + 96,S2); //+ 0x60
	EMU_Write32(SP + 92,S1); //+ 0x5C
	if (!A1)
	{
		EMU_Write32(SP + 88,S0); //+ 0x58
		ZZ_CLOCKCYCLES(8,0x80021C90);
		goto ZZ_21C64_2C;
	}
	EMU_Write32(SP + 88,S0); //+ 0x58
	V0 = 0x1001;
	AT = 0x80060000;
	EMU_Write32(AT - 17340,V0); //+ 0xFFFFBC44
	ZZ_CLOCKCYCLES(11,0x80021C90);
ZZ_21C64_2C:
	S2 = 0x80060000;
	S2 -= 17268;
	A0 = S2;
	A1 = 0x80060000;
	A1 -= 16988;
	RA = 0x80021CAC; //ZZ_21C64_48
	A2 = R0;
	ZZ_CLOCKCYCLES(7,0x80023950);
	goto ZZ_23950;
ZZ_21C64_48:
	A0 = S2 + 20;
	A1 = 0x80060000;
	A1 -= 16972;
	RA = 0x80021CC0; //ZZ_21C64_5C
	A2 = R0;
	ZZ_CLOCKCYCLES(5,0x80023950);
	goto ZZ_23950;
ZZ_21C64_5C:
	A0 = S2 - 88;
	A1 = 0x80060000;
	A1 -= 16956;
	RA = 0x80021CD4; //ZZ_21C64_70
	A2 = R0;
	ZZ_CLOCKCYCLES(5,0x80023950);
	goto ZZ_23950;
ZZ_21C64_70:
	A0 = EMU_ReadU32(S3);
	EMU_Write32(SP + 48,A0); //+ 0x30
	V0 = EMU_ReadU32(S3 + 4); //+ 0x4
	EMU_Write32(SP + 52,V0); //+ 0x34
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 17000); //+ 0xFFFFBD98
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 16992); //+ 0xFFFFBDA0
	A2 = EMU_ReadU32(S3 + 8); //+ 0x8
	S1 = V0 - A0;
	A0 = S1;
	S0 = V1 - A2;
	A1 = S0;
	RA = 0x80021D18; //ZZ_21C64_B4
	EMU_Write32(SP + 56,A2); //+ 0x38
	ZZ_CLOCKCYCLES(17,0x8004F310);
	goto ZZ_4F310;
ZZ_21C64_B4:
	V1 = (int32_t)S0 >> 8;
	EMU_SMultiply(V1,V1);
	V1 = LO;
	A0 = (int32_t)S1 >> 8;
	EMU_SMultiply(A0,A0);
	S1 = V0 & 0xFFF;
	T0 = LO;
	RA = 0x80021D40; //ZZ_21C64_DC
	A0 = V1 + T0;
	ZZ_CLOCKCYCLES(10,0x80041D10);
	goto ZZ_41D10;
ZZ_21C64_DC:
	V1 = 0x80060000;
	V1 = EMU_ReadS8(V1 - 17358); //+ 0xFFFFBC32
	if (!V1)
	{
		A0 = V0 << 8;
		ZZ_CLOCKCYCLES(5,0x80021D90);
		goto ZZ_21C64_12C;
	}
	A0 = V0 << 8;
	V0 = 0x20000;
	V0 |= 0x9E0;
	V0 = (int32_t)V0 < (int32_t)A0;
	if (!V0)
	{
		V0 = 0x400;
		ZZ_CLOCKCYCLES(10,0x80021DB4);
		goto ZZ_21C64_150;
	}
	V0 = 0x400;
	AT = 0x80060000;
	EMU_Write8(AT - 17358,R0); //+ 0xFFFFBC32
	EMU_Write32(S2 - 88,V0); //+ 0xFFFFFFA8
	V0 = -1;
	AT = 0x80060000;
	EMU_Write32(AT - 17352,R0); //+ 0xFFFFBC38
	AT = 0x80060000;
	EMU_Write32(AT - 17348,V0); //+ 0xFFFFBC3C
	ZZ_CLOCKCYCLES(20,0x80021DB4);
	goto ZZ_21C64_150;
ZZ_21C64_12C:
	V0 = 0x10000;
	V0 |= 0x404F;
	V0 = (int32_t)V0 < (int32_t)A0;
	if (V0)
	{
		V0 = 0x1;
		ZZ_CLOCKCYCLES(5,0x80021DB4);
		goto ZZ_21C64_150;
	}
	V0 = 0x1;
	AT = 0x80060000;
	EMU_Write8(AT - 17358,V0); //+ 0xFFFFBC32
	AT = 0x80060000;
	EMU_Write32(AT - 17344,S1); //+ 0xFFFFBC40
	ZZ_CLOCKCYCLES(9,0x80021DB4);
ZZ_21C64_150:
	V0 = 0x80060000;
	V0 = EMU_ReadS8(V0 - 17358); //+ 0xFFFFBC32
	if (!V0)
	{
		ZZ_CLOCKCYCLES(5,0x80021DD8);
		goto ZZ_21C64_174;
	}
	S1 = 0x80060000;
	S1 = EMU_ReadU32(S1 - 17344); //+ 0xFFFFBC40
	ZZ_CLOCKCYCLES(9,0x80021E1C);
	goto ZZ_21C64_1B8;
ZZ_21C64_174:
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 17356); //+ 0xFFFFBC34
	if (!V1)
	{
		ZZ_CLOCKCYCLES(5,0x80021E1C);
		goto ZZ_21C64_1B8;
	}
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 17344); //+ 0xFFFFBC40
	A0 = V0 - S1;
	S0 = 0x80060000;
	S0 -= 17344;
	A1 = EMU_ReadU32(S0);
	A0 = S1;
	RA = 0x80021E14; //ZZ_21C64_1B0
	A2 = (int32_t)V1 >> 2;
	ZZ_CLOCKCYCLES(15,0x800315D8);
	goto ZZ_315D8;
ZZ_21C64_1B0:
	S1 = V0;
	EMU_Write32(S0,S1);
	ZZ_CLOCKCYCLES(2,0x80021E1C);
ZZ_21C64_1B8:
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 17248); //+ 0xFFFFBCA0
	if (!V1)
	{
		ZZ_CLOCKCYCLES(5,0x80021E50);
		goto ZZ_21C64_1EC;
	}
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 17252); //+ 0xFFFFBC9C
	EMU_SMultiply(V0,V1);
	T1 = LO;
	V0 = (int32_t)T1 >> 10;
	V0 = S1 - V0;
	S1 = V0 & 0xFFF;
	ZZ_CLOCKCYCLES(13,0x80021E50);
ZZ_21C64_1EC:
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 17268); //+ 0xFFFFBC8C
	if (!V1)
	{
		A0 = S1;
		ZZ_CLOCKCYCLES(5,0x80021E78);
		goto ZZ_21C64_214;
	}
	A0 = S1;
	A1 = 0x80060000;
	A1 = EMU_ReadU32(A1 - 17276); //+ 0xFFFFBC84
	RA = 0x80021E74; //ZZ_21C64_210
	A2 = (int32_t)V1 >> 2;
	ZZ_CLOCKCYCLES(9,0x800315D8);
	goto ZZ_315D8;
ZZ_21C64_210:
	S1 = V0;
	ZZ_CLOCKCYCLES(1,0x80021E78);
ZZ_21C64_214:
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 - 17340); //+ 0xFFFFBC44
	V0 = 0x1001;
	AT = 0x80060000;
	EMU_Write32(AT + 2988,S1); //+ 0xBAC
	if (A0 == V0)
	{
		ZZ_CLOCKCYCLES(7,0x80021EA4);
		goto ZZ_21C64_240;
	}
	A1 = S1;
	RA = 0x80021EA0; //ZZ_21C64_23C
	A2 = 0x80;
	ZZ_CLOCKCYCLES(10,0x800315D8);
	goto ZZ_315D8;
ZZ_21C64_23C:
	S1 = V0;
	ZZ_CLOCKCYCLES(1,0x80021EA4);
ZZ_21C64_240:
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 + 2744); //+ 0xAB8
	A1 = 0x80060000;
	A1 = EMU_ReadU32(A1 - 16992); //+ 0xFFFFBDA0
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 2736); //+ 0xAB0
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 - 17000); //+ 0xFFFFBD98
	AT = 0x80060000;
	EMU_Write32(AT - 17340,S1); //+ 0xFFFFBC44
	A0 = V0 - A0;
	RA = 0x80021ED8; //ZZ_21C64_274
	A1 = V1 - A1;
	ZZ_CLOCKCYCLES(13,0x8004F310);
	goto ZZ_4F310;
ZZ_21C64_274:
	V0 &= 0xFFF;
	V1 = S1 - V0;
	V0 = (int32_t)V1 < 2049;
	if (V0)
	{
		V0 = (int32_t)V1 < -2048;
		ZZ_CLOCKCYCLES(5,0x80021EF4);
		goto ZZ_21C64_290;
	}
	V0 = (int32_t)V1 < -2048;
	V1 -= 4096;
	V0 = (int32_t)V1 < -2048;
	ZZ_CLOCKCYCLES(7,0x80021EF4);
ZZ_21C64_290:
	if (!V0)
	{
		V0 = V1 + 2;
		ZZ_CLOCKCYCLES(2,0x80021F04);
		goto ZZ_21C64_2A0;
	}
	V0 = V1 + 2;
	V1 += 4096;
	V0 = V1 + 2;
	ZZ_CLOCKCYCLES(4,0x80021F04);
ZZ_21C64_2A0:
	V0 = V0 < 5;
	if (V0)
	{
		ZZ_CLOCKCYCLES(3,0x80021F3C);
		goto ZZ_21C64_2D8;
	}
	if ((int32_t)V1 >= 0)
	{
		V0 = 0x2;
		ZZ_CLOCKCYCLES(5,0x80021F2C);
		goto ZZ_21C64_2C8;
	}
	V0 = 0x2;
	V0 = 0x1;
	AT = 0x80060000;
	EMU_Write32(AT + 2960,V0); //+ 0xB90
	ZZ_CLOCKCYCLES(10,0x80021F44);
	goto ZZ_21C64_2E0;
ZZ_21C64_2C8:
	AT = 0x80060000;
	EMU_Write32(AT + 2960,V0); //+ 0xB90
	ZZ_CLOCKCYCLES(4,0x80021F44);
	goto ZZ_21C64_2E0;
ZZ_21C64_2D8:
	AT = 0x80060000;
	EMU_Write32(AT + 2960,R0); //+ 0xB90
	ZZ_CLOCKCYCLES(2,0x80021F44);
ZZ_21C64_2E0:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 2960); //+ 0xB90
	if (!V0)
	{
		ZZ_CLOCKCYCLES(5,0x8002202C);
		goto ZZ_21C64_3C8;
	}
	if ((int32_t)V1 >= 0)
	{
		V0 = V1 << 3;
		ZZ_CLOCKCYCLES(7,0x80021F68);
		goto ZZ_21C64_304;
	}
	V0 = V1 << 3;
	V1 = -V1;
	V0 = V1 << 3;
	ZZ_CLOCKCYCLES(9,0x80021F68);
ZZ_21C64_304:
	V0 = V0 - V1;
	V0 <<= 3;
	V0 = V0 - V1;
	V0 <<= 2;
	V0 += V1;
	V0 <<= 4;
	A1 = (int32_t)V0 >> 8;
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 2916); //+ 0xB64
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 + 2924); //+ 0xB6C
	A3 = 0x80060000;
	A3 = EMU_ReadU32(A3 + 2936); //+ 0xB78
	T0 = 0x80060000;
	T0 = EMU_ReadU32(T0 + 2960); //+ 0xB90
	A0 = SP + 16;
	S2 = SP + 80;
	A2 = S2;
	EMU_Write32(SP + 16,V0); //+ 0x10
	EMU_Write32(SP + 20,V1); //+ 0x14
	EMU_Write32(SP + 24,A3); //+ 0x18
	RA = 0x80021FC4; //ZZ_21C64_360
	EMU_Write32(SP + 28,T0); //+ 0x1C
	ZZ_CLOCKCYCLES(23,0x800244DC);
	goto ZZ_244DC;
ZZ_21C64_360:
	S1 = V0;
	if (!S1)
	{
		A0 = SP + 16;
		ZZ_CLOCKCYCLES(3,0x80022010);
		goto ZZ_21C64_3AC;
	}
	A0 = SP + 16;
	S0 = SP + 32;
	RA = 0x80021FDC; //ZZ_21C64_378
	A1 = S0;
	ZZ_CLOCKCYCLES(6,0x800269D8);
	goto ZZ_269D8;
ZZ_21C64_378:
	if (!V0)
	{
		A0 = S0;
		ZZ_CLOCKCYCLES(2,0x80022010);
		goto ZZ_21C64_3AC;
	}
	A0 = S0;
	V0 = EMU_ReadU32(SP + 44); //+ 0x2C
	A1 = S1;
	AT = 0x80060000;
	EMU_Write32(AT + 2960,V0); //+ 0xB90
	RA = 0x80021FFC; //ZZ_21C64_398
	A2 = S2;
	ZZ_CLOCKCYCLES(8,0x800244DC);
	goto ZZ_244DC;
ZZ_21C64_398:
	A0 = EMU_ReadU32(SP + 32); //+ 0x20
	A1 = EMU_ReadU32(SP + 36); //+ 0x24
	A2 = EMU_ReadU32(SP + 80); //+ 0x50
	ZZ_CLOCKCYCLES(5,0x80022044);
	goto ZZ_21C64_3E0;
ZZ_21C64_3AC:
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 + 2916); //+ 0xB64
	A1 = 0x80060000;
	A1 = EMU_ReadU32(A1 + 2924); //+ 0xB6C
	A2 = EMU_ReadU32(SP + 80); //+ 0x50
	ZZ_CLOCKCYCLES(7,0x80022044);
	goto ZZ_21C64_3E0;
ZZ_21C64_3C8:
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 + 2916); //+ 0xB64
	A1 = 0x80060000;
	A1 = EMU_ReadU32(A1 + 2924); //+ 0xB6C
	A2 = 0x80060000;
	A2 = EMU_ReadU32(A2 + 2936); //+ 0xB78
	ZZ_CLOCKCYCLES(6,0x80022044);
ZZ_21C64_3E0:
	RA = 0x8002204C; //ZZ_21C64_3E8
	A3 = R0;
	ZZ_CLOCKCYCLES(2,0x80020304);
	goto ZZ_20304;
ZZ_21C64_3E8:
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 17248); //+ 0xFFFFBCA0
	if (!V1)
	{
		V0 = V1 << 2;
		ZZ_CLOCKCYCLES(5,0x80022088);
		goto ZZ_21C64_424;
	}
	V0 = V1 << 2;
	V0 += V1;
	V1 = V0 << 4;
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 + 2704); //+ 0xA90
	V1 = V1 - V0;
	V1 <<= 11;
	V1 = (int32_t)V1 >> 10;
	A0 = A0 - V1;
	AT = 0x80060000;
	EMU_Write32(AT + 2704,A0); //+ 0xA90
	ZZ_CLOCKCYCLES(15,0x80022088);
ZZ_21C64_424:
	RA = 0x80022090; //ZZ_21C64_42C
	A0 = SP + 48;
	ZZ_CLOCKCYCLES(2,0x80023424);
	goto ZZ_23424;
ZZ_21C64_42C:
	V0 = EMU_ReadU32(S3);
	A0 = (int32_t)V0 >> 8;
	EMU_SMultiply(A0,A0);
	V0 = EMU_ReadU32(S3 + 8); //+ 0x8
	A1 = LO;
	A0 = (int32_t)V0 >> 8;
	EMU_SMultiply(A0,A0);
	V1 = LO;
	RA = 0x800220C0; //ZZ_21C64_45C
	A0 = A1 + V1;
	ZZ_CLOCKCYCLES(12,0x80041D10);
	goto ZZ_41D10;
ZZ_21C64_45C:
	A1 = V0 << 8;
	V0 = 0xE0000;
	V0 |= 0xB1B8;
	V0 = (int32_t)V0 < (int32_t)A1;
	if (!V0)
	{
		V0 = 0xFFFB0000;
		ZZ_CLOCKCYCLES(6,0x800220E0);
		goto ZZ_21C64_47C;
	}
	V0 = 0xFFFB0000;
	A1 = 0xE0000;
	A1 |= 0xB1B8;
	ZZ_CLOCKCYCLES(8,0x800220E0);
ZZ_21C64_47C:
	V0 |= 0xE920;
	A1 += V0;
	if ((int32_t)A1 >= 0)
	{
		ZZ_CLOCKCYCLES(4,0x800220F4);
		goto ZZ_21C64_490;
	}
	A1 = R0;
	ZZ_CLOCKCYCLES(5,0x800220F4);
ZZ_21C64_490:
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 17268); //+ 0xFFFFBC8C
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 - 17272); //+ 0xFFFFBC88
	if (!V1)
	{
		ZZ_CLOCKCYCLES(6,0x80022124);
		goto ZZ_21C64_4C0;
	}
	if ((int32_t)A0 < 0)
	{
		V0 = A0 - A1;
		ZZ_CLOCKCYCLES(8,0x80022124);
		goto ZZ_21C64_4C0;
	}
	V0 = A0 - A1;
	EMU_SMultiply(V0,V1);
	T1 = LO;
	V0 = (int32_t)T1 >> 10;
	A1 += V0;
	ZZ_CLOCKCYCLES(12,0x80022124);
ZZ_21C64_4C0:
	A2 = 0x80060000;
	A2 = EMU_ReadU32(A2 + 2712); //+ 0xA98
	A3 = 0x80060000;
	A3 = EMU_ReadU32(A3 + 2716); //+ 0xA9C
	A0 = SP + 64;
	RA = 0x80022140; //ZZ_21C64_4DC
	A1 = -A1;
	ZZ_CLOCKCYCLES(7,0x80030260);
	goto ZZ_30260;
ZZ_21C64_4DC:
	T0 = 0x80060000;
	T0 += 2700;
	V0 = EMU_ReadU32(T0);
	A1 = EMU_ReadU32(SP + 64); //+ 0x40
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 + 2704); //+ 0xA90
	A2 = EMU_ReadU32(SP + 68); //+ 0x44
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 + 2708); //+ 0xA94
	A3 = EMU_ReadU32(SP + 72); //+ 0x48
	V0 += A1;
	V1 += A2;
	A0 += A3;
	EMU_Write32(T0,V0);
	AT = 0x80060000;
	EMU_Write32(AT + 2704,V1); //+ 0xA90
	AT = 0x80060000;
	EMU_Write32(AT + 2708,A0); //+ 0xA94
	RA = EMU_ReadU32(SP + 104); //+ 0x68
	S3 = EMU_ReadU32(SP + 100); //+ 0x64
	S2 = EMU_ReadU32(SP + 96); //+ 0x60
	S1 = EMU_ReadU32(SP + 92); //+ 0x5C
	S0 = EMU_ReadU32(SP + 88); //+ 0x58
	SP += 112;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(26);
	ZZ_JUMPREGISTER(0x800270E8,ZZ_26F14_1D4);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80021C64,0x80021C90,ZZ_21C64);
ZZ_MARK_TARGET(0x80021C90,0x80021CAC,ZZ_21C64_2C);
ZZ_MARK_TARGET(0x80021CAC,0x80021CC0,ZZ_21C64_48);
ZZ_MARK_TARGET(0x80021CC0,0x80021CD4,ZZ_21C64_5C);
ZZ_MARK_TARGET(0x80021CD4,0x80021D18,ZZ_21C64_70);
ZZ_MARK_TARGET(0x80021D18,0x80021D40,ZZ_21C64_B4);
ZZ_MARK_TARGET(0x80021D40,0x80021D90,ZZ_21C64_DC);
ZZ_MARK_TARGET(0x80021D90,0x80021DB4,ZZ_21C64_12C);
ZZ_MARK_TARGET(0x80021DB4,0x80021DD8,ZZ_21C64_150);
ZZ_MARK_TARGET(0x80021DD8,0x80021E14,ZZ_21C64_174);
ZZ_MARK_TARGET(0x80021E14,0x80021E1C,ZZ_21C64_1B0);
ZZ_MARK_TARGET(0x80021E1C,0x80021E50,ZZ_21C64_1B8);
ZZ_MARK_TARGET(0x80021E50,0x80021E74,ZZ_21C64_1EC);
ZZ_MARK_TARGET(0x80021E74,0x80021E78,ZZ_21C64_210);
ZZ_MARK_TARGET(0x80021E78,0x80021EA0,ZZ_21C64_214);
ZZ_MARK_TARGET(0x80021EA0,0x80021EA4,ZZ_21C64_23C);
ZZ_MARK_TARGET(0x80021EA4,0x80021ED8,ZZ_21C64_240);
ZZ_MARK_TARGET(0x80021ED8,0x80021EF4,ZZ_21C64_274);
ZZ_MARK_TARGET(0x80021EF4,0x80021F04,ZZ_21C64_290);
ZZ_MARK_TARGET(0x80021F04,0x80021F2C,ZZ_21C64_2A0);
ZZ_MARK_TARGET(0x80021F2C,0x80021F3C,ZZ_21C64_2C8);
ZZ_MARK_TARGET(0x80021F3C,0x80021F44,ZZ_21C64_2D8);
ZZ_MARK_TARGET(0x80021F44,0x80021F68,ZZ_21C64_2E0);
ZZ_MARK_TARGET(0x80021F68,0x80021FC4,ZZ_21C64_304);
ZZ_MARK_TARGET(0x80021FC4,0x80021FDC,ZZ_21C64_360);
ZZ_MARK_TARGET(0x80021FDC,0x80021FFC,ZZ_21C64_378);
ZZ_MARK_TARGET(0x80021FFC,0x80022010,ZZ_21C64_398);
ZZ_MARK_TARGET(0x80022010,0x8002202C,ZZ_21C64_3AC);
ZZ_MARK_TARGET(0x8002202C,0x80022044,ZZ_21C64_3C8);
ZZ_MARK_TARGET(0x80022044,0x8002204C,ZZ_21C64_3E0);
ZZ_MARK_TARGET(0x8002204C,0x80022088,ZZ_21C64_3E8);
ZZ_MARK_TARGET(0x80022088,0x80022090,ZZ_21C64_424);
ZZ_MARK_TARGET(0x80022090,0x800220C0,ZZ_21C64_42C);
ZZ_MARK_TARGET(0x800220C0,0x800220E0,ZZ_21C64_45C);
ZZ_MARK_TARGET(0x800220E0,0x800220F4,ZZ_21C64_47C);
ZZ_MARK_TARGET(0x800220F4,0x80022124,ZZ_21C64_490);
ZZ_MARK_TARGET(0x80022124,0x80022140,ZZ_21C64_4C0);
ZZ_MARK_TARGET(0x80022140,0x800221A8,ZZ_21C64_4DC);
