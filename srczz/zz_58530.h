#ifdef ZZ_INCLUDE_CODE
ZZ_58530:
	SP -= 8;
	A3 = R0;
	V1 = 0x80070000;
	V1 -= 26600;
	T1 = V1 - 2;
	T0 = 1;
	A1 = 0x80070000;
	A1 = EMU_ReadS16(A1 - 26602); //+ 0xFFFF9816
	A2 = 0x80070000;
	A2 -= 12952;
	V0 = A1 << 3;
	EMU_Write16(V1,V0);
	V0 = V0 - A1;
	V0 <<= 2;
	V0 = V0 - A1;
	V0 <<= 1;
	V1 = 0x80070000;
	V1 = EMU_ReadU8(V1 - 26621); //+ 0xFFFF9803
	A0 = 0x80070000;
	A0 = EMU_ReadU8(A0 - 26616); //+ 0xFFFF9808
	V1 <<= 4;
	A0 += V1;
	V1 = 32767;
	AT = 0x80070000;
	EMU_Write16(AT - 26598,A0); //+ 0xFFFF981A
	AT = 0x80060000;
	AT += V0;
	EMU_Write16(AT + 1194,V1); //+ 0x4AA
	ZZ_CLOCKCYCLES(28,0x800585A0);
ZZ_58530_70:
	A3 += 1;
	V0 = EMU_ReadS16(T1);
	V1 = EMU_ReadU32(A2);
	V0 = T0 << V0;
	V0 = ~V0;
	V1 &= V0;
	EMU_Write32(A2,V1);
	V0 = (int32_t)A3 < 16;
	if (V0)
	{
		A2 += 4;
		ZZ_CLOCKCYCLES(10,0x800585A0);
		goto ZZ_58530_70;
	}
	A2 += 4;
	V1 = 0x80070000;
	V1 = EMU_ReadU16(V1 - 26604); //+ 0xFFFF9814
	V0 = V1 & 0x1;
	if ((int32_t)V0 <= 0)
	{
		V0 = V1 << 16;
		ZZ_CLOCKCYCLES(16,0x80058618);
		goto ZZ_58530_E8;
	}
	V0 = V1 << 16;
	V0 = (int32_t)V0 >> 16;
	V0 -= 1;
	V1 = V0 >> 31;
	V0 += V1;
	V0 = (int32_t)V0 >> 1;
	V1 = 0x80070000;
	V1 = EMU_ReadU32(V1 - 32152); //+ 0xFFFF8268
	V0 <<= 4;
	V0 += V1;
	V1 = 0x80070000;
	V1 = EMU_ReadS16(V1 - 26600); //+ 0xFFFF9818
	V0 = EMU_ReadU16(V0 + 12); //+ 0xC
	V1 <<= 1;
	ZZ_CLOCKCYCLES(30,0x8005864C);
	goto ZZ_58530_11C;
ZZ_58530_E8:
	V0 = (int32_t)V0 >> 16;
	V0 -= 1;
	V1 = V0 >> 31;
	V0 += V1;
	V0 = (int32_t)V0 >> 1;
	V1 = 0x80070000;
	V1 = EMU_ReadU32(V1 - 32152); //+ 0xFFFF8268
	V0 <<= 4;
	V0 += V1;
	V1 = 0x80070000;
	V1 = EMU_ReadS16(V1 - 26600); //+ 0xFFFF9818
	V0 = EMU_ReadU16(V0 + 14); //+ 0xE
	V1 <<= 1;
	ZZ_CLOCKCYCLES(13,0x8005864C);
ZZ_58530_11C:
	AT = 0x80070000;
	AT += V1;
	EMU_Write16(AT - 26574,V0); //+ 0xFFFF9832
	V1 = 0x80070000;
	V1 = EMU_ReadS16(V1 - 26602); //+ 0xFFFF9816
	AT = 0x80060000;
	AT += V1;
	V0 = EMU_ReadU8(AT + 2508); //+ 0x9CC
	V0 |= 0x8;
	AT = 0x80060000;
	AT += V1;
	EMU_Write8(AT + 2508,V0); //+ 0x9CC
	A1 = 0x80070000;
	A1 -= 26600;
	V0 = 0x80070000;
	V0 = EMU_ReadU8(V0 - 26621); //+ 0xFFFF9803
	V1 = 0x80070000;
	V1 = EMU_ReadU8(V1 - 26616); //+ 0xFFFF9808
	A0 = 0x80070000;
	A0 = EMU_ReadU32(A0 - 32140); //+ 0xFFFF8274
	V0 <<= 4;
	V0 += V1;
	V0 <<= 5;
	V0 += A0;
	V1 = EMU_ReadS16(A1);
	V0 = EMU_ReadU16(V0 + 16); //+ 0x10
	V1 <<= 1;
	AT = 0x80070000;
	AT += V1;
	EMU_Write16(AT - 26572,V0); //+ 0xFFFF9834
	V0 = 0x80070000;
	V0 = EMU_ReadU8(V0 - 26621); //+ 0xFFFF9803
	V1 = 0x80070000;
	V1 = EMU_ReadU8(V1 - 26616); //+ 0xFFFF9808
	V0 <<= 4;
	V0 += V1;
	V0 <<= 5;
	V0 += A0;
	V1 = EMU_ReadS16(A1);
	V0 = EMU_ReadU16(V0 + 18); //+ 0x12
	A0 = 0x80060000;
	A0 = EMU_ReadU16(A0 + 11776); //+ 0x2E00
	V1 <<= 1;
	V0 += A0;
	AT = 0x80070000;
	AT += V1;
	EMU_Write16(AT - 26570,V0); //+ 0xFFFF9836
	V1 = 0x80070000;
	V1 = EMU_ReadS16(V1 - 26602); //+ 0xFFFF9816
	AT = 0x80060000;
	AT += V1;
	V0 = EMU_ReadU8(AT + 2508); //+ 0x9CC
	V0 |= 0x30;
	AT = 0x80060000;
	AT += V1;
	EMU_Write8(AT + 2508,V0); //+ 0x9CC
	SP += 8;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(61);
	ZZ_JUMPREGISTER(0x80057F8C,ZZ_57AAC_4E0);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80058530,ZZ_58530);
ZZ_MARK(0x80058534);
ZZ_MARK(0x80058538);
ZZ_MARK(0x8005853C);
ZZ_MARK(0x80058540);
ZZ_MARK(0x80058544);
ZZ_MARK(0x80058548);
ZZ_MARK(0x8005854C);
ZZ_MARK(0x80058550);
ZZ_MARK(0x80058554);
ZZ_MARK(0x80058558);
ZZ_MARK(0x8005855C);
ZZ_MARK(0x80058560);
ZZ_MARK(0x80058564);
ZZ_MARK(0x80058568);
ZZ_MARK(0x8005856C);
ZZ_MARK(0x80058570);
ZZ_MARK(0x80058574);
ZZ_MARK(0x80058578);
ZZ_MARK(0x8005857C);
ZZ_MARK(0x80058580);
ZZ_MARK(0x80058584);
ZZ_MARK(0x80058588);
ZZ_MARK(0x8005858C);
ZZ_MARK(0x80058590);
ZZ_MARK(0x80058594);
ZZ_MARK(0x80058598);
ZZ_MARK(0x8005859C);
ZZ_MARK_TARGET(0x800585A0,ZZ_58530_70);
ZZ_MARK(0x800585A4);
ZZ_MARK(0x800585A8);
ZZ_MARK(0x800585AC);
ZZ_MARK(0x800585B0);
ZZ_MARK(0x800585B4);
ZZ_MARK(0x800585B8);
ZZ_MARK(0x800585BC);
ZZ_MARK(0x800585C0);
ZZ_MARK(0x800585C4);
ZZ_MARK(0x800585C8);
ZZ_MARK(0x800585CC);
ZZ_MARK(0x800585D0);
ZZ_MARK(0x800585D4);
ZZ_MARK(0x800585D8);
ZZ_MARK(0x800585DC);
ZZ_MARK(0x800585E0);
ZZ_MARK(0x800585E4);
ZZ_MARK(0x800585E8);
ZZ_MARK(0x800585EC);
ZZ_MARK(0x800585F0);
ZZ_MARK(0x800585F4);
ZZ_MARK(0x800585F8);
ZZ_MARK(0x800585FC);
ZZ_MARK(0x80058600);
ZZ_MARK(0x80058604);
ZZ_MARK(0x80058608);
ZZ_MARK(0x8005860C);
ZZ_MARK(0x80058610);
ZZ_MARK(0x80058614);
ZZ_MARK_TARGET(0x80058618,ZZ_58530_E8);
ZZ_MARK(0x8005861C);
ZZ_MARK(0x80058620);
ZZ_MARK(0x80058624);
ZZ_MARK(0x80058628);
ZZ_MARK(0x8005862C);
ZZ_MARK(0x80058630);
ZZ_MARK(0x80058634);
ZZ_MARK(0x80058638);
ZZ_MARK(0x8005863C);
ZZ_MARK(0x80058640);
ZZ_MARK(0x80058644);
ZZ_MARK(0x80058648);
ZZ_MARK_TARGET(0x8005864C,ZZ_58530_11C);
ZZ_MARK(0x80058650);
ZZ_MARK(0x80058654);
ZZ_MARK(0x80058658);
ZZ_MARK(0x8005865C);
ZZ_MARK(0x80058660);
ZZ_MARK(0x80058664);
ZZ_MARK(0x80058668);
ZZ_MARK(0x8005866C);
ZZ_MARK(0x80058670);
ZZ_MARK(0x80058674);
ZZ_MARK(0x80058678);
ZZ_MARK(0x8005867C);
ZZ_MARK(0x80058680);
ZZ_MARK(0x80058684);
ZZ_MARK(0x80058688);
ZZ_MARK(0x8005868C);
ZZ_MARK(0x80058690);
ZZ_MARK(0x80058694);
ZZ_MARK(0x80058698);
ZZ_MARK(0x8005869C);
ZZ_MARK(0x800586A0);
ZZ_MARK(0x800586A4);
ZZ_MARK(0x800586A8);
ZZ_MARK(0x800586AC);
ZZ_MARK(0x800586B0);
ZZ_MARK(0x800586B4);
ZZ_MARK(0x800586B8);
ZZ_MARK(0x800586BC);
ZZ_MARK(0x800586C0);
ZZ_MARK(0x800586C4);
ZZ_MARK(0x800586C8);
ZZ_MARK(0x800586CC);
ZZ_MARK(0x800586D0);
ZZ_MARK(0x800586D4);
ZZ_MARK(0x800586D8);
ZZ_MARK(0x800586DC);
ZZ_MARK(0x800586E0);
ZZ_MARK(0x800586E4);
ZZ_MARK(0x800586E8);
ZZ_MARK(0x800586EC);
ZZ_MARK(0x800586F0);
ZZ_MARK(0x800586F4);
ZZ_MARK(0x800586F8);
ZZ_MARK(0x800586FC);
ZZ_MARK(0x80058700);
ZZ_MARK(0x80058704);
ZZ_MARK(0x80058708);
ZZ_MARK(0x8005870C);
ZZ_MARK(0x80058710);
ZZ_MARK(0x80058714);
ZZ_MARK(0x80058718);
ZZ_MARK(0x8005871C);
ZZ_MARK(0x80058720);
ZZ_MARK(0x80058724);
ZZ_MARK(0x80058728);
ZZ_MARK(0x8005872C);
ZZ_MARK(0x80058730);
ZZ_MARK(0x80058734);
ZZ_MARK(0x80058738);
ZZ_MARK(0x8005873C);
