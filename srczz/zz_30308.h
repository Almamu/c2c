#ifdef ZZ_INCLUDE_CODE
ZZ_30308:
	SP -= 200;
	T5 = A0;
	T7 = A1;
	T3 = SP + 16;
	T8 = R0;
	T2 = 0x80060000;
	T2 -= 16816;
	EMU_Write32(SP + 176,S0); //+ 0xB0
	S0 = 0x1;
	EMU_Write32(SP + 192,S4); //+ 0xC0
	EMU_Write32(SP + 188,S3); //+ 0xBC
	EMU_Write32(SP + 184,S2); //+ 0xB8
	EMU_Write32(SP + 180,S1); //+ 0xB4
	ZZ_CLOCKCYCLES(13,0x8003033C);
ZZ_30308_34:
	V0 = EMU_ReadU32(T2);
	T2 += 4;
	A0 = V0 << 1;
	A0 += V0;
	A0 <<= 2;
	A0 += T7;
	EMU_Write32(SP,A0);
	V1 = EMU_ReadU32(T2);
	T2 += 4;
	V0 = V1 << 1;
	V0 += V1;
	V0 <<= 2;
	V0 += T7;
	EMU_Write32(SP + 4,V0); //+ 0x4
	V1 = EMU_ReadU32(T2);
	T4 = R0;
	T6 = SP;
	T2 += 4;
	V0 = V1 << 1;
	V0 += V1;
	V0 <<= 2;
	V0 += T7;
	EMU_Write32(SP + 8,V0); //+ 0x8
	V1 = EMU_ReadU32(T2);
	T1 = T3 + 4;
	A3 = A0;
	T2 += 4;
	V0 = V1 << 1;
	V0 += V1;
	V0 <<= 2;
	V0 += T7;
	EMU_Write32(SP + 12,V0); //+ 0xC
	ZZ_CLOCKCYCLES(32,0x800303BC);
ZZ_30308_B4:
	EMU_Write32(T1,R0);
	T0 = EMU_ReadU32(T6 + 4); //+ 0x4
	A1 = EMU_ReadU32(A3 + 4); //+ 0x4
	A0 = EMU_ReadU32(T0 + 4); //+ 0x4
	V0 = (int32_t)A0 < (int32_t)A1;
	if (V0)
	{
		V0 = (int32_t)A0 < (int32_t)T5;
		ZZ_CLOCKCYCLES(8,0x80030458);
		goto ZZ_30308_150;
	}
	V0 = (int32_t)A0 < (int32_t)T5;
	V0 = (int32_t)A1 < (int32_t)T5;
	if (!V0)
	{
		V0 = (int32_t)T5 < (int32_t)A0;
		ZZ_CLOCKCYCLES(11,0x800304E8);
		goto ZZ_30308_1E0;
	}
	V0 = (int32_t)T5 < (int32_t)A0;
	if (!V0)
	{
		V1 = T5 - A1;
		ZZ_CLOCKCYCLES(13,0x800304E8);
		goto ZZ_30308_1E0;
	}
	V1 = T5 - A1;
	V1 <<= 8;
	V0 = A0 - A1;
	EMU_SDivide(V1,V0);
	if (V0)
	{
		ZZ_CLOCKCYCLES(18,0x80030408);
		goto ZZ_30308_100;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(19,0x80030408);
ZZ_30308_100:
	AT = -1;
	if (V0 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x80030420);
		goto ZZ_30308_118;
	}
	AT = 0x80000000;
	if (V1 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x80030420);
		goto ZZ_30308_118;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x80030420);
ZZ_30308_118:
	A0 = LO;
	V0 = EMU_ReadU32(T0);
	V1 = EMU_ReadU32(A3);
	V0 = V0 - V1;
	EMU_SMultiply(V0,A0);
	S4 = LO;
	V0 = (int32_t)S4 >> 8;
	V0 += V1;
	EMU_Write32(T3,V0);
	V0 = EMU_ReadU32(T0 + 8); //+ 0x8
	V1 = EMU_ReadU32(A3 + 8); //+ 0x8
	V0 = V0 - V1;
	ZZ_CLOCKCYCLES(14,0x800304D0);
	goto ZZ_30308_1C8;
ZZ_30308_150:
	if (!V0)
	{
		V0 = (int32_t)T5 < (int32_t)A1;
		ZZ_CLOCKCYCLES(2,0x800304E8);
		goto ZZ_30308_1E0;
	}
	V0 = (int32_t)T5 < (int32_t)A1;
	if (!V0)
	{
		V1 = T5 - A0;
		ZZ_CLOCKCYCLES(4,0x800304E8);
		goto ZZ_30308_1E0;
	}
	V1 = T5 - A0;
	V1 <<= 8;
	V0 = A1 - A0;
	EMU_SDivide(V1,V0);
	if (V0)
	{
		ZZ_CLOCKCYCLES(9,0x80030480);
		goto ZZ_30308_178;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(10,0x80030480);
ZZ_30308_178:
	AT = -1;
	if (V0 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x80030498);
		goto ZZ_30308_190;
	}
	AT = 0x80000000;
	if (V1 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x80030498);
		goto ZZ_30308_190;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x80030498);
ZZ_30308_190:
	A0 = LO;
	V0 = EMU_ReadU32(A3);
	V1 = EMU_ReadU32(T0);
	V0 = V0 - V1;
	EMU_SMultiply(V0,A0);
	S4 = LO;
	V0 = (int32_t)S4 >> 8;
	V0 += V1;
	EMU_Write32(T3,V0);
	V0 = EMU_ReadU32(A3 + 8); //+ 0x8
	V1 = EMU_ReadU32(T0 + 8); //+ 0x8
	V0 = V0 - V1;
	ZZ_CLOCKCYCLES(14,0x800304D0);
ZZ_30308_1C8:
	EMU_SMultiply(V0,A0);
	EMU_Write32(T1,S0);
	S4 = LO;
	V0 = (int32_t)S4 >> 8;
	V0 += V1;
	EMU_Write32(T1 + 4,V0); //+ 0x4
	ZZ_CLOCKCYCLES(6,0x800304E8);
ZZ_30308_1E0:
	T1 += 12;
	T3 += 12;
	T6 += 4;
	T4 += 1;
	V0 = (int32_t)T4 < 3;
	if (V0)
	{
		A3 = T0;
		ZZ_CLOCKCYCLES(7,0x800303BC);
		goto ZZ_30308_B4;
	}
	A3 = T0;
	T8 += 1;
	V0 = (int32_t)T8 < 4;
	if (V0)
	{
		T6 = R0;
		ZZ_CLOCKCYCLES(11,0x8003033C);
		goto ZZ_30308_34;
	}
	T6 = R0;
	T2 = 0x80060000;
	T2 -= 16816;
	S1 = SP + 16;
	S2 = 0x1;
	S0 = SP + 160;
	S3 = 0x80060000;
	S3 -= 16592;
	T9 = S3;
	T8 = R0;
	EMU_Write32(SP + 168,R0); //+ 0xA8
	EMU_Write32(SP + 164,R0); //+ 0xA4
	EMU_Write32(SP + 160,R0); //+ 0xA0
	ZZ_CLOCKCYCLES(23,0x80030544);
ZZ_30308_23C:
	V1 = EMU_ReadU32(T2);
	T2 += 4;
	V0 = V1 << 1;
	V0 += V1;
	V0 <<= 2;
	V0 += T7;
	EMU_Write32(SP,V0);
	V1 = EMU_ReadU32(T2);
	A0 = R0;
	T2 += 4;
	V0 = V1 << 1;
	V0 += V1;
	V0 <<= 2;
	V0 += T7;
	EMU_Write32(SP + 4,V0); //+ 0x4
	V1 = EMU_ReadU32(T2);
	T0 = R0;
	T4 = R0;
	T2 += 4;
	V0 = V1 << 1;
	V0 += V1;
	V0 <<= 2;
	V0 += T7;
	EMU_Write32(SP + 8,V0); //+ 0x8
	V1 = EMU_ReadU32(T2);
	T1 = T8 + S3;
	A1 = SP;
	T2 += 4;
	V0 = V1 << 1;
	V0 += V1;
	V0 <<= 2;
	V0 += T7;
	EMU_Write32(SP + 12,V0); //+ 0xC
	ZZ_CLOCKCYCLES(33,0x800305C8);
ZZ_30308_2C0:
	V0 = EMU_ReadS8(T1);
	V1 = V0 << 1;
	V1 += V0;
	V1 <<= 2;
	T3 = S1 + V1;
	V0 = EMU_ReadU32(T3 + 4); //+ 0x4
	A3 = EMU_ReadU32(A1);
	if (V0 != S2)
	{
		T1 += 1;
		ZZ_CLOCKCYCLES(10,0x80030638);
		goto ZZ_30308_330;
	}
	T1 += 1;
	if (A0)
	{
		ZZ_CLOCKCYCLES(12,0x80030600);
		goto ZZ_30308_2F8;
	}
	A0 = T3;
	ZZ_CLOCKCYCLES(14,0x800306DC);
	goto ZZ_30308_3D4;
ZZ_30308_2F8:
	V0 = EMU_ReadU32(A0);
	EMU_Write32(A2,V0);
	V0 = EMU_ReadU32(A0 + 8); //+ 0x8
	EMU_Write32(A2 + 4,T5); //+ 0x4
	EMU_Write32(A2 + 8,V0); //+ 0x8
	V0 = EMU_ReadU32(T3);
	A2 += 12;
	EMU_Write32(A2,V0);
	V0 = EMU_ReadU32(T3 + 8); //+ 0x8
	T6 += 1;
	EMU_Write32(A2 + 4,T5); //+ 0x4
	EMU_Write32(A2 + 8,V0); //+ 0x8
	ZZ_CLOCKCYCLES(14,0x8003076C);
	goto ZZ_30308_464;
ZZ_30308_330:
	V0 = EMU_ReadU32(A3 + 4); //+ 0x4
	if (V0 != T5)
	{
		ZZ_CLOCKCYCLES(4,0x800306DC);
		goto ZZ_30308_3D4;
	}
	if (T0)
	{
		V0 = T4 - 1;
		ZZ_CLOCKCYCLES(6,0x80030658);
		goto ZZ_30308_350;
	}
	V0 = T4 - 1;
	T0 = A3;
	ZZ_CLOCKCYCLES(8,0x800306DC);
	goto ZZ_30308_3D4;
ZZ_30308_350:
	V1 = V0 & 0x3;
	V0 = V1 << 2;
	V0 += SP;
	V0 = EMU_ReadU32(V0);
	V0 = EMU_ReadU32(V0 + 4); //+ 0x4
	if (V0 != T5)
	{
		V0 = T9 + V1;
		ZZ_CLOCKCYCLES(9,0x8003069C);
		goto ZZ_30308_394;
	}
	V0 = T9 + V1;
	V0 = EMU_ReadS8(V0);
	V1 = S0 + V0;
	V0 = EMU_ReadS8(V1);
	if (V0)
	{
		ZZ_CLOCKCYCLES(16,0x80030770);
		goto ZZ_30308_468;
	}
	EMU_Write8(V1,S2);
	ZZ_CLOCKCYCLES(17,0x8003069C);
ZZ_30308_394:
	V0 = EMU_ReadU32(T0);
	V1 = EMU_ReadU32(T0 + 4); //+ 0x4
	A0 = EMU_ReadU32(T0 + 8); //+ 0x8
	EMU_Write32(A2,V0);
	EMU_Write32(A2 + 4,V1); //+ 0x4
	EMU_Write32(A2 + 8,A0); //+ 0x8
	A2 += 12;
	V0 = EMU_ReadU32(A3);
	V1 = EMU_ReadU32(A3 + 4); //+ 0x4
	A0 = EMU_ReadU32(A3 + 8); //+ 0x8
	EMU_Write32(A2,V0);
	EMU_Write32(A2 + 4,V1); //+ 0x4
	EMU_Write32(A2 + 8,A0); //+ 0x8
	A2 += 12;
	T6 += 1;
	ZZ_CLOCKCYCLES(16,0x80030770);
	goto ZZ_30308_468;
ZZ_30308_3D4:
	T4 += 1;
	V0 = (int32_t)T4 < 4;
	if (V0)
	{
		A1 += 4;
		ZZ_CLOCKCYCLES(4,0x800305C8);
		goto ZZ_30308_2C0;
	}
	A1 += 4;
	if (A0)
	{
		ZZ_CLOCKCYCLES(6,0x80030734);
		goto ZZ_30308_42C;
	}
	if (!T0)
	{
		ZZ_CLOCKCYCLES(8,0x80030770);
		goto ZZ_30308_468;
	}
	V0 = EMU_ReadU32(T0);
	V1 = EMU_ReadU32(T0 + 4); //+ 0x4
	A0 = EMU_ReadU32(T0 + 8); //+ 0x8
	EMU_Write32(A2,V0);
	EMU_Write32(A2 + 4,V1); //+ 0x4
	EMU_Write32(A2 + 8,A0); //+ 0x8
	V0 = EMU_ReadU32(T0);
	V1 = EMU_ReadU32(T0 + 4); //+ 0x4
	A0 = EMU_ReadU32(T0 + 8); //+ 0x8
	EMU_Write32(A2 + 12,V0); //+ 0xC
	EMU_Write32(A2 + 16,V1); //+ 0x10
	EMU_Write32(A2 + 20,A0); //+ 0x14
	T6 = 0x1;
	ZZ_CLOCKCYCLES(22,0x80030780);
	goto ZZ_30308_478;
ZZ_30308_42C:
	V0 = EMU_ReadU32(A0);
	EMU_Write32(A2,V0);
	V0 = EMU_ReadU32(A0 + 8); //+ 0x8
	T6 += 1;
	EMU_Write32(A2 + 4,T5); //+ 0x4
	EMU_Write32(A2 + 8,V0); //+ 0x8
	A2 += 12;
	V0 = EMU_ReadU32(T0);
	V1 = EMU_ReadU32(T0 + 4); //+ 0x4
	A0 = EMU_ReadU32(T0 + 8); //+ 0x8
	EMU_Write32(A2,V0);
	EMU_Write32(A2 + 4,V1); //+ 0x4
	EMU_Write32(A2 + 8,A0); //+ 0x8
	ZZ_CLOCKCYCLES(14,0x8003076C);
ZZ_30308_464:
	A2 += 12;
	ZZ_CLOCKCYCLES(1,0x80030770);
ZZ_30308_468:
	T8 += 4;
	V0 = (int32_t)T8 < 24;
	if (V0)
	{
		T9 += 4;
		ZZ_CLOCKCYCLES(4,0x80030544);
		goto ZZ_30308_23C;
	}
	T9 += 4;
	ZZ_CLOCKCYCLES(4,0x80030780);
ZZ_30308_478:
	V0 = T6;
	S4 = EMU_ReadU32(SP + 192); //+ 0xC0
	S3 = EMU_ReadU32(SP + 188); //+ 0xBC
	S2 = EMU_ReadU32(SP + 184); //+ 0xB8
	S1 = EMU_ReadU32(SP + 180); //+ 0xB4
	S0 = EMU_ReadU32(SP + 176); //+ 0xB0
	SP += 200;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(9);
	ZZ_JUMPREGISTER(0x8002D0FC,ZZ_2CF64_198);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80030308,0x8003033C,ZZ_30308);
ZZ_MARK_TARGET(0x8003033C,0x800303BC,ZZ_30308_34);
ZZ_MARK_TARGET(0x800303BC,0x80030408,ZZ_30308_B4);
ZZ_MARK_TARGET(0x80030408,0x80030420,ZZ_30308_100);
ZZ_MARK_TARGET(0x80030420,0x80030458,ZZ_30308_118);
ZZ_MARK_TARGET(0x80030458,0x80030480,ZZ_30308_150);
ZZ_MARK_TARGET(0x80030480,0x80030498,ZZ_30308_178);
ZZ_MARK_TARGET(0x80030498,0x800304D0,ZZ_30308_190);
ZZ_MARK_TARGET(0x800304D0,0x800304E8,ZZ_30308_1C8);
ZZ_MARK_TARGET(0x800304E8,0x80030544,ZZ_30308_1E0);
ZZ_MARK_TARGET(0x80030544,0x800305C8,ZZ_30308_23C);
ZZ_MARK_TARGET(0x800305C8,0x80030600,ZZ_30308_2C0);
ZZ_MARK_TARGET(0x80030600,0x80030638,ZZ_30308_2F8);
ZZ_MARK_TARGET(0x80030638,0x80030658,ZZ_30308_330);
ZZ_MARK_TARGET(0x80030658,0x8003069C,ZZ_30308_350);
ZZ_MARK_TARGET(0x8003069C,0x800306DC,ZZ_30308_394);
ZZ_MARK_TARGET(0x800306DC,0x80030734,ZZ_30308_3D4);
ZZ_MARK_TARGET(0x80030734,0x8003076C,ZZ_30308_42C);
ZZ_MARK_TARGET(0x8003076C,0x80030770,ZZ_30308_464);
ZZ_MARK_TARGET(0x80030770,0x80030780,ZZ_30308_468);
ZZ_MARK_TARGET(0x80030780,0x800307A4,ZZ_30308_478);
