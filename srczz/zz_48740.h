#ifdef ZZ_INCLUDE_CODE
ZZ_48740:
	SP -= 48;
	EMU_Write32(SP + 32,S2); //+ 0x20
	S2 = A0;
	A0 = -1;
	EMU_Write32(SP + 40,RA); //+ 0x28
	EMU_Write32(SP + 36,S3); //+ 0x24
	EMU_Write32(SP + 28,S1); //+ 0x1C
	RA = 0x80048764; //ZZ_48740_24
	EMU_Write32(SP + 24,S0); //+ 0x18
	ZZ_CLOCKCYCLES(9,0x8004A71C);
	goto ZZ_4A71C;
ZZ_48740_24:
	S3 = 0x80060000;
	S3 -= 13684;
	S1 = 0x80060000;
	S1 -= 12988;
	S0 = 0x80060000;
	S0 -= 13556;
	V0 += 960;
	AT = 0x80060000;
	EMU_Write32(AT + 264,V0); //+ 0x108
	V0 = 0x80010000;
	V0 += 2996;
	AT = 0x80060000;
	EMU_Write32(AT + 268,R0); //+ 0x10C
	AT = 0x80060000;
	EMU_Write32(AT + 272,V0); //+ 0x110
	ZZ_CLOCKCYCLES(15,0x800487A0);
ZZ_48740_60:
	RA = 0x800487A8; //ZZ_48740_68
	A0 = -1;
	ZZ_CLOCKCYCLES(2,0x8004A71C);
	goto ZZ_4A71C;
ZZ_48740_68:
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 + 264); //+ 0x108
	V1 = (int32_t)V1 < (int32_t)V0;
	if (V1)
	{
		ZZ_CLOCKCYCLES(6,0x800487E8);
		goto ZZ_48740_A8;
	}
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 + 268); //+ 0x10C
	V0 = V1 + 1;
	AT = 0x80060000;
	EMU_Write32(AT + 268,V0); //+ 0x10C
	V0 = 0x3C0000;
	V0 = (int32_t)V0 < (int32_t)V1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(16,0x80048858);
		goto ZZ_48740_118;
	}
	ZZ_CLOCKCYCLES(16,0x800487E8);
ZZ_48740_A8:
	A0 = 0x80010000;
	A0 += 2732;
	RA = 0x800487F8; //ZZ_48740_B8
	ZZ_CLOCKCYCLES(4,0x80049424);
	goto ZZ_49424;
ZZ_48740_B8:
	A0 = EMU_ReadU8(S1);
	V0 = EMU_ReadU8(S1 + 1); //+ 0x1
	A1 = 0x80060000;
	A1 = EMU_ReadU32(A1 + 272); //+ 0x110
	V0 <<= 2;
	V0 += S0;
	A0 <<= 2;
	V1 = EMU_ReadU32(V0);
	V0 = 0x80060000;
	V0 = EMU_ReadU8(V0 - 13691); //+ 0xFFFFCA85
	A0 += S0;
	V0 <<= 2;
	V0 += S3;
	EMU_Write32(SP + 16,V1); //+ 0x10
	A2 = EMU_ReadU32(V0);
	A3 = EMU_ReadU32(A0);
	A0 = 0x80010000;
	A0 += 2748;
	RA = 0x80048848; //ZZ_48740_108
	ZZ_CLOCKCYCLES(20,0x800494DC);
	goto ZZ_494DC;
ZZ_48740_108:
	RA = 0x80048850; //ZZ_48740_110
	ZZ_CLOCKCYCLES(2,0x80048330);
	goto ZZ_48330;
ZZ_48740_110:
	V0 = -1;
	ZZ_CLOCKCYCLES(2,0x8004885C);
	goto ZZ_48740_11C;
ZZ_48740_118:
	V0 = R0;
	ZZ_CLOCKCYCLES(1,0x8004885C);
ZZ_48740_11C:
	if (V0)
	{
		V0 = -1;
		ZZ_CLOCKCYCLES(2,0x8004888C);
		goto ZZ_48740_14C;
	}
	V0 = -1;
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 12944); //+ 0xFFFFCD70
	V0 = EMU_ReadU32(V0);
	V1 = 0x1000000;
	V0 &= V1;
	if (!V0)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(10,0x8004888C);
		goto ZZ_48740_14C;
	}
	V0 = R0;
	if (!S2)
	{
		V0 = 1;
		ZZ_CLOCKCYCLES(12,0x800487A0);
		goto ZZ_48740_60;
	}
	V0 = 1;
	ZZ_CLOCKCYCLES(12,0x8004888C);
ZZ_48740_14C:
	RA = EMU_ReadU32(SP + 40); //+ 0x28
	S3 = EMU_ReadU32(SP + 36); //+ 0x24
	S2 = EMU_ReadU32(SP + 32); //+ 0x20
	S1 = EMU_ReadU32(SP + 28); //+ 0x1C
	S0 = EMU_ReadU32(SP + 24); //+ 0x18
	SP += 48;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(8);
	ZZ_JUMPREGISTER(0x80047224,ZZ_47214_10);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80048740,0x80048764,ZZ_48740);
ZZ_MARK_TARGET(0x80048764,0x800487A0,ZZ_48740_24);
ZZ_MARK_TARGET(0x800487A0,0x800487A8,ZZ_48740_60);
ZZ_MARK_TARGET(0x800487A8,0x800487E8,ZZ_48740_68);
ZZ_MARK_TARGET(0x800487E8,0x800487F8,ZZ_48740_A8);
ZZ_MARK_TARGET(0x800487F8,0x80048848,ZZ_48740_B8);
ZZ_MARK_TARGET(0x80048848,0x80048850,ZZ_48740_108);
ZZ_MARK_TARGET(0x80048850,0x80048858,ZZ_48740_110);
ZZ_MARK_TARGET(0x80048858,0x8004885C,ZZ_48740_118);
ZZ_MARK_TARGET(0x8004885C,0x8004888C,ZZ_48740_11C);
ZZ_MARK_TARGET(0x8004888C,0x800488AC,ZZ_48740_14C);
