#ifdef ZZ_INCLUDE_CODE
ZZ_366AC:
	SP -= 24;
	A0 = 0x1;
	EMU_Write32(SP + 16,RA); //+ 0x10
	RA = 0x800366C0; //ZZ_366AC_14
	A1 = 0x11F4;
	ZZ_CLOCKCYCLES(5,0x80011764);
	goto ZZ_11764;
ZZ_366AC_14:
	V1 = EMU_ReadU32(GP + 236); //+ 0xEC
	EMU_Write32(GP + 232,V0); //+ 0xE8
	V0 += 1780;
	AT = 0x80070000;
	EMU_Write32(AT - 12416,V0); //+ 0xFFFFCF80
	if (!V1)
	{
		ZZ_CLOCKCYCLES(7,0x800366EC);
		goto ZZ_366AC_40;
	}
	RA = 0x800366E4; //ZZ_366AC_38
	A0 = 0x10;
	ZZ_CLOCKCYCLES(9,0x800363C8);
	goto ZZ_363C8;
ZZ_366AC_38:
	ZZ_CLOCKCYCLES(2,0x800366F4);
	goto ZZ_366AC_48;
ZZ_366AC_40:
	RA = 0x800366F4; //ZZ_366AC_48
	A0 = 0x10;
	ZZ_CLOCKCYCLES(2,0x800363F0);
	goto ZZ_363F0;
ZZ_366AC_48:
	RA = 0x800366FC; //ZZ_366AC_50
	A0 = 0x4;
	ZZ_CLOCKCYCLES(2,0x80036668);
	goto ZZ_36668;
ZZ_366AC_50:
	RA = 0x80036704; //ZZ_366AC_58
	ZZ_CLOCKCYCLES(2,0x80036B58);
	goto ZZ_36B58;
ZZ_366AC_58:
	RA = EMU_ReadU32(SP + 16); //+ 0x10
	V0 = R0;
	ZZ_JUMPREGISTER_BEGIN(RA);
	SP += 24;
	ZZ_CLOCKCYCLES_JR(4);
	ZZ_JUMPREGISTER(0x8001635C,ZZ_16328_34);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x800366AC,ZZ_366AC);
ZZ_MARK(0x800366B0);
ZZ_MARK(0x800366B4);
ZZ_MARK(0x800366B8);
ZZ_MARK(0x800366BC);
ZZ_MARK_TARGET(0x800366C0,ZZ_366AC_14);
ZZ_MARK(0x800366C4);
ZZ_MARK(0x800366C8);
ZZ_MARK(0x800366CC);
ZZ_MARK(0x800366D0);
ZZ_MARK(0x800366D4);
ZZ_MARK(0x800366D8);
ZZ_MARK(0x800366DC);
ZZ_MARK(0x800366E0);
ZZ_MARK_TARGET(0x800366E4,ZZ_366AC_38);
ZZ_MARK(0x800366E8);
ZZ_MARK_TARGET(0x800366EC,ZZ_366AC_40);
ZZ_MARK(0x800366F0);
ZZ_MARK_TARGET(0x800366F4,ZZ_366AC_48);
ZZ_MARK(0x800366F8);
ZZ_MARK_TARGET(0x800366FC,ZZ_366AC_50);
ZZ_MARK(0x80036700);
ZZ_MARK_TARGET(0x80036704,ZZ_366AC_58);
ZZ_MARK(0x80036708);
ZZ_MARK(0x8003670C);
ZZ_MARK(0x80036710);
