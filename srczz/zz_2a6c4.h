#ifdef ZZ_INCLUDE_CODE
ZZ_2A6C4:
	SP -= 40;
	EMU_Write32(SP + 32,RA); //+ 0x20
	V0 = EMU_ReadU32(A2 + 4); //+ 0x4
	V1 = EMU_ReadU32(GP + 136); //+ 0x88
	T2 = A0;
	T0 = V0 + V1;
	V1 = EMU_ReadU32(A1 + 4); //+ 0x4
	T3 = EMU_ReadU32(SP + 60); //+ 0x3C
	A1 = EMU_ReadU32(SP + 56); //+ 0x38
	V1 = V1 - V0;
	if ((int32_t)V1 <= 0)
	{
		T1 = A3 + 4128;
		ZZ_CLOCKCYCLES(12,0x8002A6F8);
		goto ZZ_2A6C4_34;
	}
	T1 = A3 + 4128;
	T0 += V1;
	ZZ_CLOCKCYCLES(13,0x8002A6F8);
ZZ_2A6C4_34:
	V1 = 0xFFFF0000;
	V1 |= 0x6A00;
	EMU_SDivide(V1,A1);
	if (A1)
	{
		ZZ_CLOCKCYCLES(5,0x8002A710);
		goto ZZ_2A6C4_4C;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(6,0x8002A710);
ZZ_2A6C4_4C:
	AT = -1;
	if (A1 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x8002A728);
		goto ZZ_2A6C4_64;
	}
	AT = 0x80000000;
	if (V1 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x8002A728);
		goto ZZ_2A6C4_64;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x8002A728);
ZZ_2A6C4_64:
	V1 = LO;
	A0 = 0x9600;
	EMU_SDivide(A0,A1);
	if (A1)
	{
		ZZ_CLOCKCYCLES(6,0x8002A744);
		goto ZZ_2A6C4_80;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(7,0x8002A744);
ZZ_2A6C4_80:
	AT = -1;
	if (A1 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x8002A75C);
		goto ZZ_2A6C4_98;
	}
	AT = 0x80000000;
	if (A0 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x8002A75C);
		goto ZZ_2A6C4_98;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x8002A75C);
ZZ_2A6C4_98:
	A0 = LO;
	V0 = EMU_ReadU32(A2);
	V0 += V1;
	V0 += 3200;
	EMU_Write32(A3 + 4128,V0); //+ 0x1020
	V0 = EMU_ReadU32(A2 + 4); //+ 0x4
	V0 -= 19200;
	EMU_Write32(A3 + 4132,V0); //+ 0x1024
	V0 = EMU_ReadU32(A2 + 8); //+ 0x8
	V0 += V1;
	V0 += 3200;
	EMU_Write32(A3 + 4136,V0); //+ 0x1028
	V0 = EMU_ReadU32(A2);
	V0 += A0;
	V0 -= 3200;
	EMU_Write32(A3 + 4140,V0); //+ 0x102C
	V0 = EMU_ReadU32(T2 + 256); //+ 0x100
	V1 = 0x40000000;
	A0 = EMU_ReadU32(A2 + 4); //+ 0x4
	V0 &= V1;
	if (V0)
	{
		V0 = 0x20000;
		ZZ_CLOCKCYCLES(26,0x8002A7D8);
		goto ZZ_2A6C4_114;
	}
	V0 = 0x20000;
	V0 = EMU_ReadU32(T2 + 8); //+ 0x8
	V0 = EMU_ReadU32(V0 + 64); //+ 0x40
	A0 += V0;
	ZZ_CLOCKCYCLES(31,0x8002A7E0);
	goto ZZ_2A6C4_11C;
ZZ_2A6C4_114:
	V0 |= 0x9900;
	A0 += V0;
	ZZ_CLOCKCYCLES(2,0x8002A7E0);
ZZ_2A6C4_11C:
	V1 = 0x9600;
	EMU_SDivide(V1,A1);
	if (A1)
	{
		ZZ_CLOCKCYCLES(4,0x8002A7F4);
		goto ZZ_2A6C4_130;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(5,0x8002A7F4);
ZZ_2A6C4_130:
	AT = -1;
	if (A1 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x8002A80C);
		goto ZZ_2A6C4_148;
	}
	AT = 0x80000000;
	if (V1 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x8002A80C);
		goto ZZ_2A6C4_148;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x8002A80C);
ZZ_2A6C4_148:
	V1 = LO;
	EMU_Write32(T1 + 16,A0); //+ 0x10
	V0 = EMU_ReadU32(A2 + 8); //+ 0x8
	A0 = 0xC4650000;
	A0 |= 0x3601;
	A1 = A3;
	A2 = A1 + 4104;
	A3 = T1;
	V0 += V1;
	V0 -= 3200;
	EMU_Write32(T1 + 20,V0); //+ 0x14
	V0 = 0x80030000;
	V0 -= 23348;
	EMU_Write32(SP + 24,A0); //+ 0x18
	A0 = T2;
	EMU_Write32(SP + 16,T0); //+ 0x10
	EMU_Write32(SP + 20,T3); //+ 0x14
	RA = 0x8002A858; //ZZ_2A6C4_194
	EMU_Write32(SP + 28,V0); //+ 0x1C
	ZZ_CLOCKCYCLES(19,0x8003CFA4);
	goto ZZ_3CFA4;
ZZ_2A6C4_194:
	RA = EMU_ReadU32(SP + 32); //+ 0x20
	SP += 40;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(4);
	ZZ_JUMPREGISTER(0x8002B59C,ZZ_2B478_124);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8002A6C4,ZZ_2A6C4);
ZZ_MARK(0x8002A6C8);
ZZ_MARK(0x8002A6CC);
ZZ_MARK(0x8002A6D0);
ZZ_MARK(0x8002A6D4);
ZZ_MARK(0x8002A6D8);
ZZ_MARK(0x8002A6DC);
ZZ_MARK(0x8002A6E0);
ZZ_MARK(0x8002A6E4);
ZZ_MARK(0x8002A6E8);
ZZ_MARK(0x8002A6EC);
ZZ_MARK(0x8002A6F0);
ZZ_MARK(0x8002A6F4);
ZZ_MARK_TARGET(0x8002A6F8,ZZ_2A6C4_34);
ZZ_MARK(0x8002A6FC);
ZZ_MARK(0x8002A700);
ZZ_MARK(0x8002A704);
ZZ_MARK(0x8002A708);
ZZ_MARK(0x8002A70C);
ZZ_MARK_TARGET(0x8002A710,ZZ_2A6C4_4C);
ZZ_MARK(0x8002A714);
ZZ_MARK(0x8002A718);
ZZ_MARK(0x8002A71C);
ZZ_MARK(0x8002A720);
ZZ_MARK(0x8002A724);
ZZ_MARK_TARGET(0x8002A728,ZZ_2A6C4_64);
ZZ_MARK(0x8002A72C);
ZZ_MARK(0x8002A730);
ZZ_MARK(0x8002A734);
ZZ_MARK(0x8002A738);
ZZ_MARK(0x8002A73C);
ZZ_MARK(0x8002A740);
ZZ_MARK_TARGET(0x8002A744,ZZ_2A6C4_80);
ZZ_MARK(0x8002A748);
ZZ_MARK(0x8002A74C);
ZZ_MARK(0x8002A750);
ZZ_MARK(0x8002A754);
ZZ_MARK(0x8002A758);
ZZ_MARK_TARGET(0x8002A75C,ZZ_2A6C4_98);
ZZ_MARK(0x8002A760);
ZZ_MARK(0x8002A764);
ZZ_MARK(0x8002A768);
ZZ_MARK(0x8002A76C);
ZZ_MARK(0x8002A770);
ZZ_MARK(0x8002A774);
ZZ_MARK(0x8002A778);
ZZ_MARK(0x8002A77C);
ZZ_MARK(0x8002A780);
ZZ_MARK(0x8002A784);
ZZ_MARK(0x8002A788);
ZZ_MARK(0x8002A78C);
ZZ_MARK(0x8002A790);
ZZ_MARK(0x8002A794);
ZZ_MARK(0x8002A798);
ZZ_MARK(0x8002A79C);
ZZ_MARK(0x8002A7A0);
ZZ_MARK(0x8002A7A4);
ZZ_MARK(0x8002A7A8);
ZZ_MARK(0x8002A7AC);
ZZ_MARK(0x8002A7B0);
ZZ_MARK(0x8002A7B4);
ZZ_MARK(0x8002A7B8);
ZZ_MARK(0x8002A7BC);
ZZ_MARK(0x8002A7C0);
ZZ_MARK(0x8002A7C4);
ZZ_MARK(0x8002A7C8);
ZZ_MARK(0x8002A7CC);
ZZ_MARK(0x8002A7D0);
ZZ_MARK(0x8002A7D4);
ZZ_MARK_TARGET(0x8002A7D8,ZZ_2A6C4_114);
ZZ_MARK(0x8002A7DC);
ZZ_MARK_TARGET(0x8002A7E0,ZZ_2A6C4_11C);
ZZ_MARK(0x8002A7E4);
ZZ_MARK(0x8002A7E8);
ZZ_MARK(0x8002A7EC);
ZZ_MARK(0x8002A7F0);
ZZ_MARK_TARGET(0x8002A7F4,ZZ_2A6C4_130);
ZZ_MARK(0x8002A7F8);
ZZ_MARK(0x8002A7FC);
ZZ_MARK(0x8002A800);
ZZ_MARK(0x8002A804);
ZZ_MARK(0x8002A808);
ZZ_MARK_TARGET(0x8002A80C,ZZ_2A6C4_148);
ZZ_MARK(0x8002A810);
ZZ_MARK(0x8002A814);
ZZ_MARK(0x8002A818);
ZZ_MARK(0x8002A81C);
ZZ_MARK(0x8002A820);
ZZ_MARK(0x8002A824);
ZZ_MARK(0x8002A828);
ZZ_MARK(0x8002A82C);
ZZ_MARK(0x8002A830);
ZZ_MARK(0x8002A834);
ZZ_MARK(0x8002A838);
ZZ_MARK(0x8002A83C);
ZZ_MARK(0x8002A840);
ZZ_MARK(0x8002A844);
ZZ_MARK(0x8002A848);
ZZ_MARK(0x8002A84C);
ZZ_MARK(0x8002A850);
ZZ_MARK(0x8002A854);
ZZ_MARK_TARGET(0x8002A858,ZZ_2A6C4_194);
ZZ_MARK(0x8002A85C);
ZZ_MARK(0x8002A860);
ZZ_MARK(0x8002A864);
