#ifdef ZZ_INCLUDE_CODE
ZZ_32DA4:
	SP -= 32;
	EMU_Write32(SP + 16,S0); //+ 0x10
	S0 = A0;
	EMU_Write32(SP + 20,S1); //+ 0x14
	S1 = A1;
	EMU_Write32(SP + 24,RA); //+ 0x18
	A0 = EMU_ReadU32(S1);
	V0 = A0 & 0x1;
	if (V0)
	{
		ZZ_CLOCKCYCLES(11,0x80032DD4);
		goto ZZ_32DA4_30;
	}
	A0 = EMU_ReadU32(A0 + 4); //+ 0x4
	ZZ_CLOCKCYCLES(12,0x80032DD4);
ZZ_32DA4_30:
	RA = 0x80032DDC; //ZZ_32DA4_38
	ZZ_CLOCKCYCLES(2,0x800156A0);
	goto ZZ_156A0;
ZZ_32DA4_38:
	V1 = EMU_ReadU32(S0);
	A1 = -28673;
	V1 &= A1;
	EMU_Write32(S0,V1);
	V1 = EMU_ReadU32(S1);
	EMU_Write32(S0 + 20,V0); //+ 0x14
	if (!V0)
	{
		EMU_Write32(S0 + 12,V1); //+ 0xC
		ZZ_CLOCKCYCLES(8,0x80032E10);
		goto ZZ_32DA4_6C;
	}
	EMU_Write32(S0 + 12,V1); //+ 0xC
	V0 = EMU_ReadU32(S0);
	A0 = R0;
	V0 &= A1;
	V0 |= 0xA000;
	ZZ_CLOCKCYCLES(13,0x80032E68);
	goto ZZ_32DA4_C4;
ZZ_32DA4_6C:
	A0 = S1;
	A1 = R0;
	RA = 0x80032E20; //ZZ_32DA4_7C
	A2 = 0x1;
	ZZ_CLOCKCYCLES(4,0x80014364);
	goto ZZ_14364;
ZZ_32DA4_7C:
	A0 = V0;
	if (!A0)
	{
		V0 = (int32_t)A0 < -254;
		ZZ_CLOCKCYCLES(3,0x80032E54);
		goto ZZ_32DA4_B0;
	}
	V0 = (int32_t)A0 < -254;
	if (!V0)
	{
		V0 = -14;
		ZZ_CLOCKCYCLES(5,0x80032E70);
		goto ZZ_32DA4_CC;
	}
	V0 = -14;
	if (!A0)
	{
		V1 = 0xC0000000;
		ZZ_CLOCKCYCLES(7,0x80032E54);
		goto ZZ_32DA4_B0;
	}
	V1 = 0xC0000000;
	V1 |= 0x2;
	V0 = A0 & V1;
	if (V0 != V1)
	{
		V0 = A0 << 2;
		ZZ_CLOCKCYCLES(11,0x80032E54);
		goto ZZ_32DA4_B0;
	}
	V0 = A0 << 2;
	A0 = V0 >> 4;
	ZZ_CLOCKCYCLES(13,0x80032E6C);
	goto ZZ_32DA4_C8;
ZZ_32DA4_B0:
	V0 = EMU_ReadU32(S0);
	A0 = R0;
	V1 = -28673;
	V0 &= V1;
	V0 |= 0x9000;
	ZZ_CLOCKCYCLES(5,0x80032E68);
ZZ_32DA4_C4:
	EMU_Write32(S0,V0);
	ZZ_CLOCKCYCLES(1,0x80032E6C);
ZZ_32DA4_C8:
	V0 = A0;
	ZZ_CLOCKCYCLES(1,0x80032E70);
ZZ_32DA4_CC:
	RA = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 32;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(6);
	ZZ_JUMPREGISTER(0x80032F48,ZZ_32E88_C0);
	ZZ_JUMPREGISTER(0x80033CC8,ZZ_337BC_50C);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80032DA4,ZZ_32DA4);
ZZ_MARK(0x80032DA8);
ZZ_MARK(0x80032DAC);
ZZ_MARK(0x80032DB0);
ZZ_MARK(0x80032DB4);
ZZ_MARK(0x80032DB8);
ZZ_MARK(0x80032DBC);
ZZ_MARK(0x80032DC0);
ZZ_MARK(0x80032DC4);
ZZ_MARK(0x80032DC8);
ZZ_MARK(0x80032DCC);
ZZ_MARK(0x80032DD0);
ZZ_MARK_TARGET(0x80032DD4,ZZ_32DA4_30);
ZZ_MARK(0x80032DD8);
ZZ_MARK_TARGET(0x80032DDC,ZZ_32DA4_38);
ZZ_MARK(0x80032DE0);
ZZ_MARK(0x80032DE4);
ZZ_MARK(0x80032DE8);
ZZ_MARK(0x80032DEC);
ZZ_MARK(0x80032DF0);
ZZ_MARK(0x80032DF4);
ZZ_MARK(0x80032DF8);
ZZ_MARK(0x80032DFC);
ZZ_MARK(0x80032E00);
ZZ_MARK(0x80032E04);
ZZ_MARK(0x80032E08);
ZZ_MARK(0x80032E0C);
ZZ_MARK_TARGET(0x80032E10,ZZ_32DA4_6C);
ZZ_MARK(0x80032E14);
ZZ_MARK(0x80032E18);
ZZ_MARK(0x80032E1C);
ZZ_MARK_TARGET(0x80032E20,ZZ_32DA4_7C);
ZZ_MARK(0x80032E24);
ZZ_MARK(0x80032E28);
ZZ_MARK(0x80032E2C);
ZZ_MARK(0x80032E30);
ZZ_MARK(0x80032E34);
ZZ_MARK(0x80032E38);
ZZ_MARK(0x80032E3C);
ZZ_MARK(0x80032E40);
ZZ_MARK(0x80032E44);
ZZ_MARK(0x80032E48);
ZZ_MARK(0x80032E4C);
ZZ_MARK(0x80032E50);
ZZ_MARK_TARGET(0x80032E54,ZZ_32DA4_B0);
ZZ_MARK(0x80032E58);
ZZ_MARK(0x80032E5C);
ZZ_MARK(0x80032E60);
ZZ_MARK(0x80032E64);
ZZ_MARK_TARGET(0x80032E68,ZZ_32DA4_C4);
ZZ_MARK_TARGET(0x80032E6C,ZZ_32DA4_C8);
ZZ_MARK_TARGET(0x80032E70,ZZ_32DA4_CC);
ZZ_MARK(0x80032E74);
ZZ_MARK(0x80032E78);
ZZ_MARK(0x80032E7C);
ZZ_MARK(0x80032E80);
ZZ_MARK(0x80032E84);
