#ifdef ZZ_INCLUDE_CODE
ZZ_5A714:
	SP -= 24;
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 5432); //+ 0xFFFFEAC8
	A2 = R0;
	if ((int32_t)V1 <= 0)
	{
		EMU_Write32(SP + 16,RA); //+ 0x10
		ZZ_CLOCKCYCLES(6,0x8005A778);
		goto ZZ_5A714_64;
	}
	EMU_Write32(SP + 16,RA); //+ 0x10
	T1 = 0x40000000;
	V0 = 0x80000000;
	T0 = A0 | V0;
	A3 = V1;
	A1 = 0x80060000;
	A1 = EMU_ReadU32(A1 - 5424); //+ 0xFFFFEAD0
	ZZ_CLOCKCYCLES(13,0x8005A748);
ZZ_5A714_34:
	V1 = EMU_ReadU32(A1);
	V0 = V1 & T1;
	if (V0)
	{
		ZZ_CLOCKCYCLES(5,0x8005A778);
		goto ZZ_5A714_64;
	}
	if (V1 != A0)
	{
		A2 += 1;
		ZZ_CLOCKCYCLES(7,0x8005A76C);
		goto ZZ_5A714_58;
	}
	A2 += 1;
	EMU_Write32(A1,T0);
	ZZ_CLOCKCYCLES(9,0x8005A778);
	goto ZZ_5A714_64;
ZZ_5A714_58:
	V0 = (int32_t)A2 < (int32_t)A3;
	if (V0)
	{
		A1 += 8;
		ZZ_CLOCKCYCLES(3,0x8005A748);
		goto ZZ_5A714_34;
	}
	A1 += 8;
	ZZ_CLOCKCYCLES(3,0x8005A778);
ZZ_5A714_64:
	RA = 0x8005A780; //ZZ_5A714_6C
	ZZ_CLOCKCYCLES(2,0x8005A794);
	goto ZZ_5A794;
ZZ_5A714_6C:
	RA = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 24;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(4);
	ZZ_JUMPREGISTER(0x8005A6DC,ZZ_5A690_4C);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8005A714,ZZ_5A714);
ZZ_MARK(0x8005A718);
ZZ_MARK(0x8005A71C);
ZZ_MARK(0x8005A720);
ZZ_MARK(0x8005A724);
ZZ_MARK(0x8005A728);
ZZ_MARK(0x8005A72C);
ZZ_MARK(0x8005A730);
ZZ_MARK(0x8005A734);
ZZ_MARK(0x8005A738);
ZZ_MARK(0x8005A73C);
ZZ_MARK(0x8005A740);
ZZ_MARK(0x8005A744);
ZZ_MARK_TARGET(0x8005A748,ZZ_5A714_34);
ZZ_MARK(0x8005A74C);
ZZ_MARK(0x8005A750);
ZZ_MARK(0x8005A754);
ZZ_MARK(0x8005A758);
ZZ_MARK(0x8005A75C);
ZZ_MARK(0x8005A760);
ZZ_MARK(0x8005A764);
ZZ_MARK(0x8005A768);
ZZ_MARK_TARGET(0x8005A76C,ZZ_5A714_58);
ZZ_MARK(0x8005A770);
ZZ_MARK(0x8005A774);
ZZ_MARK_TARGET(0x8005A778,ZZ_5A714_64);
ZZ_MARK(0x8005A77C);
ZZ_MARK_TARGET(0x8005A780,ZZ_5A714_6C);
ZZ_MARK(0x8005A784);
ZZ_MARK(0x8005A788);
ZZ_MARK(0x8005A78C);
