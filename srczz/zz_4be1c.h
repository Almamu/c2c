#ifdef ZZ_INCLUDE_CODE
ZZ_4BE1C:
	SP -= 32;
	EMU_Write32(SP + 20,S1); //+ 0x14
	S1 = A0;
	V1 = S1 & 0x7;
	V0 = 3;
	EMU_Write32(SP + 24,RA); //+ 0x18
	if (V1 == V0)
	{
		EMU_Write32(SP + 16,S0); //+ 0x10
		ZZ_CLOCKCYCLES(8,0x8004BE6C);
		goto ZZ_4BE1C_50;
	}
	EMU_Write32(SP + 16,S0); //+ 0x10
	V0 = (int32_t)V1 < 4;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(11,0x8004BE58);
		goto ZZ_4BE1C_3C;
	}
	if (!V1)
	{
		ZZ_CLOCKCYCLES(13,0x8004BE6C);
		goto ZZ_4BE1C_50;
	}
	ZZ_CLOCKCYCLES(15,0x8004BF38);
	goto ZZ_4BE1C_11C;
ZZ_4BE1C_3C:
	V0 = 5;
	if (V1 == V0)
	{
		ZZ_CLOCKCYCLES(3,0x8004BE8C);
		goto ZZ_4BE1C_70;
	}
	ZZ_CLOCKCYCLES(5,0x8004BF38);
	goto ZZ_4BE1C_11C;
ZZ_4BE1C_50:
	A0 = 0x80010000;
	A0 += 3724;
	A1 = 0x80060000;
	A1 -= 8340;
	A2 = 0x80060000;
	A2 -= 8268;
	RA = 0x8004BE8C; //ZZ_4BE1C_70
	ZZ_CLOCKCYCLES(8,0x800494DC);
	goto ZZ_494DC;
ZZ_4BE1C_70:
	S0 = 0x80060000;
	S0 -= 8268;
	A0 = S0;
	A1 = R0;
	RA = 0x8004BEA4; //ZZ_4BE1C_88
	A2 = 128;
	ZZ_CLOCKCYCLES(6,0x8004EE84);
	goto ZZ_4EE84;
ZZ_4BE1C_88:
	RA = 0x8004BEAC; //ZZ_4BE1C_90
	ZZ_CLOCKCYCLES(2,0x8004A910);
	goto ZZ_4A910;
ZZ_4BE1C_90:
	V0 = 0xFF0000;
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 - 8276); //+ 0xFFFFDFAC
	V0 |= 0xFFFF;
	RA = 0x8004BEC4; //ZZ_4BE1C_A8
	A0 &= V0;
	ZZ_CLOCKCYCLES(6,0x8004EEB0);
	goto ZZ_4EEB0;
ZZ_4BE1C_A8:
	RA = 0x8004BECC; //ZZ_4BE1C_B0
	A0 = S1;
	ZZ_CLOCKCYCLES(2,0x8004E964);
	goto ZZ_4E964;
ZZ_4BE1C_B0:
	A0 = S0 + 16;
	V1 = 1;
	EMU_Write8(S0,V0);
	V0 &= 0xFF;
	V0 <<= 2;
	AT = 0x80060000;
	EMU_Write8(AT - 8267,V1); //+ 0xFFFFDFB5
	AT = 0x80060000;
	AT += V0;
	V1 = EMU_ReadU32(AT - 8140); //+ 0xFFFFE034
	A1 = -1;
	AT = 0x80060000;
	EMU_Write16(AT - 8264,V1); //+ 0xFFFFDFB8
	AT = 0x80060000;
	AT += V0;
	V0 = EMU_ReadU32(AT - 8120); //+ 0xFFFFE048
	AT = 0x80060000;
	EMU_Write16(AT - 8262,V0); //+ 0xFFFFDFBA
	RA = 0x8004BF1C; //ZZ_4BE1C_100
	A2 = 92;
	ZZ_CLOCKCYCLES(20,0x8004EE84);
	goto ZZ_4EE84;
ZZ_4BE1C_100:
	A0 = S0 + 108;
	A1 = -1;
	RA = 0x8004BF2C; //ZZ_4BE1C_110
	A2 = 20;
	ZZ_CLOCKCYCLES(4,0x8004EE84);
	goto ZZ_4EE84;
ZZ_4BE1C_110:
	V0 = EMU_ReadU8(S0);
	ZZ_CLOCKCYCLES(3,0x8004BF88);
	goto ZZ_4BE1C_16C;
ZZ_4BE1C_11C:
	V0 = 0x80060000;
	V0 = EMU_ReadU8(V0 - 8266); //+ 0xFFFFDFB6
	V0 = V0 < 2;
	if (V0)
	{
		ZZ_CLOCKCYCLES(6,0x8004BF6C);
		goto ZZ_4BE1C_150;
	}
	A0 = 0x80010000;
	A0 += 3756;
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 8272); //+ 0xFFFFDFB0
	ZZ_JUMPREGISTER_BEGIN(V0);
	RA = 0x8004BF6C; //ZZ_4BE1C_150
	A1 = S1;
	ZZ_CLOCKCYCLES_JR(13);
	// UNIMPLEMENTED JUMP-TO-REGISTER-AND-LINK (V0,8004BF64)
	ZZ_JUMPREGISTER_END();
ZZ_4BE1C_150:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 8276); //+ 0xFFFFDFAC
	V0 = EMU_ReadU32(V0 + 52); //+ 0x34
	ZZ_JUMPREGISTER_BEGIN(V0);
	RA = 0x8004BF88; //ZZ_4BE1C_16C
	A0 = 1;
	ZZ_CLOCKCYCLES_JR(7);
	// UNIMPLEMENTED JUMP-TO-REGISTER-AND-LINK (V0,8004BF80)
	ZZ_JUMPREGISTER_END();
ZZ_4BE1C_16C:
	RA = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 32;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(6);
	ZZ_JUMPREGISTER(0x80015908,ZZ_158C4_44);
	ZZ_JUMPREGISTER(0x80016204,ZZ_161D4_30);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8004BE1C,0x8004BE58,ZZ_4BE1C);
ZZ_MARK_TARGET(0x8004BE58,0x8004BE6C,ZZ_4BE1C_3C);
ZZ_MARK_TARGET(0x8004BE6C,0x8004BE8C,ZZ_4BE1C_50);
ZZ_MARK_TARGET(0x8004BE8C,0x8004BEA4,ZZ_4BE1C_70);
ZZ_MARK_TARGET(0x8004BEA4,0x8004BEAC,ZZ_4BE1C_88);
ZZ_MARK_TARGET(0x8004BEAC,0x8004BEC4,ZZ_4BE1C_90);
ZZ_MARK_TARGET(0x8004BEC4,0x8004BECC,ZZ_4BE1C_A8);
ZZ_MARK_TARGET(0x8004BECC,0x8004BF1C,ZZ_4BE1C_B0);
ZZ_MARK_TARGET(0x8004BF1C,0x8004BF2C,ZZ_4BE1C_100);
ZZ_MARK_TARGET(0x8004BF2C,0x8004BF38,ZZ_4BE1C_110);
ZZ_MARK_TARGET(0x8004BF38,0x8004BF6C,ZZ_4BE1C_11C);
ZZ_MARK_TARGET(0x8004BF6C,0x8004BF88,ZZ_4BE1C_150);
ZZ_MARK_TARGET(0x8004BF88,0x8004BFA0,ZZ_4BE1C_16C);
