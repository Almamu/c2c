#ifdef ZZ_INCLUDE_CODE
ZZ_245B0:
	SP -= 104;
	EMU_Write32(SP + 80,S4); //+ 0x50
	S4 = A0;
	EMU_Write32(SP + 76,S3); //+ 0x4C
	S3 = A1;
	EMU_Write32(SP + 64,S0); //+ 0x40
	S0 = A2;
	EMU_Write32(SP + 72,S2); //+ 0x48
	S2 = A3;
	EMU_Write32(SP + 92,S7); //+ 0x5C
	S7 = EMU_ReadU32(SP + 120); //+ 0x78
	A1 = SP + 56;
	A2 = SP + 60;
	EMU_Write32(SP + 96,RA); //+ 0x60
	EMU_Write32(SP + 88,S6); //+ 0x58
	EMU_Write32(SP + 84,S5); //+ 0x54
	RA = 0x800245F8; //ZZ_245B0_48
	EMU_Write32(SP + 68,S1); //+ 0x44
	ZZ_CLOCKCYCLES(18,0x80023D78);
	goto ZZ_23D78;
ZZ_245B0_48:
	if (!S0)
	{
		ZZ_CLOCKCYCLES(2,0x8002460C);
		goto ZZ_245B0_5C;
	}
	V0 = EMU_ReadU32(SP + 56); //+ 0x38
	EMU_Write32(S0,V0);
	ZZ_CLOCKCYCLES(5,0x8002460C);
ZZ_245B0_5C:
	if (!S2)
	{
		ZZ_CLOCKCYCLES(2,0x80024620);
		goto ZZ_245B0_70;
	}
	V0 = EMU_ReadU32(SP + 60); //+ 0x3C
	EMU_Write32(S2,V0);
	ZZ_CLOCKCYCLES(5,0x80024620);
ZZ_245B0_70:
	S0 = EMU_ReadU32(S4 + 4); //+ 0x4
	S2 = EMU_ReadU32(S4 + 8); //+ 0x8
	A1 = 0x29;
	A2 = R0;
	A3 = R0;
	S5 = 0x2;
	EMU_Write32(SP + 16,R0); //+ 0x10
	EMU_Write32(SP + 20,S5); //+ 0x14
	EMU_Write32(SP + 24,R0); //+ 0x18
	RA = 0x8002464C; //ZZ_245B0_9C
	A0 = S0;
	ZZ_CLOCKCYCLES(11,0x800324E0);
	goto ZZ_324E0;
ZZ_245B0_9C:
	RA = 0x80024654; //ZZ_245B0_A4
	A0 = V0;
	ZZ_CLOCKCYCLES(2,0x8002456C);
	goto ZZ_2456C;
ZZ_245B0_A4:
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 + 2924); //+ 0xB6C
	if (S0 != V1)
	{
		S6 = V0;
		ZZ_CLOCKCYCLES(5,0x800246B8);
		goto ZZ_245B0_108;
	}
	S6 = V0;
	V0 = EMU_ReadU32(S3);
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 + 2700); //+ 0xA8C
	V0 = V0 - V1;
	EMU_Write32(SP + 40,V0); //+ 0x28
	V0 = EMU_ReadU32(S3 + 4); //+ 0x4
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 + 2704); //+ 0xA90
	V0 = V0 - V1;
	EMU_Write32(SP + 44,V0); //+ 0x2C
	V0 = EMU_ReadU32(S3 + 8); //+ 0x8
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 + 2708); //+ 0xA94
	S1 = 0x80060000;
	S1 = EMU_ReadU32(S1 + 2752); //+ 0xAC0
	V0 = V0 - V1;
	EMU_Write32(SP + 48,V0); //+ 0x30
	ZZ_CLOCKCYCLES(25,0x800247BC);
	goto ZZ_245B0_20C;
ZZ_245B0_108:
	A0 = S0;
	A1 = 0x4B;
	A2 = R0;
	S2 = (int32_t)S2 >> 8;
	A3 = S2;
	EMU_Write32(SP + 16,R0); //+ 0x10
	EMU_Write32(SP + 20,S5); //+ 0x14
	EMU_Write32(SP + 24,R0); //+ 0x18
	EMU_Write32(SP + 28,R0); //+ 0x1C
	RA = 0x800246E4; //ZZ_245B0_134
	EMU_Write32(SP + 32,R0); //+ 0x20
	ZZ_CLOCKCYCLES(11,0x80031DF4);
	goto ZZ_31DF4;
ZZ_245B0_134:
	V1 = EMU_ReadU32(S0 + 4); //+ 0x4
	A2 = EMU_ReadU32(V1 + 20); //+ 0x14
	A1 = EMU_ReadS16(V0);
	V1 = EMU_ReadU32(A2);
	A0 = EMU_ReadU32(S3);
	V1 += A1;
	V1 <<= 8;
	A0 = A0 - V1;
	EMU_Write32(SP + 40,A0); //+ 0x28
	A1 = EMU_ReadS16(V0 + 2); //+ 0x2
	V1 = EMU_ReadU32(A2 + 4); //+ 0x4
	A0 = EMU_ReadU32(S3 + 4); //+ 0x4
	V1 += A1;
	V1 <<= 8;
	A0 = A0 - V1;
	EMU_Write32(SP + 44,A0); //+ 0x2C
	A0 = EMU_ReadS16(V0 + 4); //+ 0x4
	V0 = EMU_ReadU32(A2 + 8); //+ 0x8
	V1 = EMU_ReadU32(S3 + 8); //+ 0x8
	V0 += A0;
	V0 <<= 8;
	V1 = V1 - V0;
	if (S6 == S5)
	{
		EMU_Write32(SP + 48,V1); //+ 0x30
		ZZ_CLOCKCYCLES(25,0x800247BC);
		goto ZZ_245B0_20C;
	}
	EMU_Write32(SP + 48,V1); //+ 0x30
	A0 = S0;
	A1 = 0x173;
	A2 = R0;
	A3 = R0;
	EMU_Write32(SP + 16,R0); //+ 0x10
	EMU_Write32(SP + 20,S5); //+ 0x14
	RA = 0x80024768; //ZZ_245B0_1B8
	EMU_Write32(SP + 24,R0); //+ 0x18
	ZZ_CLOCKCYCLES(33,0x800324E0);
	goto ZZ_324E0;
ZZ_245B0_1B8:
	A0 = EMU_ReadU32(S4);
	V1 = EMU_ReadU32(A0 + 16); //+ 0x10
	A1 = EMU_ReadU32(V1 + 388); //+ 0x184
	V1 = V0 << 1;
	V1 += V0;
	V1 += A1;
	V1 <<= 2;
	A0 += V1;
	A0 = EMU_ReadU32(A0 + 20); //+ 0x14
	A2 = R0;
	A3 = S2 << 1;
	A1 = 0x4B;
	EMU_Write32(SP + 16,R0); //+ 0x10
	EMU_Write32(SP + 20,S5); //+ 0x14
	EMU_Write32(SP + 24,R0); //+ 0x18
	EMU_Write32(SP + 28,R0); //+ 0x1C
	RA = 0x800247B8; //ZZ_245B0_208
	EMU_Write32(SP + 32,R0); //+ 0x20
	ZZ_CLOCKCYCLES(20,0x80031DF4);
	goto ZZ_31DF4;
ZZ_245B0_208:
	S1 = EMU_ReadS16(V0 + 2); //+ 0x2
	ZZ_CLOCKCYCLES(1,0x800247BC);
ZZ_245B0_20C:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 30772); //+ 0x7834
	V1 = EMU_ReadU32(V0 + 8); //+ 0x8
	V0 = 0x3;
	if (V1 != V0)
	{
		V0 = 0x2;
		ZZ_CLOCKCYCLES(7,0x800247DC);
		goto ZZ_245B0_22C;
	}
	V0 = 0x2;
	S1 = R0;
	ZZ_CLOCKCYCLES(8,0x800247DC);
ZZ_245B0_22C:
	if (S6 != V0)
	{
		ZZ_CLOCKCYCLES(2,0x800247F0);
		goto ZZ_245B0_240;
	}
	V0 = EMU_ReadU32(SP + 44); //+ 0x2C
	V1 = -V0;
	ZZ_CLOCKCYCLES(5,0x80024878);
	goto ZZ_245B0_2C8;
ZZ_245B0_240:
	if (!S7)
	{
		S1 = -S1;
		ZZ_CLOCKCYCLES(2,0x800247FC);
		goto ZZ_245B0_24C;
	}
	S1 = -S1;
	EMU_Write32(S7,S1);
	ZZ_CLOCKCYCLES(3,0x800247FC);
ZZ_245B0_24C:
	RA = 0x80024804; //ZZ_245B0_254
	A0 = S1;
	ZZ_CLOCKCYCLES(2,0x8003D5F8);
	goto ZZ_3D5F8;
ZZ_245B0_254:
	A0 = S1;
	RA = 0x80024810; //ZZ_245B0_260
	S0 = V0;
	ZZ_CLOCKCYCLES(3,0x8003D584);
	goto ZZ_3D584;
ZZ_245B0_260:
	V1 = EMU_ReadU32(SP + 40); //+ 0x28
	A0 = EMU_ReadU32(SP + 48); //+ 0x30
	A2 = V0;
	V0 = 0x1;
	A1 = (int32_t)V1 >> 8;
	if (S6 != V0)
	{
		V1 = (int32_t)A0 >> 8;
		ZZ_CLOCKCYCLES(7,0x80024854);
		goto ZZ_245B0_2A4;
	}
	V1 = (int32_t)A0 >> 8;
	EMU_SMultiply(V1,A2);
	T1 = LO;
	EMU_SMultiply(A1,S0);
	V1 = (int32_t)T1 >> 4;
	V0 = LO;
	V0 = (int32_t)V0 >> 4;
	V1 += V0;
	ZZ_CLOCKCYCLES(17,0x80024878);
	goto ZZ_245B0_2C8;
ZZ_245B0_2A4:
	EMU_SMultiply(A1,A2);
	T1 = LO;
	EMU_SMultiply(V1,S0);
	V1 = (int32_t)T1 >> 4;
	V0 = LO;
	V0 = (int32_t)V0 >> 4;
	V1 = V1 - V0;
	ZZ_CLOCKCYCLES(9,0x80024878);
ZZ_245B0_2C8:
	V0 = EMU_ReadU32(SP + 60); //+ 0x3C
	V0 = (int32_t)V0 < (int32_t)V1;
	if (V0)
	{
		V0 = 0x1;
		ZZ_CLOCKCYCLES(5,0x8002489C);
		goto ZZ_245B0_2EC;
	}
	V0 = 0x1;
	V0 = EMU_ReadU32(SP + 56); //+ 0x38
	V0 = (int32_t)V1 < (int32_t)V0;
	V0 = -V0;
	ZZ_CLOCKCYCLES(9,0x8002489C);
ZZ_245B0_2EC:
	RA = EMU_ReadU32(SP + 96); //+ 0x60
	S7 = EMU_ReadU32(SP + 92); //+ 0x5C
	S6 = EMU_ReadU32(SP + 88); //+ 0x58
	S5 = EMU_ReadU32(SP + 84); //+ 0x54
	S4 = EMU_ReadU32(SP + 80); //+ 0x50
	S3 = EMU_ReadU32(SP + 76); //+ 0x4C
	S2 = EMU_ReadU32(SP + 72); //+ 0x48
	S1 = EMU_ReadU32(SP + 68); //+ 0x44
	S0 = EMU_ReadU32(SP + 64); //+ 0x40
	SP += 104;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(12);
	ZZ_JUMPREGISTER(0x800229EC,ZZ_22978_74);
	ZZ_JUMPREGISTER(0x80022890,ZZ_2281C_74);
	ZZ_JUMPREGISTER(0x8002260C,ZZ_22570_9C);
	ZZ_JUMPREGISTER(0x80022DD8,ZZ_22CD0_108);
	ZZ_JUMPREGISTER(0x80024BA0,ZZ_248CC_2D4);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x800245B0,0x800245F8,ZZ_245B0);
ZZ_MARK_TARGET(0x800245F8,0x8002460C,ZZ_245B0_48);
ZZ_MARK_TARGET(0x8002460C,0x80024620,ZZ_245B0_5C);
ZZ_MARK_TARGET(0x80024620,0x8002464C,ZZ_245B0_70);
ZZ_MARK_TARGET(0x8002464C,0x80024654,ZZ_245B0_9C);
ZZ_MARK_TARGET(0x80024654,0x800246B8,ZZ_245B0_A4);
ZZ_MARK_TARGET(0x800246B8,0x800246E4,ZZ_245B0_108);
ZZ_MARK_TARGET(0x800246E4,0x80024768,ZZ_245B0_134);
ZZ_MARK_TARGET(0x80024768,0x800247B8,ZZ_245B0_1B8);
ZZ_MARK_TARGET(0x800247B8,0x800247BC,ZZ_245B0_208);
ZZ_MARK_TARGET(0x800247BC,0x800247DC,ZZ_245B0_20C);
ZZ_MARK_TARGET(0x800247DC,0x800247F0,ZZ_245B0_22C);
ZZ_MARK_TARGET(0x800247F0,0x800247FC,ZZ_245B0_240);
ZZ_MARK_TARGET(0x800247FC,0x80024804,ZZ_245B0_24C);
ZZ_MARK_TARGET(0x80024804,0x80024810,ZZ_245B0_254);
ZZ_MARK_TARGET(0x80024810,0x80024854,ZZ_245B0_260);
ZZ_MARK_TARGET(0x80024854,0x80024878,ZZ_245B0_2A4);
ZZ_MARK_TARGET(0x80024878,0x8002489C,ZZ_245B0_2C8);
ZZ_MARK_TARGET(0x8002489C,0x800248CC,ZZ_245B0_2EC);
