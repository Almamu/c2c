#ifdef ZZ_INCLUDE_CODE
ZZ_312F8:
	V1 = EMU_ReadU32(A0);
	V0 = EMU_ReadU32(A1);
	A3 = V1 - V0;
	if ((int32_t)A3 >= 0)
	{
		SP -= 16;
		ZZ_CLOCKCYCLES(6,0x80031314);
		goto ZZ_312F8_1C;
	}
	SP -= 16;
	A3 = V0 - V1;
	ZZ_CLOCKCYCLES(7,0x80031314);
ZZ_312F8_1C:
	EMU_Write32(SP,A3);
	V1 = EMU_ReadU32(A0 + 4); //+ 0x4
	V0 = EMU_ReadU32(A1 + 4); //+ 0x4
	A2 = V1 - V0;
	if ((int32_t)A2 >= 0)
	{
		ZZ_CLOCKCYCLES(7,0x80031334);
		goto ZZ_312F8_3C;
	}
	A2 = V0 - V1;
	ZZ_CLOCKCYCLES(8,0x80031334);
ZZ_312F8_3C:
	EMU_Write32(SP + 4,A2); //+ 0x4
	A0 = EMU_ReadU32(A0 + 8); //+ 0x8
	A1 = EMU_ReadU32(A1 + 8); //+ 0x8
	V1 = A0 - A1;
	if ((int32_t)V1 >= 0)
	{
		V0 = (int32_t)A3 < (int32_t)A2;
		ZZ_CLOCKCYCLES(7,0x80031354);
		goto ZZ_312F8_5C;
	}
	V0 = (int32_t)A3 < (int32_t)A2;
	V1 = A1 - A0;
	ZZ_CLOCKCYCLES(8,0x80031354);
ZZ_312F8_5C:
	if (V0)
	{
		EMU_Write32(SP + 8,V1); //+ 0x8
		ZZ_CLOCKCYCLES(2,0x80031380);
		goto ZZ_312F8_88;
	}
	EMU_Write32(SP + 8,V1); //+ 0x8
	V0 = (int32_t)A3 < (int32_t)V1;
	if (V0)
	{
		V0 = A2 + V1;
		ZZ_CLOCKCYCLES(5,0x80031380);
		goto ZZ_312F8_88;
	}
	V0 = A2 + V1;
	if ((int32_t)V0 >= 0)
	{
		ZZ_CLOCKCYCLES(7,0x80031374);
		goto ZZ_312F8_7C;
	}
	V0 += 3;
	ZZ_CLOCKCYCLES(8,0x80031374);
ZZ_312F8_7C:
	V0 = (int32_t)V0 >> 2;
	V0 += A3;
	ZZ_CLOCKCYCLES(3,0x800313EC);
	goto ZZ_312F8_F4;
ZZ_312F8_88:
	A0 = EMU_ReadU32(SP + 4); //+ 0x4
	A1 = EMU_ReadU32(SP);
	V0 = (int32_t)A0 < (int32_t)A1;
	if (V0)
	{
		ZZ_CLOCKCYCLES(6,0x800313C4);
		goto ZZ_312F8_CC;
	}
	V1 = EMU_ReadU32(SP + 8); //+ 0x8
	V0 = (int32_t)A0 < (int32_t)V1;
	if (V0)
	{
		V0 = A1 + V1;
		ZZ_CLOCKCYCLES(11,0x800313C4);
		goto ZZ_312F8_CC;
	}
	V0 = A1 + V1;
	if ((int32_t)V0 >= 0)
	{
		ZZ_CLOCKCYCLES(13,0x800313B8);
		goto ZZ_312F8_C0;
	}
	V0 += 3;
	ZZ_CLOCKCYCLES(14,0x800313B8);
ZZ_312F8_C0:
	V0 = (int32_t)V0 >> 2;
	V0 += A0;
	ZZ_CLOCKCYCLES(3,0x800313EC);
	goto ZZ_312F8_F4;
ZZ_312F8_CC:
	V1 = EMU_ReadU32(SP + 4); //+ 0x4
	V0 = EMU_ReadU32(SP);
	V0 += V1;
	if ((int32_t)V0 >= 0)
	{
		ZZ_CLOCKCYCLES(6,0x800313E0);
		goto ZZ_312F8_E8;
	}
	V0 += 3;
	ZZ_CLOCKCYCLES(7,0x800313E0);
ZZ_312F8_E8:
	V1 = EMU_ReadU32(SP + 8); //+ 0x8
	V0 = (int32_t)V0 >> 2;
	V0 += V1;
	ZZ_CLOCKCYCLES(3,0x800313EC);
ZZ_312F8_F4:
	SP += 16;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(3);
	ZZ_JUMPREGISTER(0x80037A6C,ZZ_37930_13C);
	ZZ_JUMPREGISTER(0x8001A8B4,ZZ_1A848_6C);
	ZZ_JUMPREGISTER(0x8001A8C4,ZZ_1A848_7C);
	ZZ_JUMPREGISTER(0x80019008,ZZ_18FA4_64);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x800312F8,ZZ_312F8);
ZZ_MARK(0x800312FC);
ZZ_MARK(0x80031300);
ZZ_MARK(0x80031304);
ZZ_MARK(0x80031308);
ZZ_MARK(0x8003130C);
ZZ_MARK(0x80031310);
ZZ_MARK_TARGET(0x80031314,ZZ_312F8_1C);
ZZ_MARK(0x80031318);
ZZ_MARK(0x8003131C);
ZZ_MARK(0x80031320);
ZZ_MARK(0x80031324);
ZZ_MARK(0x80031328);
ZZ_MARK(0x8003132C);
ZZ_MARK(0x80031330);
ZZ_MARK_TARGET(0x80031334,ZZ_312F8_3C);
ZZ_MARK(0x80031338);
ZZ_MARK(0x8003133C);
ZZ_MARK(0x80031340);
ZZ_MARK(0x80031344);
ZZ_MARK(0x80031348);
ZZ_MARK(0x8003134C);
ZZ_MARK(0x80031350);
ZZ_MARK_TARGET(0x80031354,ZZ_312F8_5C);
ZZ_MARK(0x80031358);
ZZ_MARK(0x8003135C);
ZZ_MARK(0x80031360);
ZZ_MARK(0x80031364);
ZZ_MARK(0x80031368);
ZZ_MARK(0x8003136C);
ZZ_MARK(0x80031370);
ZZ_MARK_TARGET(0x80031374,ZZ_312F8_7C);
ZZ_MARK(0x80031378);
ZZ_MARK(0x8003137C);
ZZ_MARK_TARGET(0x80031380,ZZ_312F8_88);
ZZ_MARK(0x80031384);
ZZ_MARK(0x80031388);
ZZ_MARK(0x8003138C);
ZZ_MARK(0x80031390);
ZZ_MARK(0x80031394);
ZZ_MARK(0x80031398);
ZZ_MARK(0x8003139C);
ZZ_MARK(0x800313A0);
ZZ_MARK(0x800313A4);
ZZ_MARK(0x800313A8);
ZZ_MARK(0x800313AC);
ZZ_MARK(0x800313B0);
ZZ_MARK(0x800313B4);
ZZ_MARK_TARGET(0x800313B8,ZZ_312F8_C0);
ZZ_MARK(0x800313BC);
ZZ_MARK(0x800313C0);
ZZ_MARK_TARGET(0x800313C4,ZZ_312F8_CC);
ZZ_MARK(0x800313C8);
ZZ_MARK(0x800313CC);
ZZ_MARK(0x800313D0);
ZZ_MARK(0x800313D4);
ZZ_MARK(0x800313D8);
ZZ_MARK(0x800313DC);
ZZ_MARK_TARGET(0x800313E0,ZZ_312F8_E8);
ZZ_MARK(0x800313E4);
ZZ_MARK(0x800313E8);
ZZ_MARK_TARGET(0x800313EC,ZZ_312F8_F4);
ZZ_MARK(0x800313F0);
ZZ_MARK(0x800313F4);
