#ifdef ZZ_INCLUDE_CODE
ZZ_14C48:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 30760); //+ 0x7828
	V1 = A0 >> 13;
	V1 &= 0x3FC;
	V1 += V0;
	V1 = EMU_ReadU32(V1);
	V0 = EMU_ReadU32(V1 + 4); //+ 0x4
	if (V0 == A0)
	{
		ZZ_CLOCKCYCLES(11,0x80014C8C);
		goto ZZ_14C48_44;
	}
	V1 += 8;
	ZZ_CLOCKCYCLES(12,0x80014C78);
ZZ_14C48_30:
	V0 = EMU_ReadU32(V1 + 4); //+ 0x4
	if (V0 != A0)
	{
		V1 += 8;
		ZZ_CLOCKCYCLES(4,0x80014C78);
		goto ZZ_14C48_30;
	}
	V1 += 8;
	V1 -= 8;
	ZZ_CLOCKCYCLES(5,0x80014C8C);
ZZ_14C48_44:
	ZZ_JUMPREGISTER_BEGIN(RA);
	V0 = V1;
	ZZ_CLOCKCYCLES_JR(2);
	ZZ_JUMPREGISTER(0x800144F4,ZZ_144C4_30);
	ZZ_JUMPREGISTER(0x800143B8,ZZ_14364_54);
	ZZ_JUMPREGISTER(0x80014A84,ZZ_14A1C_68);
	ZZ_JUMPREGISTER(0x800128DC,ZZ_126BC_220);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80014C48,ZZ_14C48);
ZZ_MARK(0x80014C4C);
ZZ_MARK(0x80014C50);
ZZ_MARK(0x80014C54);
ZZ_MARK(0x80014C58);
ZZ_MARK(0x80014C5C);
ZZ_MARK(0x80014C60);
ZZ_MARK(0x80014C64);
ZZ_MARK(0x80014C68);
ZZ_MARK(0x80014C6C);
ZZ_MARK(0x80014C70);
ZZ_MARK(0x80014C74);
ZZ_MARK_TARGET(0x80014C78,ZZ_14C48_30);
ZZ_MARK(0x80014C7C);
ZZ_MARK(0x80014C80);
ZZ_MARK(0x80014C84);
ZZ_MARK(0x80014C88);
ZZ_MARK_TARGET(0x80014C8C,ZZ_14C48_44);
ZZ_MARK(0x80014C90);
