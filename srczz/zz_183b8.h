#ifdef ZZ_INCLUDE_CODE
ZZ_183B8:
	SP -= 80;
	EMU_Write32(SP + 68,S3); //+ 0x44
	S3 = A0;
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 + 2924); //+ 0xB6C
	A3 = 0x80060000;
	A3 = EMU_ReadU32(A3 + 2944); //+ 0xB80
	A1 = 0x27F;
	A2 = -1;
	V0 = 0x2;
	EMU_Write32(SP + 76,RA); //+ 0x4C
	EMU_Write32(SP + 72,S4); //+ 0x48
	EMU_Write32(SP + 64,S2); //+ 0x40
	EMU_Write32(SP + 60,S1); //+ 0x3C
	EMU_Write32(SP + 56,S0); //+ 0x38
	EMU_Write32(SP + 16,R0); //+ 0x10
	EMU_Write32(SP + 20,V0); //+ 0x14
	RA = 0x80018404; //ZZ_183B8_4C
	EMU_Write32(SP + 24,R0); //+ 0x18
	ZZ_CLOCKCYCLES(19,0x800324E0);
	goto ZZ_324E0;
ZZ_183B8_4C:
	V1 = EMU_ReadU32(S3);
	S1 = R0;
	if ((int32_t)V1 <= 0)
	{
		S4 = V0;
		ZZ_CLOCKCYCLES(4,0x80018534);
		goto ZZ_183B8_17C;
	}
	S4 = V0;
	S0 = S3;
	S2 = 0x4;
	ZZ_CLOCKCYCLES(6,0x8001841C);
ZZ_183B8_64:
	V0 = S4 & 0xFF;
	V0 = (int32_t)V0 >> S1;
	V0 &= 0x1;
	if (!V0)
	{
		A0 = S3 + S2;
		ZZ_CLOCKCYCLES(5,0x8001851C);
		goto ZZ_183B8_164;
	}
	A0 = S3 + S2;
	A1 = 0x1;
	RA = 0x8001843C; //ZZ_183B8_84
	A2 = R0;
	ZZ_CLOCKCYCLES(8,0x80014364);
	goto ZZ_14364;
ZZ_183B8_84:
	A1 = V0;
	A2 = EMU_ReadU32(A1 + 16); //+ 0x10
	V1 = EMU_ReadU32(A2 + 12); //+ 0xC
	V0 = 0x1;
	if (V1 != V0)
	{
		ZZ_CLOCKCYCLES(7,0x80018468);
		goto ZZ_183B8_B0;
	}
	EMU_Write32(S0 + 8,R0); //+ 0x8
	EMU_Write32(S0 + 12,R0); //+ 0xC
	EMU_Write32(S0 + 16,R0); //+ 0x10
	ZZ_CLOCKCYCLES(11,0x800184CC);
	goto ZZ_183B8_114;
ZZ_183B8_B0:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 2700); //+ 0xA8C
	A0 = EMU_ReadU32(A2);
	V0 = (int32_t)V0 >> 8;
	A0 = A0 - V0;
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 2704); //+ 0xA90
	EMU_Write32(SP + 32,A0); //+ 0x20
	V1 = EMU_ReadU32(A2 + 4); //+ 0x4
	V0 >>= 8;
	V1 = V1 - V0;
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 2708); //+ 0xA94
	EMU_Write32(SP + 36,V1); //+ 0x24
	V1 = EMU_ReadU32(A2 + 8); //+ 0x8
	V0 = (int32_t)V0 >> 8;
	V1 = V1 - V0;
	EMU_Write32(SP + 40,V1); //+ 0x28
	EMU_Write32(S0 + 8,A0); //+ 0x8
	V0 = EMU_ReadU32(SP + 36); //+ 0x24
	EMU_Write32(S0 + 12,V0); //+ 0xC
	V0 = EMU_ReadU32(SP + 40); //+ 0x28
	EMU_Write32(S0 + 16,V0); //+ 0x10
	ZZ_CLOCKCYCLES(25,0x800184CC);
ZZ_183B8_114:
	EMU_Write32(S0 + 20,A2); //+ 0x14
	V0 = EMU_ReadU32(A1 + 20); //+ 0x14
	EMU_Write32(S0 + 32,V0); //+ 0x20
	V0 = EMU_ReadU32(A1 + 24); //+ 0x18
	EMU_Write32(S0 + 24,V0); //+ 0x18
	V0 = EMU_ReadU32(A1 + 28); //+ 0x1C
	EMU_Write32(S0 + 28,V0); //+ 0x1C
	V0 = EMU_ReadU32(A1 + 32); //+ 0x20
	EMU_Write32(S0 + 44,V0); //+ 0x2C
	V0 = EMU_ReadU32(A1 + 36); //+ 0x24
	EMU_Write32(S0 + 36,V0); //+ 0x24
	V1 = EMU_ReadU32(A1 + 40); //+ 0x28
	V0 = A2 + 44;
	EMU_Write32(S0 + 48,V0); //+ 0x30
	EMU_Write32(S0 + 40,V1); //+ 0x28
	ZZ_CLOCKCYCLES(20,0x8001851C);
ZZ_183B8_164:
	V0 = EMU_ReadU32(S3);
	S0 += 48;
	S1 += 1;
	V0 = (int32_t)S1 < (int32_t)V0;
	if (V0)
	{
		S2 += 48;
		ZZ_CLOCKCYCLES(6,0x8001841C);
		goto ZZ_183B8_64;
	}
	S2 += 48;
	ZZ_CLOCKCYCLES(6,0x80018534);
ZZ_183B8_17C:
	RA = EMU_ReadU32(SP + 76); //+ 0x4C
	S4 = EMU_ReadU32(SP + 72); //+ 0x48
	S3 = EMU_ReadU32(SP + 68); //+ 0x44
	S2 = EMU_ReadU32(SP + 64); //+ 0x40
	S1 = EMU_ReadU32(SP + 60); //+ 0x3C
	S0 = EMU_ReadU32(SP + 56); //+ 0x38
	SP += 80;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(9);
	ZZ_JUMPREGISTER(0x8001826C,ZZ_17CE8_584);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x800183B8,ZZ_183B8);
ZZ_MARK(0x800183BC);
ZZ_MARK(0x800183C0);
ZZ_MARK(0x800183C4);
ZZ_MARK(0x800183C8);
ZZ_MARK(0x800183CC);
ZZ_MARK(0x800183D0);
ZZ_MARK(0x800183D4);
ZZ_MARK(0x800183D8);
ZZ_MARK(0x800183DC);
ZZ_MARK(0x800183E0);
ZZ_MARK(0x800183E4);
ZZ_MARK(0x800183E8);
ZZ_MARK(0x800183EC);
ZZ_MARK(0x800183F0);
ZZ_MARK(0x800183F4);
ZZ_MARK(0x800183F8);
ZZ_MARK(0x800183FC);
ZZ_MARK(0x80018400);
ZZ_MARK_TARGET(0x80018404,ZZ_183B8_4C);
ZZ_MARK(0x80018408);
ZZ_MARK(0x8001840C);
ZZ_MARK(0x80018410);
ZZ_MARK(0x80018414);
ZZ_MARK(0x80018418);
ZZ_MARK_TARGET(0x8001841C,ZZ_183B8_64);
ZZ_MARK(0x80018420);
ZZ_MARK(0x80018424);
ZZ_MARK(0x80018428);
ZZ_MARK(0x8001842C);
ZZ_MARK(0x80018430);
ZZ_MARK(0x80018434);
ZZ_MARK(0x80018438);
ZZ_MARK_TARGET(0x8001843C,ZZ_183B8_84);
ZZ_MARK(0x80018440);
ZZ_MARK(0x80018444);
ZZ_MARK(0x80018448);
ZZ_MARK(0x8001844C);
ZZ_MARK(0x80018450);
ZZ_MARK(0x80018454);
ZZ_MARK(0x80018458);
ZZ_MARK(0x8001845C);
ZZ_MARK(0x80018460);
ZZ_MARK(0x80018464);
ZZ_MARK_TARGET(0x80018468,ZZ_183B8_B0);
ZZ_MARK(0x8001846C);
ZZ_MARK(0x80018470);
ZZ_MARK(0x80018474);
ZZ_MARK(0x80018478);
ZZ_MARK(0x8001847C);
ZZ_MARK(0x80018480);
ZZ_MARK(0x80018484);
ZZ_MARK(0x80018488);
ZZ_MARK(0x8001848C);
ZZ_MARK(0x80018490);
ZZ_MARK(0x80018494);
ZZ_MARK(0x80018498);
ZZ_MARK(0x8001849C);
ZZ_MARK(0x800184A0);
ZZ_MARK(0x800184A4);
ZZ_MARK(0x800184A8);
ZZ_MARK(0x800184AC);
ZZ_MARK(0x800184B0);
ZZ_MARK(0x800184B4);
ZZ_MARK(0x800184B8);
ZZ_MARK(0x800184BC);
ZZ_MARK(0x800184C0);
ZZ_MARK(0x800184C4);
ZZ_MARK(0x800184C8);
ZZ_MARK_TARGET(0x800184CC,ZZ_183B8_114);
ZZ_MARK(0x800184D0);
ZZ_MARK(0x800184D4);
ZZ_MARK(0x800184D8);
ZZ_MARK(0x800184DC);
ZZ_MARK(0x800184E0);
ZZ_MARK(0x800184E4);
ZZ_MARK(0x800184E8);
ZZ_MARK(0x800184EC);
ZZ_MARK(0x800184F0);
ZZ_MARK(0x800184F4);
ZZ_MARK(0x800184F8);
ZZ_MARK(0x800184FC);
ZZ_MARK(0x80018500);
ZZ_MARK(0x80018504);
ZZ_MARK(0x80018508);
ZZ_MARK(0x8001850C);
ZZ_MARK(0x80018510);
ZZ_MARK(0x80018514);
ZZ_MARK(0x80018518);
ZZ_MARK_TARGET(0x8001851C,ZZ_183B8_164);
ZZ_MARK(0x80018520);
ZZ_MARK(0x80018524);
ZZ_MARK(0x80018528);
ZZ_MARK(0x8001852C);
ZZ_MARK(0x80018530);
ZZ_MARK_TARGET(0x80018534,ZZ_183B8_17C);
ZZ_MARK(0x80018538);
ZZ_MARK(0x8001853C);
ZZ_MARK(0x80018540);
ZZ_MARK(0x80018544);
ZZ_MARK(0x80018548);
ZZ_MARK(0x8001854C);
ZZ_MARK(0x80018550);
ZZ_MARK(0x80018554);
