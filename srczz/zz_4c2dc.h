#ifdef ZZ_INCLUDE_CODE
ZZ_4C2DC:
	V0 = 0x80060000;
	V0 = EMU_ReadU8(V0 - 8266); //+ 0xFFFFDFB6
	SP -= 24;
	EMU_Write32(SP + 16,S0); //+ 0x10
	S0 = A0;
	V0 = V0 < 2;
	if (V0)
	{
		EMU_Write32(SP + 20,RA); //+ 0x14
		ZZ_CLOCKCYCLES(8,0x8004C318);
		goto ZZ_4C2DC_3C;
	}
	EMU_Write32(SP + 20,RA); //+ 0x14
	A0 = 0x80010000;
	A0 += 3912;
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 8272); //+ 0xFFFFDFB0
	ZZ_JUMPREGISTER_BEGIN(V0);
	RA = 0x8004C318; //ZZ_4C2DC_3C
	A1 = S0;
	ZZ_CLOCKCYCLES_JR(15);
	// UNIMPLEMENTED JUMP-TO-REGISTER-AND-LINK (V0,8004C310)
	ZZ_JUMPREGISTER_END();
ZZ_4C2DC_3C:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 8276); //+ 0xFFFFDFAC
	V0 = EMU_ReadU32(V0 + 60); //+ 0x3C
	ZZ_JUMPREGISTER_BEGIN(V0);
	RA = 0x8004C334; //ZZ_4C2DC_58
	A0 = S0;
	ZZ_CLOCKCYCLES_JR(7);
	// UNIMPLEMENTED JUMP-TO-REGISTER-AND-LINK (V0,8004C32C)
	ZZ_JUMPREGISTER_END();
ZZ_4C2DC_58:
	RA = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 24;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(5);
	ZZ_JUMPREGISTER(0x8001645C,ZZ_1642C_30);
	ZZ_JUMPREGISTER(0x800178F8,ZZ_17800_F8);
	ZZ_JUMPREGISTER(0x80017960,ZZ_17800_160);
	ZZ_JUMPREGISTER(0x80017A18,ZZ_17800_218);
	ZZ_JUMPREGISTER(0x80017A80,ZZ_17800_280);
	ZZ_JUMPREGISTER(0x8002729C,ZZ_27168_134);
	ZZ_JUMPREGISTER(0x800168E4,ZZ_1658C_358);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8004C2DC,ZZ_4C2DC);
ZZ_MARK(0x8004C2E0);
ZZ_MARK(0x8004C2E4);
ZZ_MARK(0x8004C2E8);
ZZ_MARK(0x8004C2EC);
ZZ_MARK(0x8004C2F0);
ZZ_MARK(0x8004C2F4);
ZZ_MARK(0x8004C2F8);
ZZ_MARK(0x8004C2FC);
ZZ_MARK(0x8004C300);
ZZ_MARK(0x8004C304);
ZZ_MARK(0x8004C308);
ZZ_MARK(0x8004C30C);
ZZ_MARK(0x8004C310);
ZZ_MARK(0x8004C314);
ZZ_MARK_TARGET(0x8004C318,ZZ_4C2DC_3C);
ZZ_MARK(0x8004C31C);
ZZ_MARK(0x8004C320);
ZZ_MARK(0x8004C324);
ZZ_MARK(0x8004C328);
ZZ_MARK(0x8004C32C);
ZZ_MARK(0x8004C330);
ZZ_MARK_TARGET(0x8004C334,ZZ_4C2DC_58);
ZZ_MARK(0x8004C338);
ZZ_MARK(0x8004C33C);
ZZ_MARK(0x8004C340);
ZZ_MARK(0x8004C344);
