#ifdef ZZ_INCLUDE_CODE
ZZ_27A1C:
	V0 = 0x10;
	if (A2 == V0)
	{
		T4 = A0;
		ZZ_CLOCKCYCLES(3,0x80027A60);
		goto ZZ_27A1C_44;
	}
	T4 = A0;
	V0 = (int32_t)A2 < 17;
	if (!V0)
	{
		V0 = 0x4;
		ZZ_CLOCKCYCLES(6,0x80027A44);
		goto ZZ_27A1C_28;
	}
	V0 = 0x4;
	if (A2 == V0)
	{
		T6 = (int32_t)T4 >> 1;
		ZZ_CLOCKCYCLES(8,0x80027A58);
		goto ZZ_27A1C_3C;
	}
	T6 = (int32_t)T4 >> 1;
	T6 = T4;
	ZZ_CLOCKCYCLES(10,0x80027A78);
	goto ZZ_27A1C_5C;
ZZ_27A1C_28:
	V0 = 0x18;
	if (A2 == V0)
	{
		V0 = T4 << 1;
		ZZ_CLOCKCYCLES(3,0x80027A6C);
		goto ZZ_27A1C_50;
	}
	V0 = T4 << 1;
	T6 = T4;
	ZZ_CLOCKCYCLES(5,0x80027A78);
	goto ZZ_27A1C_5C;
ZZ_27A1C_3C:
	T5 = 0x20;
	ZZ_CLOCKCYCLES(2,0x80027A7C);
	goto ZZ_27A1C_60;
ZZ_27A1C_44:
	T6 = T4 << 1;
	T5 = R0;
	ZZ_CLOCKCYCLES(3,0x80027A7C);
	goto ZZ_27A1C_60;
ZZ_27A1C_50:
	T6 = V0 + T4;
	T5 = R0;
	ZZ_CLOCKCYCLES(3,0x80027A7C);
	goto ZZ_27A1C_60;
ZZ_27A1C_5C:
	T5 = 0x200;
	ZZ_CLOCKCYCLES(1,0x80027A7C);
ZZ_27A1C_60:
	V0 = 0x80070000;
	V0 -= 27184;
	T0 = EMU_ReadU32(V0);
	V1 = R0;
	T2 = V0 - 4;
	A0 = EMU_ReadU32(V0 - 4); //+ 0xFFFFFFFC
	EMU_SMultiply(A1,T6);
	T7 = LO;
	ZZ_CLOCKCYCLES(8,0x80027A9C);
ZZ_27A1C_80:
	V0 = (int32_t)V1 < (int32_t)A0;
	if (!V0)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(3,0x80027B64);
		goto ZZ_27A1C_148;
	}
	V0 = R0;
	V0 = EMU_ReadU32(T0 + 8); //+ 0x8
	if (!V0)
	{
		V1 += 1;
		ZZ_CLOCKCYCLES(7,0x80027AC0);
		goto ZZ_27A1C_A4;
	}
	V1 += 1;
	T0 += 84;
	ZZ_CLOCKCYCLES(9,0x80027A9C);
	goto ZZ_27A1C_80;
ZZ_27A1C_A4:
	V0 = T7 + 15;
	A0 = -16;
	T3 = V0 & A0;
	V1 = EMU_ReadU32(T2 + 12); //+ 0xC
	V0 = T5 + 15;
	V0 &= A0;
	T1 = T3 + V0;
	V1 = V1 < T1;
	if (V1)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(10,0x80027B64);
		goto ZZ_27A1C_148;
	}
	V0 = R0;
	V0 = 0x1;
	EMU_Write32(T0 + 8,V0); //+ 0x8
	V0 = EMU_ReadU32(T2 + 16); //+ 0x10
	EMU_Write32(T0 + 16,T1); //+ 0x10
	EMU_Write32(T0 + 52,V0); //+ 0x34
	V0 += T3;
	EMU_Write32(T0 + 56,V0); //+ 0x38
	V0 = EMU_ReadU32(T2 + 16); //+ 0x10
	V1 = EMU_ReadU32(T2 + 12); //+ 0xC
	A0 = EMU_ReadU32(T2 + 20); //+ 0x14
	V0 += T1;
	V1 = V1 - T1;
	EMU_Write32(T2 + 16,V0); //+ 0x10
	EMU_Write32(T2 + 12,V1); //+ 0xC
	EMU_Write32(T0 + 60,A0); //+ 0x3C
	V0 = EMU_ReadU32(T2 + 24); //+ 0x18
	EMU_Write32(T0 + 64,V0); //+ 0x40
	V0 = EMU_ReadU32(T2 + 28); //+ 0x1C
	EMU_Write32(T0 + 68,V0); //+ 0x44
	V1 = EMU_ReadU32(T2 + 32); //+ 0x20
	V0 = T0;
	EMU_Write32(V0 + 24,T4); //+ 0x18
	EMU_Write32(V0 + 28,A1); //+ 0x1C
	EMU_Write32(V0 + 32,A2); //+ 0x20
	EMU_Write32(V0 + 36,A3); //+ 0x24
	EMU_Write32(V0 + 40,T6); //+ 0x28
	EMU_Write32(V0 + 44,T7); //+ 0x2C
	EMU_Write32(V0 + 48,T5); //+ 0x30
	EMU_Write32(V0 + 72,V1); //+ 0x48
	ZZ_CLOCKCYCLES(41,0x80027B64);
ZZ_27A1C_148:
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(2);
	ZZ_JUMPREGISTER(0x800279B0,ZZ_278D8_D8);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80027A1C,ZZ_27A1C);
ZZ_MARK(0x80027A20);
ZZ_MARK(0x80027A24);
ZZ_MARK(0x80027A28);
ZZ_MARK(0x80027A2C);
ZZ_MARK(0x80027A30);
ZZ_MARK(0x80027A34);
ZZ_MARK(0x80027A38);
ZZ_MARK(0x80027A3C);
ZZ_MARK(0x80027A40);
ZZ_MARK_TARGET(0x80027A44,ZZ_27A1C_28);
ZZ_MARK(0x80027A48);
ZZ_MARK(0x80027A4C);
ZZ_MARK(0x80027A50);
ZZ_MARK(0x80027A54);
ZZ_MARK_TARGET(0x80027A58,ZZ_27A1C_3C);
ZZ_MARK(0x80027A5C);
ZZ_MARK_TARGET(0x80027A60,ZZ_27A1C_44);
ZZ_MARK(0x80027A64);
ZZ_MARK(0x80027A68);
ZZ_MARK_TARGET(0x80027A6C,ZZ_27A1C_50);
ZZ_MARK(0x80027A70);
ZZ_MARK(0x80027A74);
ZZ_MARK_TARGET(0x80027A78,ZZ_27A1C_5C);
ZZ_MARK_TARGET(0x80027A7C,ZZ_27A1C_60);
ZZ_MARK(0x80027A80);
ZZ_MARK(0x80027A84);
ZZ_MARK(0x80027A88);
ZZ_MARK(0x80027A8C);
ZZ_MARK(0x80027A90);
ZZ_MARK(0x80027A94);
ZZ_MARK(0x80027A98);
ZZ_MARK_TARGET(0x80027A9C,ZZ_27A1C_80);
ZZ_MARK(0x80027AA0);
ZZ_MARK(0x80027AA4);
ZZ_MARK(0x80027AA8);
ZZ_MARK(0x80027AAC);
ZZ_MARK(0x80027AB0);
ZZ_MARK(0x80027AB4);
ZZ_MARK(0x80027AB8);
ZZ_MARK(0x80027ABC);
ZZ_MARK_TARGET(0x80027AC0,ZZ_27A1C_A4);
ZZ_MARK(0x80027AC4);
ZZ_MARK(0x80027AC8);
ZZ_MARK(0x80027ACC);
ZZ_MARK(0x80027AD0);
ZZ_MARK(0x80027AD4);
ZZ_MARK(0x80027AD8);
ZZ_MARK(0x80027ADC);
ZZ_MARK(0x80027AE0);
ZZ_MARK(0x80027AE4);
ZZ_MARK(0x80027AE8);
ZZ_MARK(0x80027AEC);
ZZ_MARK(0x80027AF0);
ZZ_MARK(0x80027AF4);
ZZ_MARK(0x80027AF8);
ZZ_MARK(0x80027AFC);
ZZ_MARK(0x80027B00);
ZZ_MARK(0x80027B04);
ZZ_MARK(0x80027B08);
ZZ_MARK(0x80027B0C);
ZZ_MARK(0x80027B10);
ZZ_MARK(0x80027B14);
ZZ_MARK(0x80027B18);
ZZ_MARK(0x80027B1C);
ZZ_MARK(0x80027B20);
ZZ_MARK(0x80027B24);
ZZ_MARK(0x80027B28);
ZZ_MARK(0x80027B2C);
ZZ_MARK(0x80027B30);
ZZ_MARK(0x80027B34);
ZZ_MARK(0x80027B38);
ZZ_MARK(0x80027B3C);
ZZ_MARK(0x80027B40);
ZZ_MARK(0x80027B44);
ZZ_MARK(0x80027B48);
ZZ_MARK(0x80027B4C);
ZZ_MARK(0x80027B50);
ZZ_MARK(0x80027B54);
ZZ_MARK(0x80027B58);
ZZ_MARK(0x80027B5C);
ZZ_MARK(0x80027B60);
ZZ_MARK_TARGET(0x80027B64,ZZ_27A1C_148);
ZZ_MARK(0x80027B68);
