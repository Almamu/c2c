#ifdef ZZ_INCLUDE_CODE
ZZ_1C7C0:
	V1 = EMU_ReadU32(A0 + 196); //+ 0xC4
	V0 = V1 + 8;
	EMU_Write32(A0 + 188,V0); //+ 0xBC
	A3 = EMU_ReadU32(V1 + 8); //+ 0x8
	T0 = A3 >> 16;
	if (T0)
	{
		V0 = V1 + 4;
		ZZ_CLOCKCYCLES(9,0x8001C7EC);
		goto ZZ_1C7C0_2C;
	}
	V0 = V1 + 4;
	V0 = -25;
	ZZ_CLOCKCYCLES(11,0x8001C848);
	goto ZZ_1C7C0_88;
ZZ_1C7C0_2C:
	EMU_Write32(A0 + 188,V0); //+ 0xBC
	V0 = EMU_ReadU32(V1 + 4); //+ 0x4
	V1 = EMU_ReadU32(A0 + 188); //+ 0xBC
	EMU_Write32(A0 + 192,V0); //+ 0xC0
	V0 = V1 - 4;
	EMU_Write32(A0 + 188,V0); //+ 0xBC
	A2 = EMU_ReadU32(V1 - 4); //+ 0xFFFFFFFC
	if (!A1)
	{
		V1 = 0xFFFF0000;
		ZZ_CLOCKCYCLES(9,0x8001C828);
		goto ZZ_1C7C0_68;
	}
	V1 = 0xFFFF0000;
	V0 = EMU_ReadU32(A1);
	V0 &= V1;
	V1 = A2 & 0xFFFF;
	V0 |= V1;
	EMU_Write32(A1,V0);
	ZZ_CLOCKCYCLES(15,0x8001C828);
ZZ_1C7C0_68:
	V0 = -255;
	V1 = A3 & 0xFFFF;
	V1 += 64;
	V1 += A0;
	EMU_Write32(A0 + 188,V1); //+ 0xBC
	V1 = T0 + 64;
	V1 += A0;
	EMU_Write32(A0 + 196,V1); //+ 0xC4
	ZZ_CLOCKCYCLES(8,0x8001C848);
ZZ_1C7C0_88:
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(2);
	ZZ_JUMPREGISTER(0x80039BD8,ZZ_39AB4_124);
	ZZ_JUMPREGISTER(0x80039C3C,ZZ_39AB4_188);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8001C7C0,ZZ_1C7C0);
ZZ_MARK(0x8001C7C4);
ZZ_MARK(0x8001C7C8);
ZZ_MARK(0x8001C7CC);
ZZ_MARK(0x8001C7D0);
ZZ_MARK(0x8001C7D4);
ZZ_MARK(0x8001C7D8);
ZZ_MARK(0x8001C7DC);
ZZ_MARK(0x8001C7E0);
ZZ_MARK(0x8001C7E4);
ZZ_MARK(0x8001C7E8);
ZZ_MARK_TARGET(0x8001C7EC,ZZ_1C7C0_2C);
ZZ_MARK(0x8001C7F0);
ZZ_MARK(0x8001C7F4);
ZZ_MARK(0x8001C7F8);
ZZ_MARK(0x8001C7FC);
ZZ_MARK(0x8001C800);
ZZ_MARK(0x8001C804);
ZZ_MARK(0x8001C808);
ZZ_MARK(0x8001C80C);
ZZ_MARK(0x8001C810);
ZZ_MARK(0x8001C814);
ZZ_MARK(0x8001C818);
ZZ_MARK(0x8001C81C);
ZZ_MARK(0x8001C820);
ZZ_MARK(0x8001C824);
ZZ_MARK_TARGET(0x8001C828,ZZ_1C7C0_68);
ZZ_MARK(0x8001C82C);
ZZ_MARK(0x8001C830);
ZZ_MARK(0x8001C834);
ZZ_MARK(0x8001C838);
ZZ_MARK(0x8001C83C);
ZZ_MARK(0x8001C840);
ZZ_MARK(0x8001C844);
ZZ_MARK_TARGET(0x8001C848,ZZ_1C7C0_88);
ZZ_MARK(0x8001C84C);
