#ifdef ZZ_INCLUDE_CODE
ZZ_52B90:
	A0 <<= 16;
	A0 = (int32_t)A0 >> 14;
	A1 <<= 16;
	A1 = (int32_t)A1 >> 16;
	V0 = A1 << 1;
	V0 += A1;
	V0 <<= 2;
	V0 = V0 - A1;
	AT = 0x80070000;
	AT += A0;
	V1 = EMU_ReadU32(AT - 15268); //+ 0xFFFFC45C
	V0 <<= 4;
	A0 = V1 + V0;
	V1 = EMU_ReadU32(A0 + 152); //+ 0x98
	V0 = V1 & 0x4;
	if (V0)
	{
		A1 = A2;
		ZZ_CLOCKCYCLES(18,0x80052C80);
		goto ZZ_52B90_F0;
	}
	A1 = A2;
	V0 = V1 & 0x100;
	if (V0)
	{
		V0 = A2 << 16;
		ZZ_CLOCKCYCLES(21,0x80052C80);
		goto ZZ_52B90_F0;
	}
	V0 = A2 << 16;
	V0 = (int32_t)V0 >> 16;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(24,0x80052C80);
		goto ZZ_52B90_F0;
	}
	if ((int32_t)V0 >= 0)
	{
		V1 = V0;
		ZZ_CLOCKCYCLES(26,0x80052BFC);
		goto ZZ_52B90_6C;
	}
	V1 = V0;
	V1 = -V1;
	ZZ_CLOCKCYCLES(27,0x80052BFC);
ZZ_52B90_6C:
	V0 = (int32_t)A3 < (int32_t)V1;
	EMU_Write16(A0 + 72,A1); //+ 0x48
	EMU_Write32(A0 + 156,A3); //+ 0x9C
	EMU_Write16(A0 + 74,A1); //+ 0x4A
	if (V0)
	{
		EMU_Write32(A0 + 160,A3); //+ 0xA0
		ZZ_CLOCKCYCLES(6,0x80052C48);
		goto ZZ_52B90_B8;
	}
	EMU_Write32(A0 + 160,A3); //+ 0xA0
	EMU_SDivide(A3,V1);
	if (V1)
	{
		ZZ_CLOCKCYCLES(9,0x80052C24);
		goto ZZ_52B90_94;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(10,0x80052C24);
ZZ_52B90_94:
	AT = -1;
	if (V1 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x80052C3C);
		goto ZZ_52B90_AC;
	}
	AT = 0x80000000;
	if (A3 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x80052C3C);
		goto ZZ_52B90_AC;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x80052C3C);
ZZ_52B90_AC:
	V0 = LO;
	EMU_Write16(A0 + 76,V0); //+ 0x4C
	ZZ_CLOCKCYCLES(3,0x80052C80);
	goto ZZ_52B90_F0;
ZZ_52B90_B8:
	EMU_SDivide(V1,A3);
	if (A3)
	{
		ZZ_CLOCKCYCLES(3,0x80052C58);
		goto ZZ_52B90_C8;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(4,0x80052C58);
ZZ_52B90_C8:
	AT = -1;
	if (A3 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x80052C70);
		goto ZZ_52B90_E0;
	}
	AT = 0x80000000;
	if (V1 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x80052C70);
		goto ZZ_52B90_E0;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x80052C70);
ZZ_52B90_E0:
	V0 = LO;
	V0 = -V0;
	EMU_Write16(A0 + 76,V0); //+ 0x4C
	ZZ_CLOCKCYCLES(4,0x80052C80);
ZZ_52B90_F0:
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(2);
	ZZ_JUMPREGISTER(0x80052D34,ZZ_52C88_AC);
	ZZ_JUMPREGISTER(0x80052AAC,ZZ_529F4_B8);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80052B90,ZZ_52B90);
ZZ_MARK(0x80052B94);
ZZ_MARK(0x80052B98);
ZZ_MARK(0x80052B9C);
ZZ_MARK(0x80052BA0);
ZZ_MARK(0x80052BA4);
ZZ_MARK(0x80052BA8);
ZZ_MARK(0x80052BAC);
ZZ_MARK(0x80052BB0);
ZZ_MARK(0x80052BB4);
ZZ_MARK(0x80052BB8);
ZZ_MARK(0x80052BBC);
ZZ_MARK(0x80052BC0);
ZZ_MARK(0x80052BC4);
ZZ_MARK(0x80052BC8);
ZZ_MARK(0x80052BCC);
ZZ_MARK(0x80052BD0);
ZZ_MARK(0x80052BD4);
ZZ_MARK(0x80052BD8);
ZZ_MARK(0x80052BDC);
ZZ_MARK(0x80052BE0);
ZZ_MARK(0x80052BE4);
ZZ_MARK(0x80052BE8);
ZZ_MARK(0x80052BEC);
ZZ_MARK(0x80052BF0);
ZZ_MARK(0x80052BF4);
ZZ_MARK(0x80052BF8);
ZZ_MARK_TARGET(0x80052BFC,ZZ_52B90_6C);
ZZ_MARK(0x80052C00);
ZZ_MARK(0x80052C04);
ZZ_MARK(0x80052C08);
ZZ_MARK(0x80052C0C);
ZZ_MARK(0x80052C10);
ZZ_MARK(0x80052C14);
ZZ_MARK(0x80052C18);
ZZ_MARK(0x80052C1C);
ZZ_MARK(0x80052C20);
ZZ_MARK_TARGET(0x80052C24,ZZ_52B90_94);
ZZ_MARK(0x80052C28);
ZZ_MARK(0x80052C2C);
ZZ_MARK(0x80052C30);
ZZ_MARK(0x80052C34);
ZZ_MARK(0x80052C38);
ZZ_MARK_TARGET(0x80052C3C,ZZ_52B90_AC);
ZZ_MARK(0x80052C40);
ZZ_MARK(0x80052C44);
ZZ_MARK_TARGET(0x80052C48,ZZ_52B90_B8);
ZZ_MARK(0x80052C4C);
ZZ_MARK(0x80052C50);
ZZ_MARK(0x80052C54);
ZZ_MARK_TARGET(0x80052C58,ZZ_52B90_C8);
ZZ_MARK(0x80052C5C);
ZZ_MARK(0x80052C60);
ZZ_MARK(0x80052C64);
ZZ_MARK(0x80052C68);
ZZ_MARK(0x80052C6C);
ZZ_MARK_TARGET(0x80052C70,ZZ_52B90_E0);
ZZ_MARK(0x80052C74);
ZZ_MARK(0x80052C78);
ZZ_MARK(0x80052C7C);
ZZ_MARK_TARGET(0x80052C80,ZZ_52B90_F0);
ZZ_MARK(0x80052C84);
