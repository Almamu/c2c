#ifdef ZZ_INCLUDE_CODE
ZZ_1D4E0:
	SP -= 80;
	EMU_Write32(SP + 52,S1); //+ 0x34
	S1 = 0x80070000;
	S1 = EMU_ReadU32(S1 - 25612); //+ 0xFFFF9BF4
	EMU_Write32(SP + 68,S5); //+ 0x44
	S5 = 0x80070000;
	S5 = EMU_ReadU32(S5 - 25608); //+ 0xFFFF9BF8
	EMU_Write32(SP + 56,S2); //+ 0x38
	S2 = 0x80070000;
	S2 = EMU_ReadU32(S2 - 25616); //+ 0xFFFF9BF0
	EMU_Write32(SP + 48,S0); //+ 0x30
	S0 = A0;
	EMU_Write32(SP + 60,S3); //+ 0x3C
	S3 = A1;
	EMU_Write32(SP + 64,S4); //+ 0x40
	S4 = A2;
	V0 = (int32_t)S1 < 153;
	if (V0)
	{
		EMU_Write32(SP + 72,RA); //+ 0x48
		ZZ_CLOCKCYCLES(19,0x8001D540);
		goto ZZ_1D4E0_60;
	}
	EMU_Write32(SP + 72,RA); //+ 0x48
	V0 = EMU_ReadU32(S0 + 172); //+ 0xAC
	V0 &= 0x80;
	if (V0)
	{
		A3 = R0;
		ZZ_CLOCKCYCLES(24,0x8001D54C);
		goto ZZ_1D4E0_6C;
	}
	A3 = R0;
	ZZ_CLOCKCYCLES(24,0x8001D540);
ZZ_1D4E0_60:
	S5 = 0x8;
	S1 = R0;
	ZZ_CLOCKCYCLES(3,0x8001D56C);
	goto ZZ_1D4E0_8C;
ZZ_1D4E0_6C:
	A1 = 0x80060000;
	A1 = EMU_ReadU32(A1 + 2988); //+ 0xBAC
	A0 = EMU_ReadU32(S0 + 148); //+ 0x94
	A2 = EMU_ReadU32(S3 + 16); //+ 0x10
	A1 += S2;
	RA = 0x8001D568; //ZZ_1D4E0_88
	A1 &= 0xFFF;
	ZZ_CLOCKCYCLES(7,0x8001E624);
	goto ZZ_1E624;
ZZ_1D4E0_88:
	EMU_Write32(S0 + 148,V0); //+ 0x94
	ZZ_CLOCKCYCLES(1,0x8001D56C);
ZZ_1D4E0_8C:
	V1 = EMU_ReadU32(S0 + 284); //+ 0x11C
	V0 = 0x3500;
	if (V1 != V0)
	{
		T0 = 0xF0000;
		ZZ_CLOCKCYCLES(4,0x8001D61C);
		goto ZZ_1D4E0_13C;
	}
	T0 = 0xF0000;
	V1 = EMU_ReadU32(S0 + 96); //+ 0x60
	V0 = EMU_ReadU32(S4);
	T0 |= 0x4240;
	A0 = EMU_ReadU32(S0 + 104); //+ 0x68
	A3 = EMU_ReadU32(S0 + 132); //+ 0x84
	A1 = V1 - V0;
	V0 = A1 << 1;
	V1 = EMU_ReadU32(S4 + 8); //+ 0x8
	V0 += A1;
	V0 <<= 3;
	A2 = V0 + A1;
	A1 = A0 - V1;
	V0 = A1 << 1;
	V0 += A1;
	V1 = EMU_ReadU32(S0 + 140); //+ 0x8C
	V0 <<= 3;
	A0 = V0 + A1;
	A1 = A2 - A3;
	if ((int32_t)A1 >= 0)
	{
		V0 = A1;
		ZZ_CLOCKCYCLES(24,0x8001D5D0);
		goto ZZ_1D4E0_F0;
	}
	V0 = A1;
	V0 = -V0;
	ZZ_CLOCKCYCLES(25,0x8001D5D0);
ZZ_1D4E0_F0:
	V0 = (int32_t)T0 < (int32_t)V0;
	if (V0)
	{
		V1 = A0 - V1;
		ZZ_CLOCKCYCLES(3,0x8001D5F4);
		goto ZZ_1D4E0_114;
	}
	V1 = A0 - V1;
	if ((int32_t)V1 >= 0)
	{
		V0 = V1;
		ZZ_CLOCKCYCLES(5,0x8001D5E8);
		goto ZZ_1D4E0_108;
	}
	V0 = V1;
	V0 = -V0;
	ZZ_CLOCKCYCLES(6,0x8001D5E8);
ZZ_1D4E0_108:
	V0 = (int32_t)T0 < (int32_t)V0;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(3,0x8001D61C);
		goto ZZ_1D4E0_13C;
	}
	ZZ_CLOCKCYCLES(3,0x8001D5F4);
ZZ_1D4E0_114:
	V0 = A3 ^ A2;
	if ((int32_t)V0 < 0)
	{
		ZZ_CLOCKCYCLES(3,0x8001D604);
		goto ZZ_1D4E0_124;
	}
	EMU_Write32(S0 + 132,A2); //+ 0x84
	ZZ_CLOCKCYCLES(4,0x8001D604);
ZZ_1D4E0_124:
	V0 = EMU_ReadU32(S0 + 140); //+ 0x8C
	V0 ^= A0;
	if ((int32_t)V0 < 0)
	{
		ZZ_CLOCKCYCLES(5,0x8001D61C);
		goto ZZ_1D4E0_13C;
	}
	EMU_Write32(S0 + 140,A0); //+ 0x8C
	ZZ_CLOCKCYCLES(6,0x8001D61C);
ZZ_1D4E0_13C:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 14056); //+ 0x36E8
	V1 = EMU_ReadU32(V0 + 20); //+ 0x14
	V0 = V1 < 121;
	if (V0)
	{
		ZZ_CLOCKCYCLES(8,0x8001D640);
		goto ZZ_1D4E0_160;
	}
	V1 = 0x78;
	ZZ_CLOCKCYCLES(9,0x8001D640);
ZZ_1D4E0_160:
	V0 = EMU_ReadU32(S3);
	EMU_SMultiply(V0,V1);
	V0 = LO;
	if ((int32_t)V0 >= 0)
	{
		ZZ_CLOCKCYCLES(6,0x8001D65C);
		goto ZZ_1D4E0_17C;
	}
	V0 += 1023;
	ZZ_CLOCKCYCLES(7,0x8001D65C);
ZZ_1D4E0_17C:
	V0 = (int32_t)V0 >> 10;
	EMU_SMultiply(S1,V0);
	A0 = S2;
	T1 = LO;
	RA = 0x8001D674; //ZZ_1D4E0_194
	S1 = (int32_t)T1 >> 8;
	ZZ_CLOCKCYCLES(6,0x8003D584);
	goto ZZ_3D584;
ZZ_1D4E0_194:
	V0 = (int32_t)V0 >> 4;
	EMU_SMultiply(V0,S1);
	A0 = S2;
	EMU_Write32(SP + 20,R0); //+ 0x14
	T1 = LO;
	V0 = (int32_t)T1 >> 8;
	RA = 0x8001D694; //ZZ_1D4E0_1B4
	EMU_Write32(SP + 16,V0); //+ 0x10
	ZZ_CLOCKCYCLES(8,0x8003D5F8);
	goto ZZ_3D5F8;
ZZ_1D4E0_1B4:
	V0 = (int32_t)V0 >> 4;
	EMU_SMultiply(V0,S1);
	A0 = SP + 16;
	A1 = SP + 32;
	T1 = LO;
	V0 = (int32_t)T1 >> 8;
	RA = 0x8001D6B4; //ZZ_1D4E0_1D4
	EMU_Write32(SP + 24,V0); //+ 0x18
	ZZ_CLOCKCYCLES(8,0x8001ED20);
	goto ZZ_1ED20;
ZZ_1D4E0_1D4:
	V0 = EMU_ReadU32(S0 + 132); //+ 0x84
	V1 = EMU_ReadU32(SP + 32); //+ 0x20
	V0 += V1;
	EMU_Write32(S0 + 132,V0); //+ 0x84
	V0 = EMU_ReadU32(S0 + 140); //+ 0x8C
	V1 = EMU_ReadU32(SP + 40); //+ 0x28
	V0 += V1;
	EMU_Write32(S0 + 140,V0); //+ 0x8C
	V0 = 0x8;
	if (S5 == V0)
	{
		V1 = 0x2000000;
		ZZ_CLOCKCYCLES(13,0x8001D6FC);
		goto ZZ_1D4E0_21C;
	}
	V1 = 0x2000000;
	V0 = EMU_ReadU32(S0 + 168); //+ 0xA8
	V0 &= V1;
	if (V0)
	{
		ZZ_CLOCKCYCLES(18,0x8001D74C);
		goto ZZ_1D4E0_26C;
	}
	ZZ_CLOCKCYCLES(18,0x8001D6FC);
ZZ_1D4E0_21C:
	V0 = EMU_ReadU32(S0 + 168); //+ 0xA8
	A0 = EMU_ReadU32(S3 + 8); //+ 0x8
	V1 = 0x2000000;
	V0 &= V1;
	if (V0)
	{
		ZZ_CLOCKCYCLES(6,0x8001D718);
		goto ZZ_1D4E0_238;
	}
	A0 = 0xC7;
	ZZ_CLOCKCYCLES(7,0x8001D718);
ZZ_1D4E0_238:
	V0 = EMU_ReadU32(S0 + 132); //+ 0x84
	EMU_SMultiply(V0,A0);
	V0 = EMU_ReadU32(S0 + 140); //+ 0x8C
	T0 = LO;
	EMU_SMultiply(V0,A0);
	V0 = (int32_t)T0 >> 8;
	EMU_Write32(S0 + 132,V0); //+ 0x84
	V1 = LO;
	V0 = (int32_t)V1 >> 8;
	EMU_Write32(S0 + 140,V0); //+ 0x8C
	ZZ_CLOCKCYCLES(13,0x8001D74C);
ZZ_1D4E0_26C:
	A0 = EMU_ReadU32(S0 + 132); //+ 0x84
	V1 = EMU_ReadU32(S3 + 4); //+ 0x4
	V0 = (int32_t)A0 < (int32_t)V1;
	if (!V0)
	{
		V0 = -V1;
		ZZ_CLOCKCYCLES(6,0x8001D778);
		goto ZZ_1D4E0_298;
	}
	V0 = -V1;
	V1 = V0;
	V0 = (int32_t)A0 < (int32_t)V1;
	if (V0)
	{
		ZZ_CLOCKCYCLES(10,0x8001D778);
		goto ZZ_1D4E0_298;
	}
	V1 = A0;
	ZZ_CLOCKCYCLES(11,0x8001D778);
ZZ_1D4E0_298:
	A0 = EMU_ReadU32(S0 + 140); //+ 0x8C
	EMU_Write32(S0 + 132,V1); //+ 0x84
	V1 = EMU_ReadU32(S3 + 4); //+ 0x4
	V0 = (int32_t)A0 < (int32_t)V1;
	if (!V0)
	{
		V0 = -V1;
		ZZ_CLOCKCYCLES(7,0x8001D7A8);
		goto ZZ_1D4E0_2C8;
	}
	V0 = -V1;
	V1 = V0;
	V0 = (int32_t)A0 < (int32_t)V1;
	if (V0)
	{
		ZZ_CLOCKCYCLES(11,0x8001D7A8);
		goto ZZ_1D4E0_2C8;
	}
	V1 = A0;
	ZZ_CLOCKCYCLES(12,0x8001D7A8);
ZZ_1D4E0_2C8:
	V0 = EMU_ReadU32(S0 + 96); //+ 0x60
	EMU_Write32(S0 + 140,V1); //+ 0x8C
	V1 = EMU_ReadU32(S4);
	V0 = V0 - V1;
	V0 = (int32_t)V0 >> 6;
	EMU_SMultiply(V0,V0);
	V0 = EMU_ReadU32(S0 + 104); //+ 0x68
	V1 = EMU_ReadU32(S4 + 8); //+ 0x8
	A0 = LO;
	V0 = V0 - V1;
	V0 = (int32_t)V0 >> 6;
	EMU_SMultiply(V0,V0);
	V1 = LO;
	RA = 0x8001D7E8; //ZZ_1D4E0_308
	A0 += V1;
	ZZ_CLOCKCYCLES(16,0x80041D10);
	goto ZZ_41D10;
ZZ_1D4E0_308:
	V1 = V0 << 8;
	V0 <<= 9;
	V0 += V1;
	V0 <<= 3;
	V1 += V0;
	V0 = (int32_t)V1 < 25600;
	if (!V0)
	{
		EMU_Write32(S0 + 260,V1); //+ 0x104
		ZZ_CLOCKCYCLES(8,0x8001D820);
		goto ZZ_1D4E0_340;
	}
	EMU_Write32(S0 + 260,V1); //+ 0x104
	V0 = 0x8;
	if (S5 == V0)
	{
		ZZ_CLOCKCYCLES(11,0x8001D838);
		goto ZZ_1D4E0_358;
	}
	V0 = 0x6400;
	EMU_Write32(S0 + 260,V0); //+ 0x104
	ZZ_CLOCKCYCLES(14,0x8001D838);
	goto ZZ_1D4E0_358;
ZZ_1D4E0_340:
	A1 = EMU_ReadU32(S3 + 4); //+ 0x4
	V0 = (int32_t)A1 < (int32_t)V1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(5,0x8001D838);
		goto ZZ_1D4E0_358;
	}
	EMU_Write32(S0 + 260,A1); //+ 0x104
	ZZ_CLOCKCYCLES(6,0x8001D838);
ZZ_1D4E0_358:
	RA = EMU_ReadU32(SP + 72); //+ 0x48
	S5 = EMU_ReadU32(SP + 68); //+ 0x44
	S4 = EMU_ReadU32(SP + 64); //+ 0x40
	S3 = EMU_ReadU32(SP + 60); //+ 0x3C
	S2 = EMU_ReadU32(SP + 56); //+ 0x38
	S1 = EMU_ReadU32(SP + 52); //+ 0x34
	S0 = EMU_ReadU32(SP + 48); //+ 0x30
	SP += 80;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(10);
	ZZ_JUMPREGISTER(0x8001D934,ZZ_1D860_D4);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8001D4E0,0x8001D540,ZZ_1D4E0);
ZZ_MARK_TARGET(0x8001D540,0x8001D54C,ZZ_1D4E0_60);
ZZ_MARK_TARGET(0x8001D54C,0x8001D568,ZZ_1D4E0_6C);
ZZ_MARK_TARGET(0x8001D568,0x8001D56C,ZZ_1D4E0_88);
ZZ_MARK_TARGET(0x8001D56C,0x8001D5D0,ZZ_1D4E0_8C);
ZZ_MARK_TARGET(0x8001D5D0,0x8001D5E8,ZZ_1D4E0_F0);
ZZ_MARK_TARGET(0x8001D5E8,0x8001D5F4,ZZ_1D4E0_108);
ZZ_MARK_TARGET(0x8001D5F4,0x8001D604,ZZ_1D4E0_114);
ZZ_MARK_TARGET(0x8001D604,0x8001D61C,ZZ_1D4E0_124);
ZZ_MARK_TARGET(0x8001D61C,0x8001D640,ZZ_1D4E0_13C);
ZZ_MARK_TARGET(0x8001D640,0x8001D65C,ZZ_1D4E0_160);
ZZ_MARK_TARGET(0x8001D65C,0x8001D674,ZZ_1D4E0_17C);
ZZ_MARK_TARGET(0x8001D674,0x8001D694,ZZ_1D4E0_194);
ZZ_MARK_TARGET(0x8001D694,0x8001D6B4,ZZ_1D4E0_1B4);
ZZ_MARK_TARGET(0x8001D6B4,0x8001D6FC,ZZ_1D4E0_1D4);
ZZ_MARK_TARGET(0x8001D6FC,0x8001D718,ZZ_1D4E0_21C);
ZZ_MARK_TARGET(0x8001D718,0x8001D74C,ZZ_1D4E0_238);
ZZ_MARK_TARGET(0x8001D74C,0x8001D778,ZZ_1D4E0_26C);
ZZ_MARK_TARGET(0x8001D778,0x8001D7A8,ZZ_1D4E0_298);
ZZ_MARK_TARGET(0x8001D7A8,0x8001D7E8,ZZ_1D4E0_2C8);
ZZ_MARK_TARGET(0x8001D7E8,0x8001D820,ZZ_1D4E0_308);
ZZ_MARK_TARGET(0x8001D820,0x8001D838,ZZ_1D4E0_340);
ZZ_MARK_TARGET(0x8001D838,0x8001D860,ZZ_1D4E0_358);
