#ifdef ZZ_INCLUDE_CODE
ZZ_14450:
	SP -= 24;
	V1 = A0;
	EMU_Write32(SP + 20,RA); //+ 0x14
	EMU_Write32(SP + 16,S0); //+ 0x10
	A0 = EMU_ReadU32(V1);
	V0 = A0 & 0x1;
	if (V0)
	{
		S0 = A1;
		ZZ_CLOCKCYCLES(9,0x800144A0);
		goto ZZ_14450_50;
	}
	S0 = A1;
	if (!S0)
	{
		V0 = V1;
		ZZ_CLOCKCYCLES(11,0x800144B0);
		goto ZZ_14450_60;
	}
	V0 = V1;
	RA = 0x80014484; //ZZ_14450_34
	ZZ_CLOCKCYCLES(13,0x8001424C);
	goto ZZ_1424C;
ZZ_14450_34:
	if (!V0)
	{
		ZZ_CLOCKCYCLES(2,0x80014498);
		goto ZZ_14450_48;
	}
	A0 = EMU_ReadU32(V0 + 20); //+ 0x14
	ZZ_CLOCKCYCLES(5,0x800144A8);
	goto ZZ_14450_58;
ZZ_14450_48:
	V0 = 0x1;
	ZZ_CLOCKCYCLES(2,0x800144B0);
	goto ZZ_14450_60;
ZZ_14450_50:
	if (!S0)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(2,0x800144B0);
		goto ZZ_14450_60;
	}
	V0 = R0;
	ZZ_CLOCKCYCLES(2,0x800144A8);
ZZ_14450_58:
	RA = 0x800144B0; //ZZ_14450_60
	A1 = S0;
	ZZ_CLOCKCYCLES(2,0x8001417C);
	goto ZZ_1417C;
ZZ_14450_60:
	RA = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 24;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(5);
	ZZ_JUMPREGISTER(0x8001450C,ZZ_144C4_48);
	ZZ_JUMPREGISTER(0x80021C34,ZZ_21B5C_D8);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80014450,ZZ_14450);
ZZ_MARK(0x80014454);
ZZ_MARK(0x80014458);
ZZ_MARK(0x8001445C);
ZZ_MARK(0x80014460);
ZZ_MARK(0x80014464);
ZZ_MARK(0x80014468);
ZZ_MARK(0x8001446C);
ZZ_MARK(0x80014470);
ZZ_MARK(0x80014474);
ZZ_MARK(0x80014478);
ZZ_MARK(0x8001447C);
ZZ_MARK(0x80014480);
ZZ_MARK_TARGET(0x80014484,ZZ_14450_34);
ZZ_MARK(0x80014488);
ZZ_MARK(0x8001448C);
ZZ_MARK(0x80014490);
ZZ_MARK(0x80014494);
ZZ_MARK_TARGET(0x80014498,ZZ_14450_48);
ZZ_MARK(0x8001449C);
ZZ_MARK_TARGET(0x800144A0,ZZ_14450_50);
ZZ_MARK(0x800144A4);
ZZ_MARK_TARGET(0x800144A8,ZZ_14450_58);
ZZ_MARK(0x800144AC);
ZZ_MARK_TARGET(0x800144B0,ZZ_14450_60);
ZZ_MARK(0x800144B4);
ZZ_MARK(0x800144B8);
ZZ_MARK(0x800144BC);
ZZ_MARK(0x800144C0);
