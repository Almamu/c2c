#ifdef ZZ_INCLUDE_CODE
ZZ_3991C:
	SP -= 112;
	EMU_Write32(SP + 96,S0); //+ 0x60
	S0 = A0;
	EMU_Write32(SP + 100,S1); //+ 0x64
	S1 = A1;
	EMU_Write32(SP + 104,S2); //+ 0x68
	S2 = A2;
	A0 = S1 & 0xFFF;
	A1 = A0;
	V1 = S1 & 0xE00;
	V0 = 0xE00;
	if (V1 != V0)
	{
		EMU_Write32(SP + 108,RA); //+ 0x6C
		ZZ_CLOCKCYCLES(13,0x80039984);
		goto ZZ_3991C_68;
	}
	EMU_Write32(SP + 108,RA); //+ 0x6C
	V0 = 0xE1F;
	if (A0 != V0)
	{
		V0 = S1 & 0x1FF;
		ZZ_CLOCKCYCLES(16,0x80039974);
		goto ZZ_3991C_58;
	}
	V0 = S1 & 0x1FF;
	V0 = EMU_ReadU32(S0 + 188); //+ 0xBC
	V0 -= 4;
	A1 = V0;
	EMU_Write32(S0 + 188,A1); //+ 0xBC
	ZZ_CLOCKCYCLES(22,0x80039990);
	goto ZZ_3991C_74;
ZZ_3991C_58:
	V0 <<= 2;
	V0 += 64;
	A1 = S0 + V0;
	ZZ_CLOCKCYCLES(4,0x80039990);
	goto ZZ_3991C_74;
ZZ_3991C_68:
	RA = 0x8003998C; //ZZ_3991C_70
	A0 = S0;
	ZZ_CLOCKCYCLES(2,0x80036FA4);
	goto ZZ_36FA4;
ZZ_3991C_70:
	A1 = V0;
	ZZ_CLOCKCYCLES(1,0x80039990);
ZZ_3991C_74:
	V0 = EMU_ReadU32(S0 + 168); //+ 0xA8
	V1 = 0xFFFD0000;
	V1 |= 0xFFFF;
	V0 &= V1;
	EMU_Write32(S0 + 168,V0); //+ 0xA8
	V0 = S1 >> 12;
	V0 &= 0x3F;
	V1 = 0x1F;
	if (V0 != V1)
	{
		A0 = V0;
		ZZ_CLOCKCYCLES(10,0x800399CC);
		goto ZZ_3991C_B0;
	}
	A0 = V0;
	V0 = EMU_ReadU32(S0 + 188); //+ 0xBC
	V0 -= 4;
	EMU_Write32(S0 + 188,V0); //+ 0xBC
	ZZ_CLOCKCYCLES(15,0x800399D8);
	goto ZZ_3991C_BC;
ZZ_3991C_B0:
	V0 = A0 << 2;
	V0 += 64;
	V0 += S0;
	ZZ_CLOCKCYCLES(3,0x800399D8);
ZZ_3991C_BC:
	V0 = EMU_ReadU32(V0);
	if (!V0)
	{
		ZZ_CLOCKCYCLES(4,0x80039A4C);
		goto ZZ_3991C_130;
	}
	if (!A1)
	{
		V0 = S1 >> 18;
		ZZ_CLOCKCYCLES(6,0x80039A4C);
		goto ZZ_3991C_130;
	}
	V0 = S1 >> 18;
	A3 = V0 & 0x7;
	if (!A3)
	{
		A0 = R0;
		ZZ_CLOCKCYCLES(9,0x80039A28);
		goto ZZ_3991C_10C;
	}
	A0 = R0;
	A2 = SP + 24;
	ZZ_CLOCKCYCLES(10,0x80039A00);
ZZ_3991C_E4:
	V1 = EMU_ReadU32(S0 + 188); //+ 0xBC
	V0 = A0 - A3;
	V0 <<= 2;
	V0 += V1;
	V0 = EMU_ReadU32(V0);
	A0 += 1;
	EMU_Write32(A2,V0);
	V0 = (int32_t)A0 < (int32_t)A3;
	if (V0)
	{
		A2 += 4;
		ZZ_CLOCKCYCLES(10,0x80039A00);
		goto ZZ_3991C_E4;
	}
	A2 += 4;
	ZZ_CLOCKCYCLES(10,0x80039A28);
ZZ_3991C_10C:
	V0 = SP + 24;
	EMU_Write32(SP + 16,V0); //+ 0x10
	A1 = EMU_ReadU32(A1);
	A0 = S0;
	A2 = S1 >> 21;
	RA = 0x80039A44; //ZZ_3991C_128
	A2 &= 0x7;
	ZZ_CLOCKCYCLES(7,0x8001D360);
	goto ZZ_1D360;
ZZ_3991C_128:
	ZZ_CLOCKCYCLES(2,0x80039A50);
	goto ZZ_3991C_134;
ZZ_3991C_130:
	EMU_Write32(S0 + 212,R0); //+ 0xD4
	ZZ_CLOCKCYCLES(1,0x80039A50);
ZZ_3991C_134:
	V0 = EMU_ReadU32(S0 + 168); //+ 0xA8
	V1 = 0x20000;
	V0 &= V1;
	if (V0)
	{
		V0 = S2 & 0x2;
		ZZ_CLOCKCYCLES(5,0x80039A7C);
		goto ZZ_3991C_160;
	}
	V0 = S2 & 0x2;
	V1 = EMU_ReadU32(S0 + 188); //+ 0xBC
	V0 = S1 >> 16;
	V0 &= 0x1C;
	V1 = V1 - V0;
	EMU_Write32(S0 + 188,V1); //+ 0xBC
	ZZ_CLOCKCYCLES(11,0x80039A94);
	goto ZZ_3991C_178;
ZZ_3991C_160:
	if (V0)
	{
		V0 = -255;
		ZZ_CLOCKCYCLES(2,0x80039A98);
		goto ZZ_3991C_17C;
	}
	V0 = -255;
	V0 = EMU_ReadU32(S0 + 188); //+ 0xBC
	V0 -= 4;
	EMU_Write32(S0 + 188,V0); //+ 0xBC
	ZZ_CLOCKCYCLES(6,0x80039A94);
ZZ_3991C_178:
	V0 = R0;
	ZZ_CLOCKCYCLES(1,0x80039A98);
ZZ_3991C_17C:
	RA = EMU_ReadU32(SP + 108); //+ 0x6C
	S2 = EMU_ReadU32(SP + 104); //+ 0x68
	S1 = EMU_ReadU32(SP + 100); //+ 0x64
	S0 = EMU_ReadU32(SP + 96); //+ 0x60
	SP += 112;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(7);
	ZZ_JUMPREGISTER(0x8003A294,ZZ_3A234_60);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8003991C,0x80039974,ZZ_3991C);
ZZ_MARK_TARGET(0x80039974,0x80039984,ZZ_3991C_58);
ZZ_MARK_TARGET(0x80039984,0x8003998C,ZZ_3991C_68);
ZZ_MARK_TARGET(0x8003998C,0x80039990,ZZ_3991C_70);
ZZ_MARK_TARGET(0x80039990,0x800399CC,ZZ_3991C_74);
ZZ_MARK_TARGET(0x800399CC,0x800399D8,ZZ_3991C_B0);
ZZ_MARK_TARGET(0x800399D8,0x80039A00,ZZ_3991C_BC);
ZZ_MARK_TARGET(0x80039A00,0x80039A28,ZZ_3991C_E4);
ZZ_MARK_TARGET(0x80039A28,0x80039A44,ZZ_3991C_10C);
ZZ_MARK_TARGET(0x80039A44,0x80039A4C,ZZ_3991C_128);
ZZ_MARK_TARGET(0x80039A4C,0x80039A50,ZZ_3991C_130);
ZZ_MARK_TARGET(0x80039A50,0x80039A7C,ZZ_3991C_134);
ZZ_MARK_TARGET(0x80039A7C,0x80039A94,ZZ_3991C_160);
ZZ_MARK_TARGET(0x80039A94,0x80039A98,ZZ_3991C_178);
ZZ_MARK_TARGET(0x80039A98,0x80039AB4,ZZ_3991C_17C);
