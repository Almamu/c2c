#ifdef ZZ_INCLUDE_CODE
ZZ_4B1F8:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 8392); //+ 0xFFFFDF38
	SP -= 48;
	EMU_Write32(SP + 40,RA); //+ 0x28
	EMU_Write32(SP + 36,S5); //+ 0x24
	EMU_Write32(SP + 32,S4); //+ 0x20
	EMU_Write32(SP + 28,S3); //+ 0x1C
	EMU_Write32(SP + 24,S2); //+ 0x18
	EMU_Write32(SP + 20,S1); //+ 0x14
	EMU_Write32(SP + 16,S0); //+ 0x10
	V0 = EMU_ReadU32(V0);
	V0 >>= 24;
	S1 = V0 & 0x7F;
	if (!S1)
	{
		ZZ_CLOCKCYCLES(16,0x8004B2D4);
		goto ZZ_4B1F8_DC;
	}
	S4 = 1;
	S3 = 0xFF0000;
	S3 |= 0xFFFF;
	S5 = 0x80060000;
	S5 -= 8388;
	ZZ_CLOCKCYCLES(21,0x8004B24C);
ZZ_4B1F8_54:
	if (!S1)
	{
		S0 = R0;
		ZZ_CLOCKCYCLES(2,0x8004B2B0);
		goto ZZ_4B1F8_B8;
	}
	S0 = R0;
	S2 = S5;
	ZZ_CLOCKCYCLES(3,0x8004B258);
ZZ_4B1F8_60:
	V0 = (int32_t)S0 < 7;
	if (!V0)
	{
		V0 = S1 & 0x1;
		ZZ_CLOCKCYCLES(3,0x8004B2B0);
		goto ZZ_4B1F8_B8;
	}
	V0 = S1 & 0x1;
	if (!V0)
	{
		V0 = S0 + 24;
		ZZ_CLOCKCYCLES(5,0x8004B2A0);
		goto ZZ_4B1F8_A8;
	}
	V0 = S0 + 24;
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 - 8392); //+ 0xFFFFDF38
	V0 = S4 << V0;
	V1 = EMU_ReadU32(A0);
	V0 |= S3;
	V1 &= V0;
	EMU_Write32(A0,V1);
	V0 = EMU_ReadU32(S2);
	if (!V0)
	{
		ZZ_CLOCKCYCLES(16,0x8004B2A0);
		goto ZZ_4B1F8_A8;
	}
	ZZ_JUMPREGISTER_BEGIN(V0);
	RA = 0x8004B2A0; //ZZ_4B1F8_A8
	ZZ_CLOCKCYCLES_JR(18);
	// UNIMPLEMENTED JUMP-TO-REGISTER-AND-LINK (V0,8004B298)
	ZZ_JUMPREGISTER_END();
ZZ_4B1F8_A8:
	S2 += 4;
	S1 >>= 1;
	if (S1)
	{
		S0 += 1;
		ZZ_CLOCKCYCLES(4,0x8004B258);
		goto ZZ_4B1F8_60;
	}
	S0 += 1;
	ZZ_CLOCKCYCLES(4,0x8004B2B0);
ZZ_4B1F8_B8:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 8392); //+ 0xFFFFDF38
	V0 = EMU_ReadU32(V0);
	V0 >>= 24;
	S1 = V0 & 0x7F;
	if (S1)
	{
		ZZ_CLOCKCYCLES(9,0x8004B24C);
		goto ZZ_4B1F8_54;
	}
	ZZ_CLOCKCYCLES(9,0x8004B2D4);
ZZ_4B1F8_DC:
	A1 = 0x80060000;
	A1 = EMU_ReadU32(A1 - 8392); //+ 0xFFFFDF38
	V0 = EMU_ReadU32(A1);
	V1 = 0xFF000000;
	V0 &= V1;
	V1 = 0x80000000;
	if (V0 == V1)
	{
		ZZ_CLOCKCYCLES(9,0x8004B30C);
		goto ZZ_4B1F8_114;
	}
	V0 = EMU_ReadU32(A1);
	V0 &= 0x8000;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(14,0x8004B354);
		goto ZZ_4B1F8_15C;
	}
	ZZ_CLOCKCYCLES(14,0x8004B30C);
ZZ_4B1F8_114:
	A0 = 0x80010000;
	A0 += 3420;
	A1 = EMU_ReadU32(A1);
	RA = 0x8004B320; //ZZ_4B1F8_128
	S0 = R0;
	ZZ_CLOCKCYCLES(5,0x800494DC);
	goto ZZ_494DC;
ZZ_4B1F8_128:
	A0 = 0x80010000;
	A0 += 3448;
	A1 = S0;
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 8356); //+ 0xFFFFDF5C
	V1 = S0 << 4;
	V1 += V0;
	A2 = EMU_ReadU32(V1);
	RA = 0x8004B348; //ZZ_4B1F8_150
	S0 += 1;
	ZZ_CLOCKCYCLES(10,0x800494DC);
	goto ZZ_494DC;
ZZ_4B1F8_150:
	V0 = (int32_t)S0 < 7;
	if (V0)
	{
		ZZ_CLOCKCYCLES(3,0x8004B320);
		goto ZZ_4B1F8_128;
	}
	ZZ_CLOCKCYCLES(3,0x8004B354);
ZZ_4B1F8_15C:
	RA = EMU_ReadU32(SP + 40); //+ 0x28
	S5 = EMU_ReadU32(SP + 36); //+ 0x24
	S4 = EMU_ReadU32(SP + 32); //+ 0x20
	S3 = EMU_ReadU32(SP + 28); //+ 0x1C
	S2 = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 48;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(10);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8004B1F8,ZZ_4B1F8);
ZZ_MARK(0x8004B1FC);
ZZ_MARK(0x8004B200);
ZZ_MARK(0x8004B204);
ZZ_MARK(0x8004B208);
ZZ_MARK(0x8004B20C);
ZZ_MARK(0x8004B210);
ZZ_MARK(0x8004B214);
ZZ_MARK(0x8004B218);
ZZ_MARK(0x8004B21C);
ZZ_MARK(0x8004B220);
ZZ_MARK(0x8004B224);
ZZ_MARK(0x8004B228);
ZZ_MARK(0x8004B22C);
ZZ_MARK(0x8004B230);
ZZ_MARK(0x8004B234);
ZZ_MARK(0x8004B238);
ZZ_MARK(0x8004B23C);
ZZ_MARK(0x8004B240);
ZZ_MARK(0x8004B244);
ZZ_MARK(0x8004B248);
ZZ_MARK_TARGET(0x8004B24C,ZZ_4B1F8_54);
ZZ_MARK(0x8004B250);
ZZ_MARK(0x8004B254);
ZZ_MARK_TARGET(0x8004B258,ZZ_4B1F8_60);
ZZ_MARK(0x8004B25C);
ZZ_MARK(0x8004B260);
ZZ_MARK(0x8004B264);
ZZ_MARK(0x8004B268);
ZZ_MARK(0x8004B26C);
ZZ_MARK(0x8004B270);
ZZ_MARK(0x8004B274);
ZZ_MARK(0x8004B278);
ZZ_MARK(0x8004B27C);
ZZ_MARK(0x8004B280);
ZZ_MARK(0x8004B284);
ZZ_MARK(0x8004B288);
ZZ_MARK(0x8004B28C);
ZZ_MARK(0x8004B290);
ZZ_MARK(0x8004B294);
ZZ_MARK(0x8004B298);
ZZ_MARK(0x8004B29C);
ZZ_MARK_TARGET(0x8004B2A0,ZZ_4B1F8_A8);
ZZ_MARK(0x8004B2A4);
ZZ_MARK(0x8004B2A8);
ZZ_MARK(0x8004B2AC);
ZZ_MARK_TARGET(0x8004B2B0,ZZ_4B1F8_B8);
ZZ_MARK(0x8004B2B4);
ZZ_MARK(0x8004B2B8);
ZZ_MARK(0x8004B2BC);
ZZ_MARK(0x8004B2C0);
ZZ_MARK(0x8004B2C4);
ZZ_MARK(0x8004B2C8);
ZZ_MARK(0x8004B2CC);
ZZ_MARK(0x8004B2D0);
ZZ_MARK_TARGET(0x8004B2D4,ZZ_4B1F8_DC);
ZZ_MARK(0x8004B2D8);
ZZ_MARK(0x8004B2DC);
ZZ_MARK(0x8004B2E0);
ZZ_MARK(0x8004B2E4);
ZZ_MARK(0x8004B2E8);
ZZ_MARK(0x8004B2EC);
ZZ_MARK(0x8004B2F0);
ZZ_MARK(0x8004B2F4);
ZZ_MARK(0x8004B2F8);
ZZ_MARK(0x8004B2FC);
ZZ_MARK(0x8004B300);
ZZ_MARK(0x8004B304);
ZZ_MARK(0x8004B308);
ZZ_MARK_TARGET(0x8004B30C,ZZ_4B1F8_114);
ZZ_MARK(0x8004B310);
ZZ_MARK(0x8004B314);
ZZ_MARK(0x8004B318);
ZZ_MARK(0x8004B31C);
ZZ_MARK_TARGET(0x8004B320,ZZ_4B1F8_128);
ZZ_MARK(0x8004B324);
ZZ_MARK(0x8004B328);
ZZ_MARK(0x8004B32C);
ZZ_MARK(0x8004B330);
ZZ_MARK(0x8004B334);
ZZ_MARK(0x8004B338);
ZZ_MARK(0x8004B33C);
ZZ_MARK(0x8004B340);
ZZ_MARK(0x8004B344);
ZZ_MARK_TARGET(0x8004B348,ZZ_4B1F8_150);
ZZ_MARK(0x8004B34C);
ZZ_MARK(0x8004B350);
ZZ_MARK_TARGET(0x8004B354,ZZ_4B1F8_15C);
ZZ_MARK(0x8004B358);
ZZ_MARK(0x8004B35C);
ZZ_MARK(0x8004B360);
ZZ_MARK(0x8004B364);
ZZ_MARK(0x8004B368);
ZZ_MARK(0x8004B36C);
ZZ_MARK(0x8004B370);
ZZ_MARK(0x8004B374);
ZZ_MARK(0x8004B378);
