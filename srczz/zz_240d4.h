#ifdef ZZ_INCLUDE_CODE
ZZ_240D4:
	SP -= 64;
	EMU_Write32(SP + 36,S1); //+ 0x24
	S1 = A0;
	EMU_Write32(SP + 40,S2); //+ 0x28
	S2 = A1;
	V0 = S2 << 4;
	V0 -= 16;
	EMU_Write32(SP + 48,S4); //+ 0x30
	S4 = S1 + V0;
	EMU_Write32(SP + 60,RA); //+ 0x3C
	EMU_Write32(SP + 56,S6); //+ 0x38
	EMU_Write32(SP + 52,S5); //+ 0x34
	EMU_Write32(SP + 44,S3); //+ 0x2C
	EMU_Write32(SP + 32,S0); //+ 0x20
	A0 = EMU_ReadU32(S1 + 4); //+ 0x4
	V0 = EMU_ReadU32(S4 + 4); //+ 0x4
	S5 = A2;
	if (A0 != V0)
	{
		S6 = A3;
		ZZ_CLOCKCYCLES(19,0x80024140);
		goto ZZ_240D4_6C;
	}
	S6 = A3;
	V1 = EMU_ReadU32(S4 + 8); //+ 0x8
	V0 = EMU_ReadU32(S1 + 8); //+ 0x8
	S3 = V1 - V0;
	if ((int32_t)S3 >= 0)
	{
		ZZ_CLOCKCYCLES(25,0x800241E4);
		goto ZZ_240D4_110;
	}
	S3 = -S3;
	ZZ_CLOCKCYCLES(27,0x800241E4);
	goto ZZ_240D4_110;
ZZ_240D4_6C:
	V1 = EMU_ReadU32(S1 + 12); //+ 0xC
	S0 = EMU_ReadU32(S1 + 8); //+ 0x8
	V0 = 0x2;
	if (V1 != V0)
	{
		A1 = 0x4B;
		ZZ_CLOCKCYCLES(5,0x8002416C);
		goto ZZ_240D4_98;
	}
	A1 = 0x4B;
	A2 = R0;
	RA = 0x80024160; //ZZ_240D4_8C
	A3 = 0x2;
	ZZ_CLOCKCYCLES(8,0x800325CC);
	goto ZZ_325CC;
ZZ_240D4_8C:
	V0 -= 1;
	V0 <<= 8;
	S0 = V0 - S0;
	ZZ_CLOCKCYCLES(3,0x8002416C);
ZZ_240D4_98:
	V1 = EMU_ReadU32(S4 + 12); //+ 0xC
	S3 = S0;
	S0 = EMU_ReadU32(S4 + 8); //+ 0x8
	V0 = 0x1;
	if (V1 != V0)
	{
		A1 = 0x4B;
		ZZ_CLOCKCYCLES(6,0x800241A0);
		goto ZZ_240D4_CC;
	}
	A1 = 0x4B;
	A0 = EMU_ReadU32(S4 + 4); //+ 0x4
	A2 = R0;
	RA = 0x80024194; //ZZ_240D4_C0
	A3 = 0x2;
	ZZ_CLOCKCYCLES(10,0x800325CC);
	goto ZZ_325CC;
ZZ_240D4_C0:
	V0 -= 1;
	V0 <<= 8;
	S0 = V0 - S0;
	ZZ_CLOCKCYCLES(3,0x800241A0);
ZZ_240D4_CC:
	S3 += S0;
	S0 = S2 - 2;
	if ((int32_t)S0 <= 0)
	{
		ZZ_CLOCKCYCLES(4,0x800241E4);
		goto ZZ_240D4_110;
	}
	S2 = S1 + 16;
	ZZ_CLOCKCYCLES(5,0x800241B4);
ZZ_240D4_E0:
	A0 = EMU_ReadU32(S2 + 4); //+ 0x4
	A1 = 0x4B;
	A2 = R0;
	A3 = 0x2;
	S2 += 16;
	RA = 0x800241D0; //ZZ_240D4_FC
	S0 -= 1;
	ZZ_CLOCKCYCLES(7,0x800325CC);
	goto ZZ_325CC;
ZZ_240D4_FC:
	V1 = S3 - 2;
	V0 -= 1;
	V0 <<= 8;
	if (S0)
	{
		S3 = V1 + V0;
		ZZ_CLOCKCYCLES(5,0x800241B4);
		goto ZZ_240D4_E0;
	}
	S3 = V1 + V0;
	ZZ_CLOCKCYCLES(5,0x800241E4);
ZZ_240D4_110:
	if ((int32_t)S6 >= 0)
	{
		EMU_SMultiply(S3,S6);
		ZZ_CLOCKCYCLES(2,0x800242E4);
		goto ZZ_240D4_210;
	}
	EMU_SMultiply(S3,S6);
	V0 = 0x2;
	EMU_Write32(SP + 16,R0); //+ 0x10
	EMU_Write32(SP + 20,V0); //+ 0x14
	EMU_Write32(SP + 24,R0); //+ 0x18
	A0 = EMU_ReadU32(S1 + 4); //+ 0x4
	A1 = 0xC9;
	A2 = R0;
	RA = 0x80024210; //ZZ_240D4_13C
	A3 = R0;
	ZZ_CLOCKCYCLES(11,0x800324E0);
	goto ZZ_324E0;
ZZ_240D4_13C:
	A1 = V0;
	EMU_SMultiply(S3,A1);
	T0 = LO;
	V1 = (int32_t)T0 >> 8;
	V0 = (int32_t)V1 < 9;
	if (!V0)
	{
		S0 = V1;
		ZZ_CLOCKCYCLES(7,0x80024250);
		goto ZZ_240D4_17C;
	}
	S0 = V1;
	V0 = EMU_ReadU32(S4);
	V1 = EMU_ReadU32(S4 + 4); //+ 0x4
	A0 = EMU_ReadU32(S4 + 8); //+ 0x8
	A1 = EMU_ReadU32(S4 + 12); //+ 0xC
	EMU_Write32(S5,V0);
	EMU_Write32(S5 + 4,V1); //+ 0x4
	EMU_Write32(S5 + 8,A0); //+ 0x8
	EMU_Write32(S5 + 12,A1); //+ 0xC
	ZZ_CLOCKCYCLES(16,0x800243D0);
	goto ZZ_240D4_2FC;
ZZ_240D4_17C:
	V0 = 0x70000;
	V0 |= 0xD000;
	V0 = (int32_t)V0 < (int32_t)S0;
	if (!V0)
	{
		A0 = 0x10620000;
		ZZ_CLOCKCYCLES(5,0x8002426C);
		goto ZZ_240D4_198;
	}
	A0 = 0x10620000;
	S0 = 0x70000;
	S0 |= 0xD000;
	ZZ_CLOCKCYCLES(7,0x8002426C);
ZZ_240D4_198:
	A0 |= 0x4DD3;
	V1 = S0 << 1;
	V1 += S0;
	V0 = V1 << 4;
	V0 = V0 - V1;
	V0 <<= 3;
	EMU_SMultiply(V0,A0);
	V0 = (int32_t)V0 >> 31;
	T0 = HI;
	V1 = (int32_t)T0 >> 15;
	V1 = V1 - V0;
	S0 = V1 + 120;
	V0 = S0 << 16;
	EMU_SDivide(V0,A1);
	if (A1)
	{
		ZZ_CLOCKCYCLES(16,0x800242B0);
		goto ZZ_240D4_1DC;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(17,0x800242B0);
ZZ_240D4_1DC:
	AT = -1;
	if (A1 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x800242C8);
		goto ZZ_240D4_1F4;
	}
	AT = 0x80000000;
	if (V0 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x800242C8);
		goto ZZ_240D4_1F4;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x800242C8);
ZZ_240D4_1F4:
	S0 = LO;
	V0 = (int32_t)S0 < (int32_t)S3;
	if (!V0)
	{
		S2 = S1;
		ZZ_CLOCKCYCLES(5,0x800242F0);
		goto ZZ_240D4_21C;
	}
	S2 = S1;
	S3 = S0;
	ZZ_CLOCKCYCLES(7,0x800242F0);
	goto ZZ_240D4_21C;
ZZ_240D4_210:
	T0 = LO;
	S3 = (int32_t)T0 >> 8;
	S2 = S1;
	ZZ_CLOCKCYCLES(3,0x800242F0);
ZZ_240D4_21C:
	V1 = EMU_ReadU32(S2 + 12); //+ 0xC
	V0 = 0x2;
	if (V1 != V0)
	{
		A1 = 0x4B;
		ZZ_CLOCKCYCLES(4,0x80024324);
		goto ZZ_240D4_250;
	}
	A1 = 0x4B;
	A0 = EMU_ReadU32(S2 + 4); //+ 0x4
	A2 = R0;
	RA = 0x80024310; //ZZ_240D4_23C
	A3 = 0x2;
	ZZ_CLOCKCYCLES(8,0x800325CC);
	goto ZZ_325CC;
ZZ_240D4_23C:
	V0 -= 1;
	A0 = V0 << 8;
	ZZ_CLOCKCYCLES(3,0x80024328);
	goto ZZ_240D4_254;
ZZ_240D4_248:
	V1 = V1 - S3;
	ZZ_CLOCKCYCLES(2,0x800243AC);
	goto ZZ_240D4_2D8;
ZZ_240D4_250:
	A0 = R0;
	ZZ_CLOCKCYCLES(1,0x80024328);
ZZ_240D4_254:
	V1 = EMU_ReadU32(S2 + 8); //+ 0x8
	S4 = 0x2;
	S1 = S2 + 12;
	ZZ_CLOCKCYCLES(3,0x80024334);
ZZ_240D4_260:
	V0 = EMU_ReadU32(S1);
	if (V0 != S4)
	{
		V0 = (int32_t)V1 < (int32_t)S3;
		ZZ_CLOCKCYCLES(4,0x8002435C);
		goto ZZ_240D4_288;
	}
	V0 = (int32_t)V1 < (int32_t)S3;
	S0 = A0 - V1;
	V0 = (int32_t)S0 < (int32_t)S3;
	if (!V0)
	{
		V1 += S3;
		ZZ_CLOCKCYCLES(8,0x800243AC);
		goto ZZ_240D4_2D8;
	}
	V1 += S3;
	S3 = S3 - S0;
	ZZ_CLOCKCYCLES(10,0x80024368);
	goto ZZ_240D4_294;
ZZ_240D4_288:
	if (!V0)
	{
		ZZ_CLOCKCYCLES(2,0x8002431C);
		goto ZZ_240D4_248;
	}
	S3 = S3 - V1;
	ZZ_CLOCKCYCLES(3,0x80024368);
ZZ_240D4_294:
	S1 += 16;
	A0 = EMU_ReadU32(S1 - 8); //+ 0xFFFFFFF8
	A1 = 0x4B;
	A2 = R0;
	RA = 0x80024380; //ZZ_240D4_2AC
	A3 = 0x2;
	ZZ_CLOCKCYCLES(6,0x800325CC);
	goto ZZ_325CC;
ZZ_240D4_2AC:
	V1 = EMU_ReadU32(S1);
	S2 += 16;
	V0 -= 1;
	if (V1 != S4)
	{
		S0 = V0 << 8;
		ZZ_CLOCKCYCLES(5,0x800243A0);
		goto ZZ_240D4_2CC;
	}
	S0 = V0 << 8;
	A0 = S0;
	V1 = 0x1;
	ZZ_CLOCKCYCLES(8,0x80024334);
	goto ZZ_240D4_260;
ZZ_240D4_2CC:
	A0 = R0;
	V1 = S0 - 1;
	ZZ_CLOCKCYCLES(3,0x80024334);
	goto ZZ_240D4_260;
ZZ_240D4_2D8:
	V0 = EMU_ReadU32(S2);
	EMU_Write32(S5,V0);
	V0 = EMU_ReadU32(S2 + 4); //+ 0x4
	EMU_Write32(S5 + 8,V1); //+ 0x8
	EMU_Write32(S5 + 4,V0); //+ 0x4
	V0 = EMU_ReadU32(S2 + 12); //+ 0xC
	EMU_Write32(S5 + 12,V0); //+ 0xC
	ZZ_CLOCKCYCLES(9,0x800243D0);
ZZ_240D4_2FC:
	RA = EMU_ReadU32(SP + 60); //+ 0x3C
	S6 = EMU_ReadU32(SP + 56); //+ 0x38
	S5 = EMU_ReadU32(SP + 52); //+ 0x34
	S4 = EMU_ReadU32(SP + 48); //+ 0x30
	S3 = EMU_ReadU32(SP + 44); //+ 0x2C
	S2 = EMU_ReadU32(SP + 40); //+ 0x28
	S1 = EMU_ReadU32(SP + 36); //+ 0x24
	S0 = EMU_ReadU32(SP + 32); //+ 0x20
	SP += 64;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(11);
	ZZ_JUMPREGISTER(0x80022A30,ZZ_22978_B8);
	ZZ_JUMPREGISTER(0x800228D4,ZZ_2281C_B8);
	ZZ_JUMPREGISTER(0x80022A88,ZZ_22978_110);
	ZZ_JUMPREGISTER(0x8002292C,ZZ_2281C_110);
	ZZ_JUMPREGISTER(0x80022650,ZZ_22570_E0);
	ZZ_JUMPREGISTER(0x800226A8,ZZ_22570_138);
	ZZ_JUMPREGISTER(0x80023074,ZZ_22CD0_3A4);
	ZZ_JUMPREGISTER(0x80022EDC,ZZ_22CD0_20C);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x800240D4,ZZ_240D4);
ZZ_MARK(0x800240D8);
ZZ_MARK(0x800240DC);
ZZ_MARK(0x800240E0);
ZZ_MARK(0x800240E4);
ZZ_MARK(0x800240E8);
ZZ_MARK(0x800240EC);
ZZ_MARK(0x800240F0);
ZZ_MARK(0x800240F4);
ZZ_MARK(0x800240F8);
ZZ_MARK(0x800240FC);
ZZ_MARK(0x80024100);
ZZ_MARK(0x80024104);
ZZ_MARK(0x80024108);
ZZ_MARK(0x8002410C);
ZZ_MARK(0x80024110);
ZZ_MARK(0x80024114);
ZZ_MARK(0x80024118);
ZZ_MARK(0x8002411C);
ZZ_MARK(0x80024120);
ZZ_MARK(0x80024124);
ZZ_MARK(0x80024128);
ZZ_MARK(0x8002412C);
ZZ_MARK(0x80024130);
ZZ_MARK(0x80024134);
ZZ_MARK(0x80024138);
ZZ_MARK(0x8002413C);
ZZ_MARK_TARGET(0x80024140,ZZ_240D4_6C);
ZZ_MARK(0x80024144);
ZZ_MARK(0x80024148);
ZZ_MARK(0x8002414C);
ZZ_MARK(0x80024150);
ZZ_MARK(0x80024154);
ZZ_MARK(0x80024158);
ZZ_MARK(0x8002415C);
ZZ_MARK_TARGET(0x80024160,ZZ_240D4_8C);
ZZ_MARK(0x80024164);
ZZ_MARK(0x80024168);
ZZ_MARK_TARGET(0x8002416C,ZZ_240D4_98);
ZZ_MARK(0x80024170);
ZZ_MARK(0x80024174);
ZZ_MARK(0x80024178);
ZZ_MARK(0x8002417C);
ZZ_MARK(0x80024180);
ZZ_MARK(0x80024184);
ZZ_MARK(0x80024188);
ZZ_MARK(0x8002418C);
ZZ_MARK(0x80024190);
ZZ_MARK_TARGET(0x80024194,ZZ_240D4_C0);
ZZ_MARK(0x80024198);
ZZ_MARK(0x8002419C);
ZZ_MARK_TARGET(0x800241A0,ZZ_240D4_CC);
ZZ_MARK(0x800241A4);
ZZ_MARK(0x800241A8);
ZZ_MARK(0x800241AC);
ZZ_MARK(0x800241B0);
ZZ_MARK_TARGET(0x800241B4,ZZ_240D4_E0);
ZZ_MARK(0x800241B8);
ZZ_MARK(0x800241BC);
ZZ_MARK(0x800241C0);
ZZ_MARK(0x800241C4);
ZZ_MARK(0x800241C8);
ZZ_MARK(0x800241CC);
ZZ_MARK_TARGET(0x800241D0,ZZ_240D4_FC);
ZZ_MARK(0x800241D4);
ZZ_MARK(0x800241D8);
ZZ_MARK(0x800241DC);
ZZ_MARK(0x800241E0);
ZZ_MARK_TARGET(0x800241E4,ZZ_240D4_110);
ZZ_MARK(0x800241E8);
ZZ_MARK(0x800241EC);
ZZ_MARK(0x800241F0);
ZZ_MARK(0x800241F4);
ZZ_MARK(0x800241F8);
ZZ_MARK(0x800241FC);
ZZ_MARK(0x80024200);
ZZ_MARK(0x80024204);
ZZ_MARK(0x80024208);
ZZ_MARK(0x8002420C);
ZZ_MARK_TARGET(0x80024210,ZZ_240D4_13C);
ZZ_MARK(0x80024214);
ZZ_MARK(0x80024218);
ZZ_MARK(0x8002421C);
ZZ_MARK(0x80024220);
ZZ_MARK(0x80024224);
ZZ_MARK(0x80024228);
ZZ_MARK(0x8002422C);
ZZ_MARK(0x80024230);
ZZ_MARK(0x80024234);
ZZ_MARK(0x80024238);
ZZ_MARK(0x8002423C);
ZZ_MARK(0x80024240);
ZZ_MARK(0x80024244);
ZZ_MARK(0x80024248);
ZZ_MARK(0x8002424C);
ZZ_MARK_TARGET(0x80024250,ZZ_240D4_17C);
ZZ_MARK(0x80024254);
ZZ_MARK(0x80024258);
ZZ_MARK(0x8002425C);
ZZ_MARK(0x80024260);
ZZ_MARK(0x80024264);
ZZ_MARK(0x80024268);
ZZ_MARK_TARGET(0x8002426C,ZZ_240D4_198);
ZZ_MARK(0x80024270);
ZZ_MARK(0x80024274);
ZZ_MARK(0x80024278);
ZZ_MARK(0x8002427C);
ZZ_MARK(0x80024280);
ZZ_MARK(0x80024284);
ZZ_MARK(0x80024288);
ZZ_MARK(0x8002428C);
ZZ_MARK(0x80024290);
ZZ_MARK(0x80024294);
ZZ_MARK(0x80024298);
ZZ_MARK(0x8002429C);
ZZ_MARK(0x800242A0);
ZZ_MARK(0x800242A4);
ZZ_MARK(0x800242A8);
ZZ_MARK(0x800242AC);
ZZ_MARK_TARGET(0x800242B0,ZZ_240D4_1DC);
ZZ_MARK(0x800242B4);
ZZ_MARK(0x800242B8);
ZZ_MARK(0x800242BC);
ZZ_MARK(0x800242C0);
ZZ_MARK(0x800242C4);
ZZ_MARK_TARGET(0x800242C8,ZZ_240D4_1F4);
ZZ_MARK(0x800242CC);
ZZ_MARK(0x800242D0);
ZZ_MARK(0x800242D4);
ZZ_MARK(0x800242D8);
ZZ_MARK(0x800242DC);
ZZ_MARK(0x800242E0);
ZZ_MARK_TARGET(0x800242E4,ZZ_240D4_210);
ZZ_MARK(0x800242E8);
ZZ_MARK(0x800242EC);
ZZ_MARK_TARGET(0x800242F0,ZZ_240D4_21C);
ZZ_MARK(0x800242F4);
ZZ_MARK(0x800242F8);
ZZ_MARK(0x800242FC);
ZZ_MARK(0x80024300);
ZZ_MARK(0x80024304);
ZZ_MARK(0x80024308);
ZZ_MARK(0x8002430C);
ZZ_MARK_TARGET(0x80024310,ZZ_240D4_23C);
ZZ_MARK(0x80024314);
ZZ_MARK(0x80024318);
ZZ_MARK_TARGET(0x8002431C,ZZ_240D4_248);
ZZ_MARK(0x80024320);
ZZ_MARK_TARGET(0x80024324,ZZ_240D4_250);
ZZ_MARK_TARGET(0x80024328,ZZ_240D4_254);
ZZ_MARK(0x8002432C);
ZZ_MARK(0x80024330);
ZZ_MARK_TARGET(0x80024334,ZZ_240D4_260);
ZZ_MARK(0x80024338);
ZZ_MARK(0x8002433C);
ZZ_MARK(0x80024340);
ZZ_MARK(0x80024344);
ZZ_MARK(0x80024348);
ZZ_MARK(0x8002434C);
ZZ_MARK(0x80024350);
ZZ_MARK(0x80024354);
ZZ_MARK(0x80024358);
ZZ_MARK_TARGET(0x8002435C,ZZ_240D4_288);
ZZ_MARK(0x80024360);
ZZ_MARK(0x80024364);
ZZ_MARK_TARGET(0x80024368,ZZ_240D4_294);
ZZ_MARK(0x8002436C);
ZZ_MARK(0x80024370);
ZZ_MARK(0x80024374);
ZZ_MARK(0x80024378);
ZZ_MARK(0x8002437C);
ZZ_MARK_TARGET(0x80024380,ZZ_240D4_2AC);
ZZ_MARK(0x80024384);
ZZ_MARK(0x80024388);
ZZ_MARK(0x8002438C);
ZZ_MARK(0x80024390);
ZZ_MARK(0x80024394);
ZZ_MARK(0x80024398);
ZZ_MARK(0x8002439C);
ZZ_MARK_TARGET(0x800243A0,ZZ_240D4_2CC);
ZZ_MARK(0x800243A4);
ZZ_MARK(0x800243A8);
ZZ_MARK_TARGET(0x800243AC,ZZ_240D4_2D8);
ZZ_MARK(0x800243B0);
ZZ_MARK(0x800243B4);
ZZ_MARK(0x800243B8);
ZZ_MARK(0x800243BC);
ZZ_MARK(0x800243C0);
ZZ_MARK(0x800243C4);
ZZ_MARK(0x800243C8);
ZZ_MARK(0x800243CC);
ZZ_MARK_TARGET(0x800243D0,ZZ_240D4_2FC);
ZZ_MARK(0x800243D4);
ZZ_MARK(0x800243D8);
ZZ_MARK(0x800243DC);
ZZ_MARK(0x800243E0);
ZZ_MARK(0x800243E4);
ZZ_MARK(0x800243E8);
ZZ_MARK(0x800243EC);
ZZ_MARK(0x800243F0);
ZZ_MARK(0x800243F4);
ZZ_MARK(0x800243F8);
