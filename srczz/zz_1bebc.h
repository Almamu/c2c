#ifdef ZZ_INCLUDE_CODE
ZZ_1BEBC:
	SP -= 272;
	EMU_Write32(SP + 264,S6); //+ 0x108
	S6 = EMU_ReadU32(SP + 288); //+ 0x120
	EMU_Write32(SP + 244,S1); //+ 0xF4
	S1 = A0;
	EMU_Write32(SP + 240,S0); //+ 0xF0
	S0 = A1;
	EMU_Write32(SP + 248,S2); //+ 0xF8
	S2 = A2;
	EMU_Write32(SP + 260,S5); //+ 0x104
	S5 = A3;
	T0 = 0x26700000;
	T0 |= 0x5EBF;
	EMU_Write32(SP + 268,RA); //+ 0x10C
	EMU_Write32(SP + 256,S4); //+ 0x100
	EMU_Write32(SP + 252,S3); //+ 0xFC
	V1 = EMU_ReadU32(S1 + 120); //+ 0x78
	A2 = EMU_ReadU8(S1 + 288); //+ 0x120
	A3 = 0x80060000;
	A3 = EMU_ReadU32(A3 + 2844); //+ 0xB1C
	A0 = S1 + 96;
	A1 = 0x80060000;
	A1 += 2772;
	V0 = A1 - 104;
	EMU_Write32(SP + 16,V0); //+ 0x10
	if ((int32_t)V1 >= 0)
	{
		ZZ_CLOCKCYCLES(27,0x8001BF2C);
		goto ZZ_1BEBC_70;
	}
	V1 = -V1;
	ZZ_CLOCKCYCLES(28,0x8001BF2C);
ZZ_1BEBC_70:
	EMU_SMultiply(V1,T0);
	V0 = 0x3C00;
	EMU_Write32(SP + 24,V0); //+ 0x18
	EMU_Write32(SP + 20,A3); //+ 0x14
	V0 = EMU_ReadU32(S1 + 172); //+ 0xAC
	A2 -= 6;
	A2 = A2 < 2;
	V1 = (int32_t)V1 >> 31;
	V0 >>= 18;
	V0 ^= 0x1;
	V0 &= 0x1;
	EMU_Write32(SP + 28,V0); //+ 0x1C
	T1 = HI;
	V0 = (int32_t)T1 >> 12;
	S3 = V0 - V1;
	RA = 0x8001BF70; //ZZ_1BEBC_B4
	A3 = S3;
	ZZ_CLOCKCYCLES(17,0x8003D664);
	goto ZZ_3D664;
ZZ_1BEBC_B4:
	if (!V0)
	{
		A1 = S0;
		ZZ_CLOCKCYCLES(2,0x8001C0E0);
		goto ZZ_1BEBC_224;
	}
	A1 = S0;
	S0 = A1 + 12;
	if ((int32_t)S2 <= 0)
	{
		V1 = R0;
		ZZ_CLOCKCYCLES(5,0x8001BFA4);
		goto ZZ_1BEBC_E8;
	}
	V1 = R0;
	ZZ_CLOCKCYCLES(5,0x8001BF84);
ZZ_1BEBC_C8:
	V0 = EMU_ReadU8(S0);
	if (V0)
	{
		V0 = (int32_t)V1 < (int32_t)S2;
		ZZ_CLOCKCYCLES(4,0x8001BF9C);
		goto ZZ_1BEBC_E0;
	}
	V0 = (int32_t)V1 < (int32_t)S2;
	V1 += 1;
	V0 = (int32_t)V1 < (int32_t)S2;
	ZZ_CLOCKCYCLES(6,0x8001BF9C);
ZZ_1BEBC_E0:
	if (V0)
	{
		S0 += 1;
		ZZ_CLOCKCYCLES(2,0x8001BF84);
		goto ZZ_1BEBC_C8;
	}
	S0 += 1;
	ZZ_CLOCKCYCLES(2,0x8001BFA4);
ZZ_1BEBC_E8:
	V0 = EMU_ReadU32(S1 + 12); //+ 0xC
	V1 = EMU_ReadU32(S1 + 264); //+ 0x108
	A0 = EMU_ReadU32(V0 + 36); //+ 0x24
	V0 = V1 >> 8;
	if (V0)
	{
		V0 <<= 2;
		ZZ_CLOCKCYCLES(6,0x8001BFC8);
		goto ZZ_1BEBC_10C;
	}
	V0 <<= 2;
	V0 = EMU_ReadU32(A1 + 8); //+ 0x8
	V0 <<= 2;
	ZZ_CLOCKCYCLES(9,0x8001BFC8);
ZZ_1BEBC_10C:
	S2 = A0 + V0;
	A0 = S2 + 4;
	A1 = 0x1;
	RA = 0x8001BFDC; //ZZ_1BEBC_120
	A2 = R0;
	ZZ_CLOCKCYCLES(5,0x80014364);
	goto ZZ_14364;
ZZ_1BEBC_120:
	A0 = EMU_ReadU32(S1 + 188); //+ 0xBC
	V1 = EMU_ReadU32(A0 - 16); //+ 0xFFFFFFF0
	EMU_Write32(SP + 16,V1); //+ 0x10
	V1 = EMU_ReadU32(S1 + 188); //+ 0xBC
	V1 = EMU_ReadU32(V1 - 20); //+ 0xFFFFFFEC
	EMU_Write32(SP + 20,V1); //+ 0x14
	A2 = EMU_ReadU32(A0 - 8); //+ 0xFFFFFFF8
	A3 = EMU_ReadU32(A0 - 12); //+ 0xFFFFFFF4
	A1 = S0;
	S4 = V0;
	RA = 0x8001C01C; //ZZ_1BEBC_160
	A0 = SP + 32;
	ZZ_CLOCKCYCLES(16,0x800494EC);
	goto ZZ_494EC;
ZZ_1BEBC_160:
	V0 = EMU_ReadU8(SP + 32); //+ 0x20
	S0 = SP + 32;
	if (!V0)
	{
		V1 = S0;
		ZZ_CLOCKCYCLES(4,0x8001C044);
		goto ZZ_1BEBC_188;
	}
	V1 = S0;
	V1 += 1;
	ZZ_CLOCKCYCLES(5,0x8001C030);
ZZ_1BEBC_174:
	V0 = EMU_ReadU8(V1);
	if (V0)
	{
		V1 += 1;
		ZZ_CLOCKCYCLES(4,0x8001C030);
		goto ZZ_1BEBC_174;
	}
	V1 += 1;
	V1 -= 1;
	ZZ_CLOCKCYCLES(5,0x8001C044);
ZZ_1BEBC_188:
	if (V1 == S0)
	{
		V1 -= 1;
		ZZ_CLOCKCYCLES(2,0x8001C078);
		goto ZZ_1BEBC_1BC;
	}
	V1 -= 1;
	if (V1 == S0)
	{
		ZZ_CLOCKCYCLES(4,0x8001C074);
		goto ZZ_1BEBC_1B8;
	}
	A0 = 0x20;
	ZZ_CLOCKCYCLES(5,0x8001C058);
ZZ_1BEBC_19C:
	V0 = EMU_ReadU8(V1);
	if (V0 != A0)
	{
		ZZ_CLOCKCYCLES(4,0x8001C074);
		goto ZZ_1BEBC_1B8;
	}
	V1 -= 1;
	if (V1 != S0)
	{
		ZZ_CLOCKCYCLES(7,0x8001C058);
		goto ZZ_1BEBC_19C;
	}
	ZZ_CLOCKCYCLES(7,0x8001C074);
ZZ_1BEBC_1B8:
	EMU_Write8(V1 + 1,R0); //+ 0x1
	ZZ_CLOCKCYCLES(1,0x8001C078);
ZZ_1BEBC_1BC:
	if ((int32_t)S6 > 0)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(2,0x8001C0C0);
		goto ZZ_1BEBC_204;
	}
	V0 = R0;
	A0 = S1;
	A1 = S0;
	A2 = R0;
	A3 = S2;
	EMU_Write32(SP + 16,S4); //+ 0x10
	EMU_Write32(SP + 20,S3); //+ 0x14
	RA = 0x8001C0A0; //ZZ_1BEBC_1E4
	EMU_Write32(SP + 24,R0); //+ 0x18
	ZZ_CLOCKCYCLES(10,0x8001B974);
	goto ZZ_1B974;
ZZ_1BEBC_1E4:
	if (S6)
	{
		ZZ_CLOCKCYCLES(2,0x8001C0BC);
		goto ZZ_1BEBC_200;
	}
	V0 = -V0;
	V1 = V0 >> 31;
	V0 += V1;
	V0 = (int32_t)V0 >> 1;
	ZZ_CLOCKCYCLES(7,0x8001C0C0);
	goto ZZ_1BEBC_204;
ZZ_1BEBC_200:
	V0 = -V0;
	ZZ_CLOCKCYCLES(1,0x8001C0C0);
ZZ_1BEBC_204:
	A0 = S1;
	A1 = S0;
	A2 = V0;
	A3 = S2;
	EMU_Write32(SP + 16,S4); //+ 0x10
	EMU_Write32(SP + 20,S3); //+ 0x14
	RA = 0x8001C0E0; //ZZ_1BEBC_224
	EMU_Write32(SP + 24,S5); //+ 0x18
	ZZ_CLOCKCYCLES(8,0x8001B974);
	goto ZZ_1B974;
ZZ_1BEBC_224:
	RA = EMU_ReadU32(SP + 268); //+ 0x10C
	S6 = EMU_ReadU32(SP + 264); //+ 0x108
	S5 = EMU_ReadU32(SP + 260); //+ 0x104
	S4 = EMU_ReadU32(SP + 256); //+ 0x100
	S3 = EMU_ReadU32(SP + 252); //+ 0xFC
	S2 = EMU_ReadU32(SP + 248); //+ 0xF8
	S1 = EMU_ReadU32(SP + 244); //+ 0xF4
	S0 = EMU_ReadU32(SP + 240); //+ 0xF0
	SP += 272;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(11);
	ZZ_JUMPREGISTER(0x8001B05C,ZZ_1AD30_32C);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8001BEBC,0x8001BF2C,ZZ_1BEBC);
ZZ_MARK_TARGET(0x8001BF2C,0x8001BF70,ZZ_1BEBC_70);
ZZ_MARK_TARGET(0x8001BF70,0x8001BF84,ZZ_1BEBC_B4);
ZZ_MARK_TARGET(0x8001BF84,0x8001BF9C,ZZ_1BEBC_C8);
ZZ_MARK_TARGET(0x8001BF9C,0x8001BFA4,ZZ_1BEBC_E0);
ZZ_MARK_TARGET(0x8001BFA4,0x8001BFC8,ZZ_1BEBC_E8);
ZZ_MARK_TARGET(0x8001BFC8,0x8001BFDC,ZZ_1BEBC_10C);
ZZ_MARK_TARGET(0x8001BFDC,0x8001C01C,ZZ_1BEBC_120);
ZZ_MARK_TARGET(0x8001C01C,0x8001C030,ZZ_1BEBC_160);
ZZ_MARK_TARGET(0x8001C030,0x8001C044,ZZ_1BEBC_174);
ZZ_MARK_TARGET(0x8001C044,0x8001C058,ZZ_1BEBC_188);
ZZ_MARK_TARGET(0x8001C058,0x8001C074,ZZ_1BEBC_19C);
ZZ_MARK_TARGET(0x8001C074,0x8001C078,ZZ_1BEBC_1B8);
ZZ_MARK_TARGET(0x8001C078,0x8001C0A0,ZZ_1BEBC_1BC);
ZZ_MARK_TARGET(0x8001C0A0,0x8001C0BC,ZZ_1BEBC_1E4);
ZZ_MARK_TARGET(0x8001C0BC,0x8001C0C0,ZZ_1BEBC_200);
ZZ_MARK_TARGET(0x8001C0C0,0x8001C0E0,ZZ_1BEBC_204);
ZZ_MARK_TARGET(0x8001C0E0,0x8001C10C,ZZ_1BEBC_224);
