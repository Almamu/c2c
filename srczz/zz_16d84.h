#ifdef ZZ_INCLUDE_CODE
ZZ_16D84:
	SP -= 56;
	EMU_Write32(SP + 44,S7); //+ 0x2C
	S7 = A0;
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 + 14064); //+ 0x36F0
	V0 = S7 << 1;
	V0 += S7;
	V0 <<= 3;
	EMU_Write32(SP + 48,RA); //+ 0x30
	EMU_Write32(SP + 40,S6); //+ 0x28
	EMU_Write32(SP + 36,S5); //+ 0x24
	EMU_Write32(SP + 32,S4); //+ 0x20
	EMU_Write32(SP + 28,S3); //+ 0x1C
	EMU_Write32(SP + 24,S2); //+ 0x18
	EMU_Write32(SP + 20,S1); //+ 0x14
	EMU_Write32(SP + 16,S0); //+ 0x10
	A0 = EMU_ReadU32(V1 + 8); //+ 0x8
	A2 = V0 + S7;
	V0 = A2 << 2;
	S6 = V0 >> 3;
	V0 = A0 + 24;
	EMU_Write32(V1 + 8,V0); //+ 0x8
	A3 = 0x80060000;
	A3 = EMU_ReadU32(A3 + 14060); //+ 0x36EC
	V0 = S7 << 4;
	V0 = V0 - S7;
	V0 <<= 2;
	V1 = EMU_ReadU32(A3);
	S4 = V0 >> 3;
	V0 = 0x1;
	if (V1 != V0)
	{
		S5 = A0;
		ZZ_CLOCKCYCLES(32,0x80016E10);
		goto ZZ_16D84_8C;
	}
	S5 = A0;
	V0 = 0x200;
	V0 = V0 - S6;
	ZZ_CLOCKCYCLES(35,0x80016E14);
	goto ZZ_16D84_90;
ZZ_16D84_8C:
	V0 = -S6;
	ZZ_CLOCKCYCLES(1,0x80016E14);
ZZ_16D84_90:
	EMU_Write16(A3 + 8244,V0); //+ 0x2034
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 + 14060); //+ 0x36EC
	V0 = -S4;
	if (!S7)
	{
		EMU_Write16(V1 + 8246,V0); //+ 0x2036
		ZZ_CLOCKCYCLES(6,0x80016F9C);
		goto ZZ_16D84_218;
	}
	EMU_Write16(V1 + 8246,V0); //+ 0x2036
	if (A1)
	{
		V0 = A1 << 1;
		ZZ_CLOCKCYCLES(8,0x80016E40);
		goto ZZ_16D84_BC;
	}
	V0 = A1 << 1;
	S4 = R0;
	S6 = R0;
	ZZ_CLOCKCYCLES(11,0x80016E64);
	goto ZZ_16D84_E0;
ZZ_16D84_BC:
	V0 += A1;
	V0 <<= 3;
	V0 += A1;
	V0 <<= 2;
	S6 = V0 >> 3;
	V0 = A1 << 4;
	V0 = V0 - A1;
	V0 <<= 2;
	S4 = V0 >> 3;
	ZZ_CLOCKCYCLES(9,0x80016E64);
ZZ_16D84_E0:
	A0 = S5;
	V0 = S6 + 512;
	S2 = V0 - A2;
	S0 = S4 + 256;
	EMU_Write16(S5 + 10,S4); //+ 0xA
	EMU_Write16(S5 + 14,S4); //+ 0xE
	EMU_Write16(S5 + 8,S2); //+ 0x8
	EMU_Write16(S5 + 12,V0); //+ 0xC
	EMU_Write16(S5 + 16,S2); //+ 0x10
	EMU_Write16(S5 + 18,S0); //+ 0x12
	EMU_Write16(S5 + 20,V0); //+ 0x14
	EMU_Write16(S5 + 22,S0); //+ 0x16
	EMU_Write8(S5 + 4,R0); //+ 0x4
	EMU_Write8(S5 + 5,R0); //+ 0x5
	RA = 0x80016EA4; //ZZ_16D84_120
	EMU_Write8(S5 + 6,R0); //+ 0x6
	ZZ_CLOCKCYCLES(16,0x8004B9A8);
	goto ZZ_4B9A8;
ZZ_16D84_120:
	S3 = 0x80060000;
	S3 += 14064;
	A0 = EMU_ReadU32(S3);
	A1 = S5;
	RA = 0x80016EBC; //ZZ_16D84_138
	A0 += 8212;
	ZZ_CLOCKCYCLES(6,0x8004B854);
	goto ZZ_4B854;
ZZ_16D84_138:
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 + 14064); //+ 0x36F0
	V0 = EMU_ReadU32(V1 + 8); //+ 0x8
	S1 = S6;
	S5 = V0;
	A0 = S5;
	V0 = S5 + 24;
	EMU_Write32(V1 + 8,V0); //+ 0x8
	V0 = S7 << 4;
	V0 = V0 - S7;
	V0 = S0 - V0;
	EMU_Write16(S5 + 8,S1); //+ 0x8
	EMU_Write16(S5 + 10,V0); //+ 0xA
	EMU_Write16(S5 + 12,S2); //+ 0xC
	EMU_Write16(S5 + 14,V0); //+ 0xE
	EMU_Write16(S5 + 16,S1); //+ 0x10
	EMU_Write16(S5 + 18,S0); //+ 0x12
	EMU_Write16(S5 + 20,S2); //+ 0x14
	EMU_Write16(S5 + 22,S0); //+ 0x16
	EMU_Write8(S5 + 4,R0); //+ 0x4
	EMU_Write8(S5 + 5,R0); //+ 0x5
	RA = 0x80016F1C; //ZZ_16D84_198
	EMU_Write8(S5 + 6,R0); //+ 0x6
	ZZ_CLOCKCYCLES(24,0x8004B9A8);
	goto ZZ_4B9A8;
ZZ_16D84_198:
	A0 = EMU_ReadU32(S3);
	A1 = S5;
	RA = 0x80016F2C; //ZZ_16D84_1A8
	A0 += 8212;
	ZZ_CLOCKCYCLES(4,0x8004B854);
	goto ZZ_4B854;
ZZ_16D84_1A8:
	A1 = 0x80060000;
	A1 = EMU_ReadU32(A1 + 14064); //+ 0x36F0
	V1 = EMU_ReadU32(A1 + 8); //+ 0x8
	V0 = S7 << 3;
	V0 += S7;
	A2 = V0 >> 3;
	S5 = V1;
	A0 = S5;
	V0 = S5 + 24;
	EMU_Write32(A1 + 8,V0); //+ 0x8
	V0 = S6 + A2;
	EMU_Write16(S5 + 8,S1); //+ 0x8
	EMU_Write16(S5 + 10,S4); //+ 0xA
	EMU_Write16(S5 + 12,V0); //+ 0xC
	EMU_Write16(S5 + 14,S4); //+ 0xE
	EMU_Write16(S5 + 16,S1); //+ 0x10
	EMU_Write16(S5 + 18,S0); //+ 0x12
	EMU_Write16(S5 + 20,V0); //+ 0x14
	EMU_Write16(S5 + 22,S0); //+ 0x16
	EMU_Write8(S5 + 4,R0); //+ 0x4
	EMU_Write8(S5 + 5,R0); //+ 0x5
	RA = 0x80016F8C; //ZZ_16D84_208
	EMU_Write8(S5 + 6,R0); //+ 0x6
	ZZ_CLOCKCYCLES(24,0x8004B9A8);
	goto ZZ_4B9A8;
ZZ_16D84_208:
	A0 = EMU_ReadU32(S3);
	A1 = S5;
	RA = 0x80016F9C; //ZZ_16D84_218
	A0 += 8212;
	ZZ_CLOCKCYCLES(4,0x8004B854);
	goto ZZ_4B854;
ZZ_16D84_218:
	RA = 0x80016FA4; //ZZ_16D84_220
	ZZ_CLOCKCYCLES(2,0x80023FF0);
	goto ZZ_23FF0;
ZZ_16D84_220:
	A2 = V0;
	V0 = 0x2AAA0000;
	V0 |= 0xAAAB;
	EMU_SMultiply(A2,V0);
	V1 = (int32_t)A2 >> 31;
	T0 = HI;
	V0 = (int32_t)T0 >> 2;
	V0 = V0 - V1;
	EMU_SMultiply(V0,S7);
	V1 = 0x80060000;
	V1 += 2844;
	V0 = EMU_ReadU32(V1);
	T0 = LO;
	A2 = A2 - T0;
	if (V0 == A2)
	{
		ZZ_CLOCKCYCLES(16,0x80016FF0);
		goto ZZ_16D84_26C;
	}
	EMU_Write32(V1,A2);
	RA = 0x80016FF0; //ZZ_16D84_26C
	A0 = A2;
	ZZ_CLOCKCYCLES(19,0x8004F2A0);
	goto ZZ_4F2A0;
ZZ_16D84_26C:
	RA = EMU_ReadU32(SP + 48); //+ 0x30
	S7 = EMU_ReadU32(SP + 44); //+ 0x2C
	S6 = EMU_ReadU32(SP + 40); //+ 0x28
	S5 = EMU_ReadU32(SP + 36); //+ 0x24
	S4 = EMU_ReadU32(SP + 32); //+ 0x20
	S3 = EMU_ReadU32(SP + 28); //+ 0x1C
	S2 = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 56;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(12);
	ZZ_JUMPREGISTER(0x800166BC,ZZ_1658C_130);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80016D84,0x80016E10,ZZ_16D84);
ZZ_MARK_TARGET(0x80016E10,0x80016E14,ZZ_16D84_8C);
ZZ_MARK_TARGET(0x80016E14,0x80016E40,ZZ_16D84_90);
ZZ_MARK_TARGET(0x80016E40,0x80016E64,ZZ_16D84_BC);
ZZ_MARK_TARGET(0x80016E64,0x80016EA4,ZZ_16D84_E0);
ZZ_MARK_TARGET(0x80016EA4,0x80016EBC,ZZ_16D84_120);
ZZ_MARK_TARGET(0x80016EBC,0x80016F1C,ZZ_16D84_138);
ZZ_MARK_TARGET(0x80016F1C,0x80016F2C,ZZ_16D84_198);
ZZ_MARK_TARGET(0x80016F2C,0x80016F8C,ZZ_16D84_1A8);
ZZ_MARK_TARGET(0x80016F8C,0x80016F9C,ZZ_16D84_208);
ZZ_MARK_TARGET(0x80016F9C,0x80016FA4,ZZ_16D84_218);
ZZ_MARK_TARGET(0x80016FA4,0x80016FF0,ZZ_16D84_220);
ZZ_MARK_TARGET(0x80016FF0,0x80017020,ZZ_16D84_26C);
