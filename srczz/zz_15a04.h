#ifdef ZZ_INCLUDE_CODE
ZZ_15A04:
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 25676); //+ 0xFFFF9BB4
	SP -= 80;
	EMU_Write32(SP + 52,S3); //+ 0x34
	S3 = R0;
	EMU_Write32(SP + 76,RA); //+ 0x4C
	EMU_Write32(SP + 72,FP); //+ 0x48
	EMU_Write32(SP + 68,S7); //+ 0x44
	EMU_Write32(SP + 64,S6); //+ 0x40
	EMU_Write32(SP + 60,S5); //+ 0x3C
	EMU_Write32(SP + 56,S4); //+ 0x38
	EMU_Write32(SP + 48,S2); //+ 0x30
	EMU_Write32(SP + 44,S1); //+ 0x2C
	if ((int32_t)V0 <= 0)
	{
		EMU_Write32(SP + 40,S0); //+ 0x28
		ZZ_CLOCKCYCLES(15,0x8001610C);
		goto ZZ_15A04_708;
	}
	EMU_Write32(SP + 40,S0); //+ 0x28
	S7 = 0x80070000;
	S7 -= 12184;
	FP = S7 + 4;
	S6 = 0x8;
	S5 = S7 - 188;
	S4 = R0;
	ZZ_CLOCKCYCLES(21,0x80015A58);
ZZ_15A04_54:
	V0 = 0x80070000;
	V0 -= 25672;
	S0 = S4 + V0;
	V0 = EMU_ReadU32(S0 + 44); //+ 0x2C
	V1 = EMU_ReadU32(S0 + 40); //+ 0x28
	A0 = EMU_ReadU32(S0 + 36); //+ 0x24
	A1 = EMU_ReadS8(S0);
	EMU_Write32(S0 + 68,R0); //+ 0x44
	EMU_Write32(S0 + 52,V0); //+ 0x34
	EMU_Write32(S0 + 44,V1); //+ 0x2C
	if (A1)
	{
		EMU_Write32(S0 + 48,A0); //+ 0x30
		ZZ_CLOCKCYCLES(12,0x80015D04);
		goto ZZ_15A04_300;
	}
	EMU_Write32(S0 + 48,A0); //+ 0x30
	V1 = EMU_ReadS8(S0 + 1); //+ 0x1
	V0 = 0x53;
	if (V1 == V0)
	{
		V0 = 0x73;
		ZZ_CLOCKCYCLES(16,0x80015AA0);
		goto ZZ_15A04_9C;
	}
	V0 = 0x73;
	if (V1 != V0)
	{
		ZZ_CLOCKCYCLES(18,0x80015CE0);
		goto ZZ_15A04_2DC;
	}
	ZZ_CLOCKCYCLES(18,0x80015AA0);
ZZ_15A04_9C:
	S2 = EMU_ReadU8(S0 + 6); //+ 0x6
	A0 = EMU_ReadU32(S7);
	S1 = EMU_ReadU8(S0 + 7); //+ 0x7
	S2 = S2 - A0;
	if ((int32_t)S2 >= 0)
	{
		V1 = S2 << 7;
		ZZ_CLOCKCYCLES(6,0x80015AC4);
		goto ZZ_15A04_C0;
	}
	V1 = S2 << 7;
	V0 = EMU_ReadU32(S7 + 8); //+ 0x8
	V0 = A0 - V0;
	ZZ_CLOCKCYCLES(9,0x80015AD0);
	goto ZZ_15A04_CC;
ZZ_15A04_C0:
	V0 = EMU_ReadU32(S7 + 16); //+ 0x10
	V0 = V0 - A0;
	ZZ_CLOCKCYCLES(3,0x80015AD0);
ZZ_15A04_CC:
	EMU_SDivide(V1,V0);
	if (V0)
	{
		ZZ_CLOCKCYCLES(3,0x80015AE0);
		goto ZZ_15A04_DC;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(4,0x80015AE0);
ZZ_15A04_DC:
	AT = -1;
	if (V0 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x80015AF8);
		goto ZZ_15A04_F4;
	}
	AT = 0x80000000;
	if (V1 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x80015AF8);
		goto ZZ_15A04_F4;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x80015AF8);
ZZ_15A04_F4:
	S2 = LO;
	V0 = (int32_t)S2 < 127;
	if (!V0)
	{
		V0 = (int32_t)S2 < -128;
		ZZ_CLOCKCYCLES(5,0x80015B1C);
		goto ZZ_15A04_118;
	}
	V0 = (int32_t)S2 < -128;
	if (V0)
	{
		V1 = -128;
		ZZ_CLOCKCYCLES(7,0x80015B20);
		goto ZZ_15A04_11C;
	}
	V1 = -128;
	V1 = S2;
	ZZ_CLOCKCYCLES(9,0x80015B20);
	goto ZZ_15A04_11C;
ZZ_15A04_118:
	V1 = 0x7F;
	ZZ_CLOCKCYCLES(1,0x80015B20);
ZZ_15A04_11C:
	A0 = EMU_ReadU32(FP);
	S1 = S1 - A0;
	if ((int32_t)S1 >= 0)
	{
		S2 = V1;
		ZZ_CLOCKCYCLES(5,0x80015B48);
		goto ZZ_15A04_144;
	}
	S2 = V1;
	V1 = EMU_ReadU32(FP + 8); //+ 0x8
	V0 = S1 << 7;
	V0 = V0 - S1;
	V1 = A0 - V1;
	ZZ_CLOCKCYCLES(10,0x80015B58);
	goto ZZ_15A04_154;
ZZ_15A04_144:
	V1 = EMU_ReadU32(FP + 16); //+ 0x10
	V0 = S1 << 7;
	V0 = V0 - S1;
	V1 = V1 - A0;
	ZZ_CLOCKCYCLES(4,0x80015B58);
ZZ_15A04_154:
	EMU_SDivide(V0,V1);
	if (V1)
	{
		ZZ_CLOCKCYCLES(3,0x80015B68);
		goto ZZ_15A04_164;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(4,0x80015B68);
ZZ_15A04_164:
	AT = -1;
	if (V1 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x80015B80);
		goto ZZ_15A04_17C;
	}
	AT = 0x80000000;
	if (V0 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x80015B80);
		goto ZZ_15A04_17C;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x80015B80);
ZZ_15A04_17C:
	S1 = LO;
	V0 = (int32_t)S1 < 127;
	if (!V0)
	{
		V0 = (int32_t)S1 < -128;
		ZZ_CLOCKCYCLES(5,0x80015BA4);
		goto ZZ_15A04_1A0;
	}
	V0 = (int32_t)S1 < -128;
	if (V0)
	{
		V1 = -128;
		ZZ_CLOCKCYCLES(7,0x80015BA8);
		goto ZZ_15A04_1A4;
	}
	V1 = -128;
	V1 = S1;
	ZZ_CLOCKCYCLES(9,0x80015BA8);
	goto ZZ_15A04_1A4;
ZZ_15A04_1A0:
	V1 = 0x7F;
	ZZ_CLOCKCYCLES(1,0x80015BA8);
ZZ_15A04_1A4:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 2916); //+ 0xB64
	if (!V0)
	{
		S1 = V1;
		ZZ_CLOCKCYCLES(5,0x80015BF8);
		goto ZZ_15A04_1F4;
	}
	S1 = V1;
	V0 = EMU_ReadU32(V0 + 16); //+ 0x10
	V0 = EMU_ReadU32(V0 + 668); //+ 0x29C
	V1 = 0x200000;
	V0 &= V1;
	if (!V0)
	{
		A0 = S2;
		ZZ_CLOCKCYCLES(12,0x80015BF8);
		goto ZZ_15A04_1F4;
	}
	A0 = S2;
	RA = 0x80015BE0; //ZZ_15A04_1DC
	A1 = S1;
	ZZ_CLOCKCYCLES(14,0x8004F310);
	goto ZZ_4F310;
ZZ_15A04_1DC:
	A0 = V0 & 0xFFF;
	A1 = 0x200;
	RA = 0x80015BF0; //ZZ_15A04_1EC
	A2 = 0x5000;
	ZZ_CLOCKCYCLES(4,0x8001E888);
	goto ZZ_1E888;
ZZ_15A04_1EC:
	EMU_Write32(S0 + 56,V0); //+ 0x38
	ZZ_CLOCKCYCLES(2,0x80015C0C);
	goto ZZ_15A04_208;
ZZ_15A04_1F4:
	A0 = S2;
	RA = 0x80015C04; //ZZ_15A04_200
	A1 = S1;
	ZZ_CLOCKCYCLES(3,0x8004F310);
	goto ZZ_4F310;
ZZ_15A04_200:
	V0 &= 0xFFF;
	EMU_Write32(S0 + 56,V0); //+ 0x38
	ZZ_CLOCKCYCLES(2,0x80015C0C);
ZZ_15A04_208:
	V1 = EMU_ReadU32(S0 + 56); //+ 0x38
	V0 = 0x8FA;
	V0 = V0 - V1;
	V0 &= 0xFFF;
	if ((int32_t)V0 >= 0)
	{
		EMU_SMultiply(S2,S2);
		ZZ_CLOCKCYCLES(6,0x80015C28);
		goto ZZ_15A04_224;
	}
	EMU_SMultiply(S2,S2);
	V0 += 511;
	ZZ_CLOCKCYCLES(7,0x80015C28);
ZZ_15A04_224:
	V1 = LO;
	EMU_SMultiply(S1,S1);
	V0 = (int32_t)V0 >> 9;
	EMU_Write32(S0 + 64,V0); //+ 0x40
	T1 = LO;
	RA = 0x80015C4C; //ZZ_15A04_248
	A0 = V1 + T1;
	ZZ_CLOCKCYCLES(9,0x80041D10);
	goto ZZ_41D10;
ZZ_15A04_248:
	V0 <<= 8;
	V0 = (int32_t)V0 >> 7;
	EMU_Write32(S0 + 60,V0); //+ 0x3C
	V0 = (int32_t)V0 < 102;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(6,0x80015C6C);
		goto ZZ_15A04_268;
	}
	EMU_Write32(S0 + 60,R0); //+ 0x3C
	EMU_Write32(S0 + 64,S6); //+ 0x40
	ZZ_CLOCKCYCLES(8,0x80015C6C);
ZZ_15A04_268:
	V0 = EMU_ReadU16(S0 + 2); //+ 0x2
	A0 = EMU_ReadS8(S0 + 1); //+ 0x1
	V1 = V0 & 0xFF;
	V0 >>= 8;
	V1 <<= 8;
	A1 = ~(V0 | V1);
	V0 = A1 & 0xFFFF;
	EMU_Write32(S0 + 40,V0); //+ 0x28
	V0 = 0x53;
	if (A0 != V0)
	{
		V0 = A1 & 0x2;
		ZZ_CLOCKCYCLES(11,0x80015D04);
		goto ZZ_15A04_300;
	}
	V0 = A1 & 0x2;
	if (!V0)
	{
		V1 = A1 & 0xF961;
		ZZ_CLOCKCYCLES(13,0x80015CA4);
		goto ZZ_15A04_2A0;
	}
	V1 = A1 & 0xF961;
	V1 |= 0x4;
	ZZ_CLOCKCYCLES(14,0x80015CA4);
ZZ_15A04_2A0:
	V0 = A1 & 0x4;
	if (!V0)
	{
		V0 = A1 & 0x8;
		ZZ_CLOCKCYCLES(3,0x80015CB4);
		goto ZZ_15A04_2B0;
	}
	V0 = A1 & 0x8;
	V1 |= 0x80;
	ZZ_CLOCKCYCLES(4,0x80015CB4);
ZZ_15A04_2B0:
	if (!V0)
	{
		V0 = A1 & 0x10;
		ZZ_CLOCKCYCLES(2,0x80015CC0);
		goto ZZ_15A04_2BC;
	}
	V0 = A1 & 0x10;
	V1 |= 0x10;
	ZZ_CLOCKCYCLES(3,0x80015CC0);
ZZ_15A04_2BC:
	if (!V0)
	{
		V0 = A1 & 0x80;
		ZZ_CLOCKCYCLES(2,0x80015CCC);
		goto ZZ_15A04_2C8;
	}
	V0 = A1 & 0x80;
	V1 |= 0x8;
	ZZ_CLOCKCYCLES(3,0x80015CCC);
ZZ_15A04_2C8:
	if (!V0)
	{
		ZZ_CLOCKCYCLES(2,0x80015CD8);
		goto ZZ_15A04_2D4;
	}
	V1 |= 0x2;
	ZZ_CLOCKCYCLES(3,0x80015CD8);
ZZ_15A04_2D4:
	EMU_Write32(S0 + 40,V1); //+ 0x28
	ZZ_CLOCKCYCLES(2,0x80015D04);
	goto ZZ_15A04_300;
ZZ_15A04_2DC:
	V0 = EMU_ReadU16(S0 + 2); //+ 0x2
	EMU_Write32(S0 + 60,R0); //+ 0x3C
	EMU_Write32(S0 + 64,S6); //+ 0x40
	V1 = V0 & 0xFF;
	V0 >>= 8;
	V1 <<= 8;
	V0 = ~(V0 | V1);
	V0 &= 0xFFFF;
	EMU_Write32(S0 + 40,V0); //+ 0x28
	ZZ_CLOCKCYCLES(9,0x80015D04);
ZZ_15A04_300:
	if (S3)
	{
		V0 = 0x1;
		ZZ_CLOCKCYCLES(2,0x80015EBC);
		goto ZZ_15A04_4B8;
	}
	V0 = 0x1;
	V1 = EMU_ReadU32(S5);
	T0 = 0x3;
	if (V1 == T0)
	{
		V0 = V1 < 4;
		ZZ_CLOCKCYCLES(6,0x80015D48);
		goto ZZ_15A04_344;
	}
	V0 = V1 < 4;
	if (!V0)
	{
		V0 = 0x2;
		ZZ_CLOCKCYCLES(8,0x80015D34);
		goto ZZ_15A04_330;
	}
	V0 = 0x2;
	if (V1 == V0)
	{
		V0 = 0x1;
		ZZ_CLOCKCYCLES(10,0x80015DCC);
		goto ZZ_15A04_3C8;
	}
	V0 = 0x1;
	ZZ_CLOCKCYCLES(12,0x80015EBC);
	goto ZZ_15A04_4B8;
ZZ_15A04_330:
	V0 = 0x4;
	if (V1 == V0)
	{
		V0 = 0x1;
		ZZ_CLOCKCYCLES(3,0x80015D50);
		goto ZZ_15A04_34C;
	}
	V0 = 0x1;
	ZZ_CLOCKCYCLES(5,0x80015EBC);
	goto ZZ_15A04_4B8;
ZZ_15A04_344:
	EMU_Write32(S0 + 40,R0); //+ 0x28
	ZZ_CLOCKCYCLES(2,0x80015EB8);
	goto ZZ_15A04_4B4;
ZZ_15A04_34C:
	V0 = EMU_ReadU32(S5 + 4); //+ 0x4
	V0 += 1;
	V0 = V0 < 2;
	if (!V0)
	{
		V0 = 0x1;
		ZZ_CLOCKCYCLES(6,0x80015EBC);
		goto ZZ_15A04_4B8;
	}
	V0 = 0x1;
	V0 = EMU_ReadU32(GP + 604); //+ 0x25C
	V1 = EMU_ReadU32(V0);
	A1 = EMU_ReadU32(S5 - 116); //+ 0xFFFFFF8C
	A0 = EMU_ReadU32(GP + 504); //+ 0x1F8
	V1 <<= 3;
	V1 += 4240;
	V0 += V1;
	A0 = A0 < V0;
	A0 ^= 0x1;
	if (!A1)
	{
		EMU_Write32(SP + 24,A0); //+ 0x18
		ZZ_CLOCKCYCLES(18,0x80015DC4);
		goto ZZ_15A04_3C0;
	}
	EMU_Write32(SP + 24,A0); //+ 0x18
	A0 = R0;
	A2 = 0xE00;
	V0 = SP + 24;
	A3 = 0x1;
	RA = 0x80015DB0; //ZZ_15A04_3AC
	EMU_Write32(SP + 16,V0); //+ 0x10
	ZZ_CLOCKCYCLES(24,0x8001CD48);
	goto ZZ_1CD48;
ZZ_15A04_3AC:
	V0 = 0x108;
	T0 = 0x3;
	EMU_Write32(S5 - 404,V0); //+ 0xFFFFFE6C
	EMU_Write32(S5,T0);
	ZZ_CLOCKCYCLES(5,0x80015EB8);
	goto ZZ_15A04_4B4;
ZZ_15A04_3C0:
	EMU_Write32(S5,R0);
	ZZ_CLOCKCYCLES(2,0x80015EB8);
	goto ZZ_15A04_4B4;
ZZ_15A04_3C8:
	A0 = EMU_ReadU32(GP + 604); //+ 0x25C
	V1 = EMU_ReadU32(GP + 504); //+ 0x1F8
	A1 = EMU_ReadU32(S0 + 40); //+ 0x28
	EMU_Write32(S0 + 60,R0); //+ 0x3C
	V0 = A0 + 4240;
	if (V1 != V0)
	{
		EMU_Write32(S0 + 64,S6); //+ 0x40
		ZZ_CLOCKCYCLES(7,0x80015DFC);
		goto ZZ_15A04_3F8;
	}
	EMU_Write32(S0 + 64,S6); //+ 0x40
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 + 14056); //+ 0x36E8
	V0 = EMU_ReadU32(A0 + 4236); //+ 0x108C
	EMU_Write32(V1 + 20,V0); //+ 0x14
	ZZ_CLOCKCYCLES(12,0x80015DFC);
ZZ_15A04_3F8:
	V0 = EMU_ReadU32(GP + 504); //+ 0x1F8
	V1 = EMU_ReadU32(V0 + 4); //+ 0x4
	A0 = V0 + 8;
	V0 = A1 & 0x9F0;
	EMU_Write32(GP + 504,A0); //+ 0x1F8
	if (!V0)
	{
		EMU_Write32(S0 + 40,V1); //+ 0x28
		ZZ_CLOCKCYCLES(8,0x80015E2C);
		goto ZZ_15A04_428;
	}
	EMU_Write32(S0 + 40,V1); //+ 0x28
	V0 = EMU_ReadS8(S0);
	if (!V0)
	{
		ZZ_CLOCKCYCLES(12,0x80015E54);
		goto ZZ_15A04_450;
	}
	ZZ_CLOCKCYCLES(12,0x80015E2C);
ZZ_15A04_428:
	V1 = EMU_ReadU32(GP + 604); //+ 0x25C
	V0 = EMU_ReadU32(V1);
	V0 <<= 3;
	V0 += 4240;
	V1 += V0;
	V1 = A0 < V1;
	if (V1)
	{
		V0 = 0x1;
		ZZ_CLOCKCYCLES(10,0x80015EBC);
		goto ZZ_15A04_4B8;
	}
	V0 = 0x1;
	ZZ_CLOCKCYCLES(10,0x80015E54);
ZZ_15A04_450:
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 12488); //+ 0xFFFFCF38
	if (!V0)
	{
		A0 = 0xFFFF0000;
		ZZ_CLOCKCYCLES(5,0x80015EB0);
		goto ZZ_15A04_4AC;
	}
	A0 = 0xFFFF0000;
	V1 = 0x80070000;
	V1 = EMU_ReadU32(V1 - 12776); //+ 0xFFFFCE18
	A1 = 0x80070000;
	A1 = EMU_ReadU32(A1 - 12368); //+ 0xFFFFCFB0
	A0 |= 0x6FF5;
	V0 = 0x4;
	AT = 0x80070000;
	EMU_Write32(AT - 12372,V0); //+ 0xFFFFCFAC
	V1 &= A0;
	AT = 0x80070000;
	EMU_Write32(AT - 12776,V1); //+ 0xFFFFCE18
	if (A1)
	{
		V0 = 0x1;
		ZZ_CLOCKCYCLES(18,0x80015EBC);
		goto ZZ_15A04_4B8;
	}
	V0 = 0x1;
	V0 = -256;
	AT = 0x80070000;
	EMU_Write32(AT - 12368,V0); //+ 0xFFFFCFB0
	V0 = 0x1;
	ZZ_CLOCKCYCLES(23,0x80015EBC);
	goto ZZ_15A04_4B8;
ZZ_15A04_4AC:
	AT = 0x80070000;
	EMU_Write32(AT - 12372,R0); //+ 0xFFFFCFAC
	ZZ_CLOCKCYCLES(2,0x80015EB8);
ZZ_15A04_4B4:
	V0 = 0x1;
	ZZ_CLOCKCYCLES(1,0x80015EBC);
ZZ_15A04_4B8:
	if (S3 != V0)
	{
		ZZ_CLOCKCYCLES(2,0x80015EDC);
		goto ZZ_15A04_4D8;
	}
	V0 = EMU_ReadU32(S0 + 40); //+ 0x28
	AT = 0x80070000;
	EMU_Write32(AT - 12284,V0); //+ 0xFFFFD004
	EMU_Write32(S0 + 60,R0); //+ 0x3C
	EMU_Write32(S0 + 64,S6); //+ 0x40
	EMU_Write32(S0 + 40,R0); //+ 0x28
	ZZ_CLOCKCYCLES(8,0x80015EDC);
ZZ_15A04_4D8:
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 12756); //+ 0xFFFFCE2C
	V1 = 0x10000;
	V0 &= V1;
	if (V0)
	{
		ZZ_CLOCKCYCLES(6,0x80015F08);
		goto ZZ_15A04_504;
	}
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 3048); //+ 0xFFFFF418
	if (!V0)
	{
		ZZ_CLOCKCYCLES(11,0x80015F2C);
		goto ZZ_15A04_528;
	}
	ZZ_CLOCKCYCLES(11,0x80015F08);
ZZ_15A04_504:
	V0 = EMU_ReadS8(S0);
	if (!V0)
	{
		ZZ_CLOCKCYCLES(4,0x80015F48);
		goto ZZ_15A04_544;
	}
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 12372); //+ 0xFFFFCFAC
	if (V0)
	{
		ZZ_CLOCKCYCLES(9,0x80015F48);
		goto ZZ_15A04_544;
	}
	ZZ_CLOCKCYCLES(9,0x80015F2C);
ZZ_15A04_528:
	V0 = EMU_ReadU32(S0 + 40); //+ 0x28
	V1 = 0xFFFF0000;
	V1 |= 0xF17;
	EMU_Write32(S0 + 60,R0); //+ 0x3C
	EMU_Write32(S0 + 64,S6); //+ 0x40
	V0 &= V1;
	EMU_Write32(S0 + 40,V0); //+ 0x28
	ZZ_CLOCKCYCLES(7,0x80015F48);
ZZ_15A04_544:
	V1 = EMU_ReadU32(S0 + 40); //+ 0x28
	V0 = V1 & 0x1000;
	if (!V0)
	{
		V0 = -16385;
		ZZ_CLOCKCYCLES(5,0x80015F68);
		goto ZZ_15A04_564;
	}
	V0 = -16385;
	V0 &= V1;
	EMU_Write32(S0 + 40,V0); //+ 0x28
	V1 = EMU_ReadU32(S0 + 40); //+ 0x28
	ZZ_CLOCKCYCLES(8,0x80015F68);
ZZ_15A04_564:
	V0 = V1 & 0x8000;
	if (!V0)
	{
		V0 = -8193;
		ZZ_CLOCKCYCLES(4,0x80015F80);
		goto ZZ_15A04_57C;
	}
	V0 = -8193;
	V0 &= V1;
	EMU_Write32(S0 + 40,V0); //+ 0x28
	ZZ_CLOCKCYCLES(6,0x80015F80);
ZZ_15A04_57C:
	AT = 0x80070000;
	AT += S4;
	V0 = EMU_ReadU32(AT - 25632); //+ 0xFFFF9BE0
	V0 &= 0xF000;
	V1 = V0 >> 12;
	if (!V1)
	{
		V0 = V1 << 1;
		ZZ_CLOCKCYCLES(8,0x8001602C);
		goto ZZ_15A04_628;
	}
	V0 = V1 << 1;
	V0 += V1;
	V0 <<= 2;
	AT = 0x80060000;
	AT += V0;
	V0 = EMU_ReadU32(AT - 18728); //+ 0xFFFFB6D8
	EMU_Write32(S0 + 64,V0); //+ 0x40
	AT = 0x80070000;
	AT += S4;
	V1 = EMU_ReadU32(AT - 25632); //+ 0xFFFF9BE0
	V1 &= 0xF000;
	V1 >>= 12;
	V0 = V1 << 1;
	V0 += V1;
	V0 <<= 2;
	AT = 0x80060000;
	AT += V0;
	V0 = EMU_ReadU32(AT - 18724); //+ 0xFFFFB6DC
	EMU_Write32(S0 + 56,V0); //+ 0x38
	AT = 0x80070000;
	AT += S4;
	V1 = EMU_ReadU32(AT - 25632); //+ 0xFFFF9BE0
	V1 &= 0xF000;
	V1 >>= 12;
	V0 = V1 << 1;
	V0 += V1;
	V0 <<= 2;
	AT = 0x80060000;
	AT += V0;
	V0 = EMU_ReadU32(AT - 18720); //+ 0xFFFFB6E0
	EMU_Write32(S0 + 60,V0); //+ 0x3C
	ZZ_CLOCKCYCLES(43,0x800160BC);
	goto ZZ_15A04_6B8;
ZZ_15A04_628:
	V1 = EMU_ReadU32(S0 + 64); //+ 0x40
	V0 = V1 < 8;
	if (!V0)
	{
		V0 = V1 << 2;
		ZZ_CLOCKCYCLES(5,0x800160BC);
		goto ZZ_15A04_6B8;
	}
	V0 = V1 << 2;
	AT = 0x80010000;
	AT += V0;
	V0 = EMU_ReadU32(AT + 668); //+ 0x29C
	ZZ_JUMPREGISTER_BEGIN(V0);
	ZZ_CLOCKCYCLES_JR(11);
	ZZ_JUMPREGISTER(0x80016058,ZZ_15A04_654);
	ZZ_JUMPREGISTER(0x80016064,ZZ_15A04_660);
	ZZ_JUMPREGISTER(0x80016070,ZZ_15A04_66C);
	ZZ_JUMPREGISTER(0x8001607C,ZZ_15A04_678);
	ZZ_JUMPREGISTER(0x80016088,ZZ_15A04_684);
	ZZ_JUMPREGISTER(0x80016094,ZZ_15A04_690);
	ZZ_JUMPREGISTER(0x800160A0,ZZ_15A04_69C);
	ZZ_JUMPREGISTER(0x800160AC,ZZ_15A04_6A8);
	ZZ_JUMPREGISTER_END();
ZZ_15A04_654:
	V0 = EMU_ReadU32(S0 + 40); //+ 0x28
	V0 |= 0x1000;
	ZZ_CLOCKCYCLES(3,0x800160B8);
	goto ZZ_15A04_6B4;
ZZ_15A04_660:
	V0 = EMU_ReadU32(S0 + 40); //+ 0x28
	V0 |= 0x3000;
	ZZ_CLOCKCYCLES(3,0x800160B8);
	goto ZZ_15A04_6B4;
ZZ_15A04_66C:
	V0 = EMU_ReadU32(S0 + 40); //+ 0x28
	V0 |= 0x2000;
	ZZ_CLOCKCYCLES(3,0x800160B8);
	goto ZZ_15A04_6B4;
ZZ_15A04_678:
	V0 = EMU_ReadU32(S0 + 40); //+ 0x28
	V0 |= 0x6000;
	ZZ_CLOCKCYCLES(3,0x800160B8);
	goto ZZ_15A04_6B4;
ZZ_15A04_684:
	V0 = EMU_ReadU32(S0 + 40); //+ 0x28
	V0 |= 0x4000;
	ZZ_CLOCKCYCLES(3,0x800160B8);
	goto ZZ_15A04_6B4;
ZZ_15A04_690:
	V0 = EMU_ReadU32(S0 + 40); //+ 0x28
	V0 |= 0xC000;
	ZZ_CLOCKCYCLES(3,0x800160B8);
	goto ZZ_15A04_6B4;
ZZ_15A04_69C:
	V0 = EMU_ReadU32(S0 + 40); //+ 0x28
	V0 |= 0x8000;
	ZZ_CLOCKCYCLES(3,0x800160B8);
	goto ZZ_15A04_6B4;
ZZ_15A04_6A8:
	V0 = EMU_ReadU32(S0 + 40); //+ 0x28
	V0 |= 0x9000;
	ZZ_CLOCKCYCLES(3,0x800160B8);
ZZ_15A04_6B4:
	EMU_Write32(S0 + 40,V0); //+ 0x28
	ZZ_CLOCKCYCLES(1,0x800160BC);
ZZ_15A04_6B8:
	if (S3)
	{
		ZZ_CLOCKCYCLES(2,0x800160DC);
		goto ZZ_15A04_6D8;
	}
	V0 = EMU_ReadU32(S0 + 60); //+ 0x3C
	AT = 0x80070000;
	EMU_Write32(AT - 12296,V0); //+ 0xFFFFCFF8
	V0 = EMU_ReadU32(S0 + 56); //+ 0x38
	AT = 0x80070000;
	EMU_Write32(AT - 12292,V0); //+ 0xFFFFCFFC
	ZZ_CLOCKCYCLES(8,0x800160DC);
ZZ_15A04_6D8:
	V0 = EMU_ReadU32(S0 + 44); //+ 0x2C
	V1 = EMU_ReadU32(S0 + 40); //+ 0x28
	V0 = ~V0;
	V1 &= V0;
	V1 &= 0xFFFF;
	EMU_Write32(S0 + 36,V1); //+ 0x24
	V0 = 0x80070000;
	V0 = EMU_ReadU32(V0 - 25676); //+ 0xFFFF9BB4
	S3 += 1;
	V0 = (int32_t)S3 < (int32_t)V0;
	if (V0)
	{
		S4 += 76;
		ZZ_CLOCKCYCLES(12,0x80015A58);
		goto ZZ_15A04_54;
	}
	S4 += 76;
	ZZ_CLOCKCYCLES(12,0x8001610C);
ZZ_15A04_708:
	RA = EMU_ReadU32(SP + 76); //+ 0x4C
	FP = EMU_ReadU32(SP + 72); //+ 0x48
	S7 = EMU_ReadU32(SP + 68); //+ 0x44
	S6 = EMU_ReadU32(SP + 64); //+ 0x40
	S5 = EMU_ReadU32(SP + 60); //+ 0x3C
	S4 = EMU_ReadU32(SP + 56); //+ 0x38
	S3 = EMU_ReadU32(SP + 52); //+ 0x34
	S2 = EMU_ReadU32(SP + 48); //+ 0x30
	S1 = EMU_ReadU32(SP + 44); //+ 0x2C
	S0 = EMU_ReadU32(SP + 40); //+ 0x28
	SP += 80;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(13);
	ZZ_JUMPREGISTER(0x8002F16C,ZZ_2F15C_10);
	ZZ_JUMPREGISTER(0x8001C890,ZZ_1C850_40);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80015A04,0x80015A58,ZZ_15A04);
ZZ_MARK_TARGET(0x80015A58,0x80015AA0,ZZ_15A04_54);
ZZ_MARK_TARGET(0x80015AA0,0x80015AC4,ZZ_15A04_9C);
ZZ_MARK_TARGET(0x80015AC4,0x80015AD0,ZZ_15A04_C0);
ZZ_MARK_TARGET(0x80015AD0,0x80015AE0,ZZ_15A04_CC);
ZZ_MARK_TARGET(0x80015AE0,0x80015AF8,ZZ_15A04_DC);
ZZ_MARK_TARGET(0x80015AF8,0x80015B1C,ZZ_15A04_F4);
ZZ_MARK_TARGET(0x80015B1C,0x80015B20,ZZ_15A04_118);
ZZ_MARK_TARGET(0x80015B20,0x80015B48,ZZ_15A04_11C);
ZZ_MARK_TARGET(0x80015B48,0x80015B58,ZZ_15A04_144);
ZZ_MARK_TARGET(0x80015B58,0x80015B68,ZZ_15A04_154);
ZZ_MARK_TARGET(0x80015B68,0x80015B80,ZZ_15A04_164);
ZZ_MARK_TARGET(0x80015B80,0x80015BA4,ZZ_15A04_17C);
ZZ_MARK_TARGET(0x80015BA4,0x80015BA8,ZZ_15A04_1A0);
ZZ_MARK_TARGET(0x80015BA8,0x80015BE0,ZZ_15A04_1A4);
ZZ_MARK_TARGET(0x80015BE0,0x80015BF0,ZZ_15A04_1DC);
ZZ_MARK_TARGET(0x80015BF0,0x80015BF8,ZZ_15A04_1EC);
ZZ_MARK_TARGET(0x80015BF8,0x80015C04,ZZ_15A04_1F4);
ZZ_MARK_TARGET(0x80015C04,0x80015C0C,ZZ_15A04_200);
ZZ_MARK_TARGET(0x80015C0C,0x80015C28,ZZ_15A04_208);
ZZ_MARK_TARGET(0x80015C28,0x80015C4C,ZZ_15A04_224);
ZZ_MARK_TARGET(0x80015C4C,0x80015C6C,ZZ_15A04_248);
ZZ_MARK_TARGET(0x80015C6C,0x80015CA4,ZZ_15A04_268);
ZZ_MARK_TARGET(0x80015CA4,0x80015CB4,ZZ_15A04_2A0);
ZZ_MARK_TARGET(0x80015CB4,0x80015CC0,ZZ_15A04_2B0);
ZZ_MARK_TARGET(0x80015CC0,0x80015CCC,ZZ_15A04_2BC);
ZZ_MARK_TARGET(0x80015CCC,0x80015CD8,ZZ_15A04_2C8);
ZZ_MARK_TARGET(0x80015CD8,0x80015CE0,ZZ_15A04_2D4);
ZZ_MARK_TARGET(0x80015CE0,0x80015D04,ZZ_15A04_2DC);
ZZ_MARK_TARGET(0x80015D04,0x80015D34,ZZ_15A04_300);
ZZ_MARK_TARGET(0x80015D34,0x80015D48,ZZ_15A04_330);
ZZ_MARK_TARGET(0x80015D48,0x80015D50,ZZ_15A04_344);
ZZ_MARK_TARGET(0x80015D50,0x80015DB0,ZZ_15A04_34C);
ZZ_MARK_TARGET(0x80015DB0,0x80015DC4,ZZ_15A04_3AC);
ZZ_MARK_TARGET(0x80015DC4,0x80015DCC,ZZ_15A04_3C0);
ZZ_MARK_TARGET(0x80015DCC,0x80015DFC,ZZ_15A04_3C8);
ZZ_MARK_TARGET(0x80015DFC,0x80015E2C,ZZ_15A04_3F8);
ZZ_MARK_TARGET(0x80015E2C,0x80015E54,ZZ_15A04_428);
ZZ_MARK_TARGET(0x80015E54,0x80015EB0,ZZ_15A04_450);
ZZ_MARK_TARGET(0x80015EB0,0x80015EB8,ZZ_15A04_4AC);
ZZ_MARK_TARGET(0x80015EB8,0x80015EBC,ZZ_15A04_4B4);
ZZ_MARK_TARGET(0x80015EBC,0x80015EDC,ZZ_15A04_4B8);
ZZ_MARK_TARGET(0x80015EDC,0x80015F08,ZZ_15A04_4D8);
ZZ_MARK_TARGET(0x80015F08,0x80015F2C,ZZ_15A04_504);
ZZ_MARK_TARGET(0x80015F2C,0x80015F48,ZZ_15A04_528);
ZZ_MARK_TARGET(0x80015F48,0x80015F68,ZZ_15A04_544);
ZZ_MARK_TARGET(0x80015F68,0x80015F80,ZZ_15A04_564);
ZZ_MARK_TARGET(0x80015F80,0x8001602C,ZZ_15A04_57C);
ZZ_MARK_TARGET(0x8001602C,0x80016058,ZZ_15A04_628);
ZZ_MARK_TARGET(0x80016058,0x80016064,ZZ_15A04_654);
ZZ_MARK_TARGET(0x80016064,0x80016070,ZZ_15A04_660);
ZZ_MARK_TARGET(0x80016070,0x8001607C,ZZ_15A04_66C);
ZZ_MARK_TARGET(0x8001607C,0x80016088,ZZ_15A04_678);
ZZ_MARK_TARGET(0x80016088,0x80016094,ZZ_15A04_684);
ZZ_MARK_TARGET(0x80016094,0x800160A0,ZZ_15A04_690);
ZZ_MARK_TARGET(0x800160A0,0x800160AC,ZZ_15A04_69C);
ZZ_MARK_TARGET(0x800160AC,0x800160B8,ZZ_15A04_6A8);
ZZ_MARK_TARGET(0x800160B8,0x800160BC,ZZ_15A04_6B4);
ZZ_MARK_TARGET(0x800160BC,0x800160DC,ZZ_15A04_6B8);
ZZ_MARK_TARGET(0x800160DC,0x8001610C,ZZ_15A04_6D8);
ZZ_MARK_TARGET(0x8001610C,0x80016140,ZZ_15A04_708);
