#ifdef ZZ_INCLUDE_CODE
ZZ_4DFE8:
	SP -= 72;
	EMU_Write32(SP + 52,S1); //+ 0x34
	S1 = A0;
	EMU_Write32(SP + 56,S2); //+ 0x38
	S2 = A1;
	EMU_Write32(SP + 68,RA); //+ 0x44
	EMU_Write32(SP + 64,S4); //+ 0x40
	EMU_Write32(SP + 60,S3); //+ 0x3C
	RA = 0x8004E010; //ZZ_4DFE8_28
	EMU_Write32(SP + 48,S0); //+ 0x30
	ZZ_CLOCKCYCLES(10,0x8004EC08);
	goto ZZ_4EC08;
ZZ_4DFE8_28:
	A1 = EMU_ReadS16(S1 + 4); //+ 0x4
	if ((int32_t)A1 < 0)
	{
		V1 = A1;
		ZZ_CLOCKCYCLES(4,0x8004E044);
		goto ZZ_4DFE8_5C;
	}
	V1 = A1;
	V0 = 0x80060000;
	V0 = EMU_ReadS16(V0 - 8264); //+ 0xFFFFDFB8
	A0 = V0;
	V0 = (int32_t)V0 < (int32_t)A1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(11,0x8004E048);
		goto ZZ_4DFE8_60;
	}
	V1 = A0;
	ZZ_CLOCKCYCLES(13,0x8004E048);
	goto ZZ_4DFE8_60;
ZZ_4DFE8_5C:
	V1 = R0;
	ZZ_CLOCKCYCLES(1,0x8004E048);
ZZ_4DFE8_60:
	A1 = EMU_ReadS16(S1 + 6); //+ 0x6
	EMU_Write16(S1 + 4,V1); //+ 0x4
	if ((int32_t)A1 < 0)
	{
		V1 = A1;
		ZZ_CLOCKCYCLES(4,0x8004E07C);
		goto ZZ_4DFE8_94;
	}
	V1 = A1;
	V0 = 0x80060000;
	V0 = EMU_ReadS16(V0 - 8262); //+ 0xFFFFDFBA
	A0 = V1;
	V1 = V0;
	V0 = (int32_t)V0 < (int32_t)A1;
	if (!V0)
	{
		V0 = A0 << 16;
		ZZ_CLOCKCYCLES(11,0x8004E084);
		goto ZZ_4DFE8_9C;
	}
	V0 = A0 << 16;
	A0 = V1;
	ZZ_CLOCKCYCLES(13,0x8004E080);
	goto ZZ_4DFE8_98;
ZZ_4DFE8_94:
	A0 = R0;
	ZZ_CLOCKCYCLES(1,0x8004E080);
ZZ_4DFE8_98:
	V0 = A0 << 16;
	ZZ_CLOCKCYCLES(1,0x8004E084);
ZZ_4DFE8_9C:
	V1 = EMU_ReadS16(S1 + 4); //+ 0x4
	V0 = (int32_t)V0 >> 16;
	EMU_SMultiply(V1,V0);
	EMU_Write16(S1 + 6,A0); //+ 0x6
	A2 = LO;
	V1 = A2 + 1;
	V0 = V1 >> 31;
	V1 += V0;
	A0 = (int32_t)V1 >> 1;
	if ((int32_t)A0 > 0)
	{
		S0 = (int32_t)V1 >> 5;
		ZZ_CLOCKCYCLES(11,0x8004E0B8);
		goto ZZ_4DFE8_D0;
	}
	S0 = (int32_t)V1 >> 5;
	V0 = -1;
	ZZ_CLOCKCYCLES(13,0x8004E248);
	goto ZZ_4DFE8_260;
ZZ_4DFE8_D0:
	V1 = S0;
	V0 = V1 << 4;
	S0 = A0 - V0;
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 8056); //+ 0xFFFFE088
	S4 = V1;
	V0 = EMU_ReadU32(V0);
	V1 = 0x4000000;
	V0 &= V1;
	if (V0)
	{
		ZZ_CLOCKCYCLES(11,0x8004E118);
		goto ZZ_4DFE8_130;
	}
	S3 = 0x4000000;
	ZZ_CLOCKCYCLES(12,0x8004E0E8);
ZZ_4DFE8_100:
	RA = 0x8004E0F0; //ZZ_4DFE8_108
	ZZ_CLOCKCYCLES(2,0x8004EC3C);
	goto ZZ_4EC3C;
ZZ_4DFE8_108:
	if (V0)
	{
		V0 = -1;
		ZZ_CLOCKCYCLES(2,0x8004E248);
		goto ZZ_4DFE8_260;
	}
	V0 = -1;
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 8056); //+ 0xFFFFE088
	V0 = EMU_ReadU32(V0);
	V0 &= S3;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(10,0x8004E0E8);
		goto ZZ_4DFE8_100;
	}
	ZZ_CLOCKCYCLES(10,0x8004E118);
ZZ_4DFE8_130:
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 8056); //+ 0xFFFFE088
	V0 = 0x4000000;
	EMU_Write32(V1,V0);
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 8060); //+ 0xFFFFE084
	V0 = 0x1000000;
	EMU_Write32(V1,V0);
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 8060); //+ 0xFFFFE084
	V0 = 0xC0000000;
	EMU_Write32(V1,V0);
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 8060); //+ 0xFFFFE084
	V0 = EMU_ReadU32(S1);
	EMU_Write32(V1,V0);
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 8060); //+ 0xFFFFE084
	V0 = EMU_ReadU32(S1 + 4); //+ 0x4
	EMU_Write32(V1,V0);
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 8056); //+ 0xFFFFE088
	V0 = EMU_ReadU32(V0);
	V1 = 0x8000000;
	V0 &= V1;
	if (V0)
	{
		ZZ_CLOCKCYCLES(30,0x8004E1C4);
		goto ZZ_4DFE8_1DC;
	}
	S1 = 0x8000000;
	ZZ_CLOCKCYCLES(31,0x8004E194);
ZZ_4DFE8_1AC:
	RA = 0x8004E19C; //ZZ_4DFE8_1B4
	ZZ_CLOCKCYCLES(2,0x8004EC3C);
	goto ZZ_4EC3C;
ZZ_4DFE8_1B4:
	if (V0)
	{
		V0 = -1;
		ZZ_CLOCKCYCLES(2,0x8004E248);
		goto ZZ_4DFE8_260;
	}
	V0 = -1;
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 8056); //+ 0xFFFFE088
	V0 = EMU_ReadU32(V0);
	V0 &= S1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(10,0x8004E194);
		goto ZZ_4DFE8_1AC;
	}
	ZZ_CLOCKCYCLES(10,0x8004E1C4);
ZZ_4DFE8_1DC:
	S0 -= 1;
	V0 = -1;
	if (S0 == V0)
	{
		ZZ_CLOCKCYCLES(4,0x8004E1F8);
		goto ZZ_4DFE8_210;
	}
	V1 = -1;
	ZZ_CLOCKCYCLES(5,0x8004E1D8);
ZZ_4DFE8_1F0:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 8060); //+ 0xFFFFE084
	V0 = EMU_ReadU32(V0);
	S0 -= 1;
	EMU_Write32(S2,V0);
	if (S0 != V1)
	{
		S2 += 4;
		ZZ_CLOCKCYCLES(8,0x8004E1D8);
		goto ZZ_4DFE8_1F0;
	}
	S2 += 4;
	ZZ_CLOCKCYCLES(8,0x8004E1F8);
ZZ_4DFE8_210:
	if (!S4)
	{
		V1 = 0x4000000;
		ZZ_CLOCKCYCLES(2,0x8004E244);
		goto ZZ_4DFE8_25C;
	}
	V1 = 0x4000000;
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 8056); //+ 0xFFFFE088
	V1 |= 0x3;
	EMU_Write32(V0,V1);
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 8052); //+ 0xFFFFE08C
	A0 = 0x1000000;
	EMU_Write32(V0,S2);
	V0 = S4 << 16;
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 8048); //+ 0xFFFFE090
	V0 |= 0x10;
	EMU_Write32(V1,V0);
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 8044); //+ 0xFFFFE094
	A0 |= 0x200;
	EMU_Write32(V0,A0);
	ZZ_CLOCKCYCLES(19,0x8004E244);
ZZ_4DFE8_25C:
	V0 = R0;
	ZZ_CLOCKCYCLES(1,0x8004E248);
ZZ_4DFE8_260:
	RA = EMU_ReadU32(SP + 68); //+ 0x44
	S4 = EMU_ReadU32(SP + 64); //+ 0x40
	S3 = EMU_ReadU32(SP + 60); //+ 0x3C
	S2 = EMU_ReadU32(SP + 56); //+ 0x38
	S1 = EMU_ReadU32(SP + 52); //+ 0x34
	S0 = EMU_ReadU32(SP + 48); //+ 0x30
	SP += 72;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(9);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8004DFE8,0x8004E010,ZZ_4DFE8);
ZZ_MARK_TARGET(0x8004E010,0x8004E044,ZZ_4DFE8_28);
ZZ_MARK_TARGET(0x8004E044,0x8004E048,ZZ_4DFE8_5C);
ZZ_MARK_TARGET(0x8004E048,0x8004E07C,ZZ_4DFE8_60);
ZZ_MARK_TARGET(0x8004E07C,0x8004E080,ZZ_4DFE8_94);
ZZ_MARK_TARGET(0x8004E080,0x8004E084,ZZ_4DFE8_98);
ZZ_MARK_TARGET(0x8004E084,0x8004E0B8,ZZ_4DFE8_9C);
ZZ_MARK_TARGET(0x8004E0B8,0x8004E0E8,ZZ_4DFE8_D0);
ZZ_MARK_TARGET(0x8004E0E8,0x8004E0F0,ZZ_4DFE8_100);
ZZ_MARK_TARGET(0x8004E0F0,0x8004E118,ZZ_4DFE8_108);
ZZ_MARK_TARGET(0x8004E118,0x8004E194,ZZ_4DFE8_130);
ZZ_MARK_TARGET(0x8004E194,0x8004E19C,ZZ_4DFE8_1AC);
ZZ_MARK_TARGET(0x8004E19C,0x8004E1C4,ZZ_4DFE8_1B4);
ZZ_MARK_TARGET(0x8004E1C4,0x8004E1D8,ZZ_4DFE8_1DC);
ZZ_MARK_TARGET(0x8004E1D8,0x8004E1F8,ZZ_4DFE8_1F0);
ZZ_MARK_TARGET(0x8004E1F8,0x8004E244,ZZ_4DFE8_210);
ZZ_MARK_TARGET(0x8004E244,0x8004E248,ZZ_4DFE8_25C);
ZZ_MARK_TARGET(0x8004E248,0x8004E26C,ZZ_4DFE8_260);
