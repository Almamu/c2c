#ifdef ZZ_INCLUDE_CODE
ZZ_28B80:
	V0 = EMU_ReadU32(A0 + 172); //+ 0xAC
	V1 = 0x4000000;
	V0 &= V1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(5,0x80028BD4);
		goto ZZ_28B80_54;
	}
	V0 = EMU_ReadU32(A0 + 256); //+ 0x100
	V0 &= 0x10;
	V0 = V0 < 1;
	V0 = -V0;
	V1 = V0 & 0x18;
	if ((int32_t)A1 < 0)
	{
		V0 = V1;
		ZZ_CLOCKCYCLES(13,0x80028BCC);
		goto ZZ_28B80_4C;
	}
	V0 = V1;
	V0 = A1 << 2;
	AT = 0x80060000;
	AT += V0;
	V0 = EMU_ReadU32(AT - 16896); //+ 0xFFFFBE00
	V0 += V1;
	ZZ_CLOCKCYCLES(19,0x80028BD0);
	goto ZZ_28B80_50;
ZZ_28B80_4C:
	V0 += A2;
	ZZ_CLOCKCYCLES(1,0x80028BD0);
ZZ_28B80_50:
	EMU_Write32(A0 + 280,V0); //+ 0x118
	ZZ_CLOCKCYCLES(1,0x80028BD4);
ZZ_28B80_54:
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(2);
	ZZ_JUMPREGISTER(0x8002921C,ZZ_28EBC_360);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80028B80,ZZ_28B80);
ZZ_MARK(0x80028B84);
ZZ_MARK(0x80028B88);
ZZ_MARK(0x80028B8C);
ZZ_MARK(0x80028B90);
ZZ_MARK(0x80028B94);
ZZ_MARK(0x80028B98);
ZZ_MARK(0x80028B9C);
ZZ_MARK(0x80028BA0);
ZZ_MARK(0x80028BA4);
ZZ_MARK(0x80028BA8);
ZZ_MARK(0x80028BAC);
ZZ_MARK(0x80028BB0);
ZZ_MARK(0x80028BB4);
ZZ_MARK(0x80028BB8);
ZZ_MARK(0x80028BBC);
ZZ_MARK(0x80028BC0);
ZZ_MARK(0x80028BC4);
ZZ_MARK(0x80028BC8);
ZZ_MARK_TARGET(0x80028BCC,ZZ_28B80_4C);
ZZ_MARK_TARGET(0x80028BD0,ZZ_28B80_50);
ZZ_MARK_TARGET(0x80028BD4,ZZ_28B80_54);
ZZ_MARK(0x80028BD8);
