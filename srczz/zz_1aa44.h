#ifdef ZZ_INCLUDE_CODE
ZZ_1AA44:
	SP -= 48;
	EMU_Write32(SP + 16,S0); //+ 0x10
	S0 = A0;
	EMU_Write32(SP + 36,S5); //+ 0x24
	S5 = A1;
	EMU_Write32(SP + 40,RA); //+ 0x28
	EMU_Write32(SP + 32,S4); //+ 0x20
	EMU_Write32(SP + 28,S3); //+ 0x1C
	EMU_Write32(SP + 24,S2); //+ 0x18
	EMU_Write32(SP + 20,S1); //+ 0x14
	S2 = EMU_ReadU32(S0 + 232); //+ 0xE8
	S4 = A2;
	A1 = 0x1;
	A2 = R0;
	S3 = S2 + 4;
	RA = 0x8001AA88; //ZZ_1AA44_44
	A0 = S3;
	ZZ_CLOCKCYCLES(17,0x80014364);
	goto ZZ_14364;
ZZ_1AA44_44:
	V0 = EMU_ReadU32(S2 + 8); //+ 0x8
	V1 = EMU_ReadU32(S0 + 236); //+ 0xEC
	S1 = V0 & 0x1;
	if (S4)
	{
		S0 = V1 >> 8;
		ZZ_CLOCKCYCLES(5,0x8001AAD8);
		goto ZZ_1AA44_94;
	}
	S0 = V1 >> 8;
	A0 = S3;
	A1 = 0x1;
	RA = 0x8001AAAC; //ZZ_1AA44_68
	A2 = R0;
	ZZ_CLOCKCYCLES(9,0x80014364);
	goto ZZ_14364;
ZZ_1AA44_68:
	if (!S1)
	{
		V1 = V0 + 16;
		ZZ_CLOCKCYCLES(2,0x8001AAC0);
		goto ZZ_1AA44_7C;
	}
	V1 = V0 + 16;
	V0 = S0 >> 1;
	V0 <<= 2;
	ZZ_CLOCKCYCLES(5,0x8001AAC4);
	goto ZZ_1AA44_80;
ZZ_1AA44_7C:
	V0 = S0 << 2;
	ZZ_CLOCKCYCLES(1,0x8001AAC4);
ZZ_1AA44_80:
	V0 += V1;
	V1 = EMU_ReadU32(V0);
	V0 = S0;
	EMU_Write32(S5,V1);
	ZZ_CLOCKCYCLES(5,0x8001AB90);
	goto ZZ_1AA44_14C;
ZZ_1AA44_94:
	if (S1)
	{
		V0 = S0 & 0x1;
		ZZ_CLOCKCYCLES(2,0x8001AAF8);
		goto ZZ_1AA44_B4;
	}
	V0 = S0 & 0x1;
	A0 = S3;
	A1 = 0x1;
	RA = 0x8001AAF0; //ZZ_1AA44_AC
	A2 = R0;
	ZZ_CLOCKCYCLES(6,0x80014364);
	goto ZZ_14364;
ZZ_1AA44_AC:
	V1 = S0 << 2;
	ZZ_CLOCKCYCLES(2,0x8001AB78);
	goto ZZ_1AA44_134;
ZZ_1AA44_B4:
	if (!V0)
	{
		V0 = S0 + 1;
		ZZ_CLOCKCYCLES(2,0x8001AB5C);
		goto ZZ_1AA44_118;
	}
	V0 = S0 + 1;
	V1 = EMU_ReadU16(S2 + 2); //+ 0x2
	V0 = (int32_t)V0 < (int32_t)V1;
	if (!V0)
	{
		A0 = S3;
		ZZ_CLOCKCYCLES(7,0x8001AB5C);
		goto ZZ_1AA44_118;
	}
	A0 = S3;
	A1 = 0x1;
	RA = 0x8001AB20; //ZZ_1AA44_DC
	A2 = R0;
	ZZ_CLOCKCYCLES(10,0x80014364);
	goto ZZ_14364;
ZZ_1AA44_DC:
	V1 = S0 >> 1;
	S1 = V1 + 1;
	V1 <<= 2;
	V1 += V0;
	V0 = EMU_ReadU32(V1 + 16); //+ 0x10
	A0 = S3;
	A1 = 0x1;
	A2 = R0;
	RA = 0x8001AB48; //ZZ_1AA44_104
	EMU_Write32(S5,V0);
	ZZ_CLOCKCYCLES(10,0x80014364);
	goto ZZ_14364;
ZZ_1AA44_104:
	V1 = S1 << 2;
	V1 += V0;
	V0 = EMU_ReadU32(V1 + 16); //+ 0x10
	EMU_Write32(S4,V0);
	ZZ_CLOCKCYCLES(5,0x8001AB8C);
	goto ZZ_1AA44_148;
ZZ_1AA44_118:
	V0 = S0 + 1;
	S1 = (int32_t)V0 >> 1;
	A0 = S2 + 4;
	A1 = 0x1;
	RA = 0x8001AB74; //ZZ_1AA44_130
	A2 = R0;
	ZZ_CLOCKCYCLES(6,0x80014364);
	goto ZZ_14364;
ZZ_1AA44_130:
	V1 = S1 << 2;
	ZZ_CLOCKCYCLES(1,0x8001AB78);
ZZ_1AA44_134:
	V1 += V0;
	V0 = EMU_ReadU32(V1 + 16); //+ 0x10
	EMU_Write32(S5,V0);
	EMU_Write32(S4,V0);
	ZZ_CLOCKCYCLES(5,0x8001AB8C);
ZZ_1AA44_148:
	V0 = S0;
	ZZ_CLOCKCYCLES(1,0x8001AB90);
ZZ_1AA44_14C:
	RA = EMU_ReadU32(SP + 40); //+ 0x28
	S5 = EMU_ReadU32(SP + 36); //+ 0x24
	S4 = EMU_ReadU32(SP + 32); //+ 0x20
	S3 = EMU_ReadU32(SP + 28); //+ 0x1C
	S2 = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 48;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(10);
	ZZ_JUMPREGISTER(0x8001A68C,ZZ_1A5DC_B0);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8001AA44,ZZ_1AA44);
ZZ_MARK(0x8001AA48);
ZZ_MARK(0x8001AA4C);
ZZ_MARK(0x8001AA50);
ZZ_MARK(0x8001AA54);
ZZ_MARK(0x8001AA58);
ZZ_MARK(0x8001AA5C);
ZZ_MARK(0x8001AA60);
ZZ_MARK(0x8001AA64);
ZZ_MARK(0x8001AA68);
ZZ_MARK(0x8001AA6C);
ZZ_MARK(0x8001AA70);
ZZ_MARK(0x8001AA74);
ZZ_MARK(0x8001AA78);
ZZ_MARK(0x8001AA7C);
ZZ_MARK(0x8001AA80);
ZZ_MARK(0x8001AA84);
ZZ_MARK_TARGET(0x8001AA88,ZZ_1AA44_44);
ZZ_MARK(0x8001AA8C);
ZZ_MARK(0x8001AA90);
ZZ_MARK(0x8001AA94);
ZZ_MARK(0x8001AA98);
ZZ_MARK(0x8001AA9C);
ZZ_MARK(0x8001AAA0);
ZZ_MARK(0x8001AAA4);
ZZ_MARK(0x8001AAA8);
ZZ_MARK_TARGET(0x8001AAAC,ZZ_1AA44_68);
ZZ_MARK(0x8001AAB0);
ZZ_MARK(0x8001AAB4);
ZZ_MARK(0x8001AAB8);
ZZ_MARK(0x8001AABC);
ZZ_MARK_TARGET(0x8001AAC0,ZZ_1AA44_7C);
ZZ_MARK_TARGET(0x8001AAC4,ZZ_1AA44_80);
ZZ_MARK(0x8001AAC8);
ZZ_MARK(0x8001AACC);
ZZ_MARK(0x8001AAD0);
ZZ_MARK(0x8001AAD4);
ZZ_MARK_TARGET(0x8001AAD8,ZZ_1AA44_94);
ZZ_MARK(0x8001AADC);
ZZ_MARK(0x8001AAE0);
ZZ_MARK(0x8001AAE4);
ZZ_MARK(0x8001AAE8);
ZZ_MARK(0x8001AAEC);
ZZ_MARK_TARGET(0x8001AAF0,ZZ_1AA44_AC);
ZZ_MARK(0x8001AAF4);
ZZ_MARK_TARGET(0x8001AAF8,ZZ_1AA44_B4);
ZZ_MARK(0x8001AAFC);
ZZ_MARK(0x8001AB00);
ZZ_MARK(0x8001AB04);
ZZ_MARK(0x8001AB08);
ZZ_MARK(0x8001AB0C);
ZZ_MARK(0x8001AB10);
ZZ_MARK(0x8001AB14);
ZZ_MARK(0x8001AB18);
ZZ_MARK(0x8001AB1C);
ZZ_MARK_TARGET(0x8001AB20,ZZ_1AA44_DC);
ZZ_MARK(0x8001AB24);
ZZ_MARK(0x8001AB28);
ZZ_MARK(0x8001AB2C);
ZZ_MARK(0x8001AB30);
ZZ_MARK(0x8001AB34);
ZZ_MARK(0x8001AB38);
ZZ_MARK(0x8001AB3C);
ZZ_MARK(0x8001AB40);
ZZ_MARK(0x8001AB44);
ZZ_MARK_TARGET(0x8001AB48,ZZ_1AA44_104);
ZZ_MARK(0x8001AB4C);
ZZ_MARK(0x8001AB50);
ZZ_MARK(0x8001AB54);
ZZ_MARK(0x8001AB58);
ZZ_MARK_TARGET(0x8001AB5C,ZZ_1AA44_118);
ZZ_MARK(0x8001AB60);
ZZ_MARK(0x8001AB64);
ZZ_MARK(0x8001AB68);
ZZ_MARK(0x8001AB6C);
ZZ_MARK(0x8001AB70);
ZZ_MARK_TARGET(0x8001AB74,ZZ_1AA44_130);
ZZ_MARK_TARGET(0x8001AB78,ZZ_1AA44_134);
ZZ_MARK(0x8001AB7C);
ZZ_MARK(0x8001AB80);
ZZ_MARK(0x8001AB84);
ZZ_MARK(0x8001AB88);
ZZ_MARK_TARGET(0x8001AB8C,ZZ_1AA44_148);
ZZ_MARK_TARGET(0x8001AB90,ZZ_1AA44_14C);
ZZ_MARK(0x8001AB94);
ZZ_MARK(0x8001AB98);
ZZ_MARK(0x8001AB9C);
ZZ_MARK(0x8001ABA0);
ZZ_MARK(0x8001ABA4);
ZZ_MARK(0x8001ABA8);
ZZ_MARK(0x8001ABAC);
ZZ_MARK(0x8001ABB0);
ZZ_MARK(0x8001ABB4);
