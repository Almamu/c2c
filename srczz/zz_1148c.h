#ifdef ZZ_INCLUDE_CODE
ZZ_1148C:
	SP -= 32;
	EMU_Write32(SP + 24,RA); //+ 0x18
	EMU_Write32(SP + 20,S1); //+ 0x14
	EMU_Write32(SP + 16,S0); //+ 0x10
	S1 = 0x2;
	S0 = A0 + 3;
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 2732); //+ 0xFFFFF554
	V0 = -4;
	if (V1)
	{
		S0 &= V0;
		ZZ_CLOCKCYCLES(11,0x80011528);
		goto ZZ_1148C_9C;
	}
	S0 &= V0;
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 2756); //+ 0xFFFFF53C
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 2740); //+ 0xFFFFF54C
	V0 = V1 < V0;
	if (!V0)
	{
		V0 = -2;
		ZZ_CLOCKCYCLES(19,0x8001164C);
		goto ZZ_1148C_1C0;
	}
	V0 = -2;
	EMU_Write32(V1,V0);
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 2756); //+ 0xFFFFF53C
	AT = 0x80060000;
	EMU_Write32(AT + 2532,V0); //+ 0x9E4
	V0 += 4;
	AT = 0x80060000;
	EMU_Write32(AT - 2756,V0); //+ 0xFFFFF53C
	RA = 0x80011504; //ZZ_1148C_78
	A0 = S0;
	ZZ_CLOCKCYCLES(30,0x800111B0);
	goto ZZ_111B0;
ZZ_1148C_78:
	if (V0)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(2,0x800116AC);
		goto ZZ_1148C_220;
	}
	V0 = R0;
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 + 2532); //+ 0x9E4
	V0 = 0x1;
	AT = 0x80060000;
	EMU_Write32(AT - 2732,V0); //+ 0xFFFFF554
	AT = 0x80060000;
	EMU_Write32(AT + 11844,V1); //+ 0x2E44
	ZZ_CLOCKCYCLES(9,0x80011528);
ZZ_1148C_9C:
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 + 11844); //+ 0x2E44
	AT = 0x80060000;
	EMU_Write32(AT + 2532,A0); //+ 0x9E4
	ZZ_CLOCKCYCLES(7,0x80011670);
	goto ZZ_1148C_1E4;
ZZ_1148C_B8:
	A1 = 0x80060000;
	A1 = EMU_ReadU32(A1 + 2532); //+ 0x9E4
	A0 = EMU_ReadU32(A1);
	V0 = V0 < A0;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(8,0x80011590);
		goto ZZ_1148C_104;
	}
	if ((int32_t)S0 >= 0)
	{
		V0 = S0;
		ZZ_CLOCKCYCLES(10,0x80011570);
		goto ZZ_1148C_E4;
	}
	V0 = S0;
	V0 = S0 + 3;
	ZZ_CLOCKCYCLES(11,0x80011570);
ZZ_1148C_E4:
	V0 = (int32_t)V0 >> 2;
	V0 <<= 2;
	V0 += A1;
	V1 = A0 - S0;
	V1 -= 4;
	EMU_Write32(V0 + 4,V1); //+ 0x4
	EMU_Write32(A1,S0);
	ZZ_CLOCKCYCLES(8,0x8001169C);
	goto ZZ_1148C_210;
ZZ_1148C_104:
	V0 = A0 < S0;
	if (!V0)
	{
		V0 = A0 >> 2;
		ZZ_CLOCKCYCLES(3,0x80011668);
		goto ZZ_1148C_1DC;
	}
	V0 = A0 >> 2;
	V0 <<= 2;
	V0 += A1;
	V1 = EMU_ReadU32(V0 + 4); //+ 0x4
	A3 = -2;
	if (V1 != A3)
	{
		A2 = V0 + 4;
		ZZ_CLOCKCYCLES(9,0x800115D8);
		goto ZZ_1148C_14C;
	}
	A2 = V0 + 4;
	EMU_Write32(A1,V1);
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 2532); //+ 0x9E4
	V0 += 4;
	AT = 0x80060000;
	EMU_Write32(AT - 2756,V0); //+ 0xFFFFF53C
	ZZ_CLOCKCYCLES(18,0x80011668);
	goto ZZ_1148C_1DC;
ZZ_1148C_14C:
	V0 = V1 & 0x1;
	if (!V0)
	{
		V0 = A0 + 4;
		ZZ_CLOCKCYCLES(3,0x800115F4);
		goto ZZ_1148C_168;
	}
	V0 = A0 + 4;
	V1 &= A3;
	V0 += V1;
	EMU_Write32(A1,V0);
	ZZ_CLOCKCYCLES(7,0x80011668);
	goto ZZ_1148C_1DC;
ZZ_1148C_168:
	AT = 0x80060000;
	EMU_Write32(AT + 2532,A2); //+ 0x9E4
	ZZ_CLOCKCYCLES(4,0x80011668);
	goto ZZ_1148C_1DC;
ZZ_1148C_178:
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 + 2532); //+ 0x9E4
	V1 = EMU_ReadU32(A0);
	V0 = -2;
	if (V1 == V0)
	{
		V0 = V1 >> 2;
		ZZ_CLOCKCYCLES(7,0x80011630);
		goto ZZ_1148C_1A4;
	}
	V0 = V1 >> 2;
	V0 <<= 2;
	V0 += A0;
	V0 += 4;
	ZZ_CLOCKCYCLES(11,0x8001165C);
	goto ZZ_1148C_1D0;
ZZ_1148C_1A4:
	S1 -= 1;
	if ((int32_t)S1 > 0)
	{
		ZZ_CLOCKCYCLES(3,0x80011654);
		goto ZZ_1148C_1C8;
	}
	RA = 0x80011644; //ZZ_1148C_1B8
	A0 = S0;
	ZZ_CLOCKCYCLES(5,0x800111B0);
	goto ZZ_111B0;
ZZ_1148C_1B8:
	if (!V0)
	{
		ZZ_CLOCKCYCLES(2,0x80011668);
		goto ZZ_1148C_1DC;
	}
	ZZ_CLOCKCYCLES(2,0x8001164C);
ZZ_1148C_1C0:
	V0 = R0;
	ZZ_CLOCKCYCLES(2,0x800116AC);
	goto ZZ_1148C_220;
ZZ_1148C_1C8:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 11844); //+ 0x2E44
	ZZ_CLOCKCYCLES(2,0x8001165C);
ZZ_1148C_1D0:
	AT = 0x80060000;
	EMU_Write32(AT + 2532,V0); //+ 0x9E4
	ZZ_CLOCKCYCLES(3,0x80011668);
ZZ_1148C_1DC:
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 + 2532); //+ 0x9E4
	ZZ_CLOCKCYCLES(2,0x80011670);
ZZ_1148C_1E4:
	V1 = EMU_ReadU32(A0);
	V0 = V1 & 0x1;
	if (!V0)
	{
		V0 = S0 | 0x1;
		ZZ_CLOCKCYCLES(6,0x80011604);
		goto ZZ_1148C_178;
	}
	V0 = S0 | 0x1;
	if (V1 != V0)
	{
		ZZ_CLOCKCYCLES(8,0x80011544);
		goto ZZ_1148C_B8;
	}
	V0 = -2;
	V0 &= V1;
	EMU_Write32(A0,V0);
	ZZ_CLOCKCYCLES(11,0x8001169C);
ZZ_1148C_210:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 2532); //+ 0x9E4
	V0 += 4;
	ZZ_CLOCKCYCLES(4,0x800116AC);
ZZ_1148C_220:
	RA = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	ZZ_JUMPREGISTER_BEGIN(RA);
	SP += 32;
	ZZ_CLOCKCYCLES_JR(5);
	ZZ_JUMPREGISTER(0x800299EC,ZZ_299DC_10);
	ZZ_JUMPREGISTER(0x8001F0C8,ZZ_1F0AC_1C);
	ZZ_JUMPREGISTER(0x80029A0C,ZZ_299DC_30);
	ZZ_JUMPREGISTER(0x8001F0DC,ZZ_1F0AC_30);
	ZZ_JUMPREGISTER(0x80027D04,ZZ_27CAC_58);
	ZZ_JUMPREGISTER(0x80016390,ZZ_16328_68);
	ZZ_JUMPREGISTER(0x80011788,ZZ_11764_24);
	ZZ_JUMPREGISTER(0x800163D8,ZZ_16328_B0);
	ZZ_JUMPREGISTER(0x80027D70,ZZ_27CAC_C4);
	ZZ_JUMPREGISTER(0x80012458,ZZ_123F0_68);
	ZZ_JUMPREGISTER(0x80031A24,ZZ_319F8_2C);
	ZZ_JUMPREGISTER(0x800116FC,ZZ_116D4_28);
	ZZ_JUMPREGISTER(0x80011728,ZZ_116D4_54);
	ZZ_JUMPREGISTER(0x80014F58,ZZ_14D6C_1EC);
	ZZ_JUMPREGISTER(0x80014FEC,ZZ_14D6C_280);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8001148C,0x80011504,ZZ_1148C);
ZZ_MARK_TARGET(0x80011504,0x80011528,ZZ_1148C_78);
ZZ_MARK_TARGET(0x80011528,0x80011544,ZZ_1148C_9C);
ZZ_MARK_TARGET(0x80011544,0x80011570,ZZ_1148C_B8);
ZZ_MARK_TARGET(0x80011570,0x80011590,ZZ_1148C_E4);
ZZ_MARK_TARGET(0x80011590,0x800115D8,ZZ_1148C_104);
ZZ_MARK_TARGET(0x800115D8,0x800115F4,ZZ_1148C_14C);
ZZ_MARK_TARGET(0x800115F4,0x80011604,ZZ_1148C_168);
ZZ_MARK_TARGET(0x80011604,0x80011630,ZZ_1148C_178);
ZZ_MARK_TARGET(0x80011630,0x80011644,ZZ_1148C_1A4);
ZZ_MARK_TARGET(0x80011644,0x8001164C,ZZ_1148C_1B8);
ZZ_MARK_TARGET(0x8001164C,0x80011654,ZZ_1148C_1C0);
ZZ_MARK_TARGET(0x80011654,0x8001165C,ZZ_1148C_1C8);
ZZ_MARK_TARGET(0x8001165C,0x80011668,ZZ_1148C_1D0);
ZZ_MARK_TARGET(0x80011668,0x80011670,ZZ_1148C_1DC);
ZZ_MARK_TARGET(0x80011670,0x8001169C,ZZ_1148C_1E4);
ZZ_MARK_TARGET(0x8001169C,0x800116AC,ZZ_1148C_210);
ZZ_MARK_TARGET(0x800116AC,0x800116C0,ZZ_1148C_220);
