#ifdef ZZ_INCLUDE_CODE
ZZ_1A5DC:
	SP -= 64;
	EMU_Write32(SP + 48,S0); //+ 0x30
	S0 = A0;
	EMU_Write32(SP + 56,RA); //+ 0x38
	EMU_Write32(SP + 52,S1); //+ 0x34
	V0 = EMU_ReadU32(S0 + 8); //+ 0x8
	EMU_Write32(V0 + 40,R0); //+ 0x28
	A0 = EMU_ReadU32(S0 + 232); //+ 0xE8
	if (!A0)
	{
		S1 = A1;
		ZZ_CLOCKCYCLES(12,0x8001A830);
		goto ZZ_1A5DC_254;
	}
	S1 = A1;
	V1 = EMU_ReadU8(A0);
	V0 = 0x4;
	if (V1 == V0)
	{
		V1 = 0xFF800000;
		ZZ_CLOCKCYCLES(16,0x8001A660);
		goto ZZ_1A5DC_84;
	}
	V1 = 0xFF800000;
	V1 |= 0x3;
	A0 += 4;
	V1 &= A0;
	V0 = 0x80000000;
	if (V1 != V0)
	{
		A1 = 0x1;
		ZZ_CLOCKCYCLES(22,0x8001A830);
		goto ZZ_1A5DC_254;
	}
	A1 = 0x1;
	RA = 0x8001A63C; //ZZ_1A5DC_60
	A2 = R0;
	ZZ_CLOCKCYCLES(24,0x80014364);
	goto ZZ_14364;
ZZ_1A5DC_60:
	V1 = EMU_ReadU32(S0 + 8); //+ 0x8
	EMU_Write32(V1 + 40,V0); //+ 0x28
	V0 = (int32_t)V0 < -254;
	if (V0)
	{
		ZZ_CLOCKCYCLES(6,0x8001A660);
		goto ZZ_1A5DC_84;
	}
	V0 = EMU_ReadU32(S0 + 8); //+ 0x8
	EMU_Write32(V0 + 40,R0); //+ 0x28
	ZZ_CLOCKCYCLES(9,0x8001A830);
	goto ZZ_1A5DC_254;
ZZ_1A5DC_84:
	V0 = EMU_ReadU32(S0 + 232); //+ 0xE8
	V1 = EMU_ReadU8(V0);
	V0 = 0x1;
	if (V1 != V0)
	{
		V0 = -14;
		ZZ_CLOCKCYCLES(6,0x8001A824);
		goto ZZ_1A5DC_248;
	}
	V0 = -14;
	A2 = EMU_ReadU32(S0 + 8); //+ 0x8
	A0 = S0;
	A1 = SP + 40;
	RA = 0x8001A68C; //ZZ_1A5DC_B0
	A2 += 36;
	ZZ_CLOCKCYCLES(11,0x8001AA44);
	goto ZZ_1AA44;
ZZ_1A5DC_B0:
	V1 = EMU_ReadU32(S0 + 8); //+ 0x8
	EMU_Write32(V1 + 44,V0); //+ 0x2C
	V0 = EMU_ReadU32(SP + 40); //+ 0x28
	V1 = EMU_ReadU32(S0 + 8); //+ 0x8
	A1 = 0x1;
	A2 = R0;
	A0 = V0 + 16;
	RA = 0x8001A6B4; //ZZ_1A5DC_D8
	EMU_Write32(V1 + 32,V0); //+ 0x20
	ZZ_CLOCKCYCLES(10,0x80014364);
	goto ZZ_14364;
ZZ_1A5DC_D8:
	V1 = EMU_ReadU32(S0 + 8); //+ 0x8
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 - 2524); //+ 0xFFFFF624
	if (S0 != A0)
	{
		EMU_Write32(V1 + 40,V0); //+ 0x28
		ZZ_CLOCKCYCLES(6,0x8001A830);
		goto ZZ_1A5DC_254;
	}
	EMU_Write32(V1 + 40,V0); //+ 0x28
	A2 = EMU_ReadU32(S1);
	if ((int32_t)A2 >= 0)
	{
		V0 = -A2;
		ZZ_CLOCKCYCLES(10,0x8001A6E0);
		goto ZZ_1A5DC_104;
	}
	V0 = -A2;
	EMU_Write32(S1,V0);
	ZZ_CLOCKCYCLES(11,0x8001A6E0);
ZZ_1A5DC_104:
	A0 = EMU_ReadU32(SP + 40); //+ 0x28
	A1 = EMU_ReadU32(A0 + 28); //+ 0x1C
	V0 = EMU_ReadU32(A0 + 40); //+ 0x28
	A1 += V0;
	EMU_Write32(SP + 16,A1); //+ 0x10
	V0 = EMU_ReadU32(A0 + 32); //+ 0x20
	V1 = EMU_ReadU32(A0 + 44); //+ 0x2C
	V0 += V1;
	EMU_Write32(SP + 20,V0); //+ 0x14
	V0 = EMU_ReadU32(A0 + 36); //+ 0x24
	V1 = EMU_ReadU32(A0 + 48); //+ 0x30
	V0 += V1;
	EMU_Write32(SP + 24,V0); //+ 0x18
	V0 = EMU_ReadU32(A0 + 28); //+ 0x1C
	V1 = EMU_ReadU32(A0 + 52); //+ 0x34
	V0 += V1;
	EMU_Write32(SP + 28,V0); //+ 0x1C
	V0 = EMU_ReadU32(A0 + 32); //+ 0x20
	V1 = EMU_ReadU32(A0 + 56); //+ 0x38
	V0 += V1;
	EMU_Write32(SP + 32,V0); //+ 0x20
	V0 = EMU_ReadU32(A0 + 36); //+ 0x24
	V1 = EMU_ReadU32(A0 + 60); //+ 0x3C
	V0 += V1;
	EMU_Write32(SP + 36,V0); //+ 0x24
	V0 = EMU_ReadU32(S1);
	A1 = (int32_t)A1 >> 8;
	EMU_SMultiply(A1,V0);
	V1 = EMU_ReadU32(S0 + 8); //+ 0x8
	A3 = LO;
	V0 = (int32_t)A3 >> 4;
	EMU_Write32(V1 + 48,V0); //+ 0x30
	V0 = EMU_ReadU32(SP + 20); //+ 0x14
	V1 = EMU_ReadU32(S1 + 4); //+ 0x4
	V0 = (int32_t)V0 >> 8;
	EMU_SMultiply(V0,V1);
	V1 = EMU_ReadU32(S0 + 8); //+ 0x8
	A3 = LO;
	V0 = (int32_t)A3 >> 4;
	EMU_Write32(V1 + 52,V0); //+ 0x34
	V0 = EMU_ReadU32(SP + 24); //+ 0x18
	V1 = EMU_ReadU32(S1 + 8); //+ 0x8
	V0 = (int32_t)V0 >> 8;
	EMU_SMultiply(V0,V1);
	V1 = EMU_ReadU32(S0 + 8); //+ 0x8
	A3 = LO;
	V0 = (int32_t)A3 >> 4;
	EMU_Write32(V1 + 56,V0); //+ 0x38
	V0 = EMU_ReadU32(SP + 28); //+ 0x1C
	V1 = EMU_ReadU32(S1);
	V0 = (int32_t)V0 >> 8;
	EMU_SMultiply(V0,V1);
	V1 = EMU_ReadU32(S0 + 8); //+ 0x8
	A3 = LO;
	V0 = (int32_t)A3 >> 4;
	EMU_Write32(V1 + 60,V0); //+ 0x3C
	V0 = EMU_ReadU32(SP + 32); //+ 0x20
	V1 = EMU_ReadU32(S1 + 4); //+ 0x4
	V0 = (int32_t)V0 >> 8;
	EMU_SMultiply(V0,V1);
	V1 = EMU_ReadU32(S0 + 8); //+ 0x8
	A3 = LO;
	V0 = (int32_t)A3 >> 4;
	EMU_Write32(V1 + 64,V0); //+ 0x40
	V0 = EMU_ReadU32(SP + 36); //+ 0x24
	V1 = EMU_ReadU32(S1 + 8); //+ 0x8
	V0 = (int32_t)V0 >> 8;
	EMU_SMultiply(V0,V1);
	V1 = EMU_ReadU32(S0 + 8); //+ 0x8
	A3 = LO;
	V0 = (int32_t)A3 >> 4;
	EMU_Write32(V1 + 68,V0); //+ 0x44
	EMU_Write32(S1,A2);
	ZZ_CLOCKCYCLES(81,0x8001A830);
	goto ZZ_1A5DC_254;
ZZ_1A5DC_248:
	V1 = EMU_ReadU32(S0 + 8); //+ 0x8
	EMU_Write32(V1 + 40,V0); //+ 0x28
	ZZ_CLOCKCYCLES(3,0x8001A830);
ZZ_1A5DC_254:
	RA = EMU_ReadU32(SP + 56); //+ 0x38
	S1 = EMU_ReadU32(SP + 52); //+ 0x34
	S0 = EMU_ReadU32(SP + 48); //+ 0x30
	SP += 64;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(6);
	ZZ_JUMPREGISTER(0x800382B0,ZZ_37930_980);
	ZZ_JUMPREGISTER(0x8001E008,ZZ_1D860_7A8);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8001A5DC,ZZ_1A5DC);
ZZ_MARK(0x8001A5E0);
ZZ_MARK(0x8001A5E4);
ZZ_MARK(0x8001A5E8);
ZZ_MARK(0x8001A5EC);
ZZ_MARK(0x8001A5F0);
ZZ_MARK(0x8001A5F4);
ZZ_MARK(0x8001A5F8);
ZZ_MARK(0x8001A5FC);
ZZ_MARK(0x8001A600);
ZZ_MARK(0x8001A604);
ZZ_MARK(0x8001A608);
ZZ_MARK(0x8001A60C);
ZZ_MARK(0x8001A610);
ZZ_MARK(0x8001A614);
ZZ_MARK(0x8001A618);
ZZ_MARK(0x8001A61C);
ZZ_MARK(0x8001A620);
ZZ_MARK(0x8001A624);
ZZ_MARK(0x8001A628);
ZZ_MARK(0x8001A62C);
ZZ_MARK(0x8001A630);
ZZ_MARK(0x8001A634);
ZZ_MARK(0x8001A638);
ZZ_MARK_TARGET(0x8001A63C,ZZ_1A5DC_60);
ZZ_MARK(0x8001A640);
ZZ_MARK(0x8001A644);
ZZ_MARK(0x8001A648);
ZZ_MARK(0x8001A64C);
ZZ_MARK(0x8001A650);
ZZ_MARK(0x8001A654);
ZZ_MARK(0x8001A658);
ZZ_MARK(0x8001A65C);
ZZ_MARK_TARGET(0x8001A660,ZZ_1A5DC_84);
ZZ_MARK(0x8001A664);
ZZ_MARK(0x8001A668);
ZZ_MARK(0x8001A66C);
ZZ_MARK(0x8001A670);
ZZ_MARK(0x8001A674);
ZZ_MARK(0x8001A678);
ZZ_MARK(0x8001A67C);
ZZ_MARK(0x8001A680);
ZZ_MARK(0x8001A684);
ZZ_MARK(0x8001A688);
ZZ_MARK_TARGET(0x8001A68C,ZZ_1A5DC_B0);
ZZ_MARK(0x8001A690);
ZZ_MARK(0x8001A694);
ZZ_MARK(0x8001A698);
ZZ_MARK(0x8001A69C);
ZZ_MARK(0x8001A6A0);
ZZ_MARK(0x8001A6A4);
ZZ_MARK(0x8001A6A8);
ZZ_MARK(0x8001A6AC);
ZZ_MARK(0x8001A6B0);
ZZ_MARK_TARGET(0x8001A6B4,ZZ_1A5DC_D8);
ZZ_MARK(0x8001A6B8);
ZZ_MARK(0x8001A6BC);
ZZ_MARK(0x8001A6C0);
ZZ_MARK(0x8001A6C4);
ZZ_MARK(0x8001A6C8);
ZZ_MARK(0x8001A6CC);
ZZ_MARK(0x8001A6D0);
ZZ_MARK(0x8001A6D4);
ZZ_MARK(0x8001A6D8);
ZZ_MARK(0x8001A6DC);
ZZ_MARK_TARGET(0x8001A6E0,ZZ_1A5DC_104);
ZZ_MARK(0x8001A6E4);
ZZ_MARK(0x8001A6E8);
ZZ_MARK(0x8001A6EC);
ZZ_MARK(0x8001A6F0);
ZZ_MARK(0x8001A6F4);
ZZ_MARK(0x8001A6F8);
ZZ_MARK(0x8001A6FC);
ZZ_MARK(0x8001A700);
ZZ_MARK(0x8001A704);
ZZ_MARK(0x8001A708);
ZZ_MARK(0x8001A70C);
ZZ_MARK(0x8001A710);
ZZ_MARK(0x8001A714);
ZZ_MARK(0x8001A718);
ZZ_MARK(0x8001A71C);
ZZ_MARK(0x8001A720);
ZZ_MARK(0x8001A724);
ZZ_MARK(0x8001A728);
ZZ_MARK(0x8001A72C);
ZZ_MARK(0x8001A730);
ZZ_MARK(0x8001A734);
ZZ_MARK(0x8001A738);
ZZ_MARK(0x8001A73C);
ZZ_MARK(0x8001A740);
ZZ_MARK(0x8001A744);
ZZ_MARK(0x8001A748);
ZZ_MARK(0x8001A74C);
ZZ_MARK(0x8001A750);
ZZ_MARK(0x8001A754);
ZZ_MARK(0x8001A758);
ZZ_MARK(0x8001A75C);
ZZ_MARK(0x8001A760);
ZZ_MARK(0x8001A764);
ZZ_MARK(0x8001A768);
ZZ_MARK(0x8001A76C);
ZZ_MARK(0x8001A770);
ZZ_MARK(0x8001A774);
ZZ_MARK(0x8001A778);
ZZ_MARK(0x8001A77C);
ZZ_MARK(0x8001A780);
ZZ_MARK(0x8001A784);
ZZ_MARK(0x8001A788);
ZZ_MARK(0x8001A78C);
ZZ_MARK(0x8001A790);
ZZ_MARK(0x8001A794);
ZZ_MARK(0x8001A798);
ZZ_MARK(0x8001A79C);
ZZ_MARK(0x8001A7A0);
ZZ_MARK(0x8001A7A4);
ZZ_MARK(0x8001A7A8);
ZZ_MARK(0x8001A7AC);
ZZ_MARK(0x8001A7B0);
ZZ_MARK(0x8001A7B4);
ZZ_MARK(0x8001A7B8);
ZZ_MARK(0x8001A7BC);
ZZ_MARK(0x8001A7C0);
ZZ_MARK(0x8001A7C4);
ZZ_MARK(0x8001A7C8);
ZZ_MARK(0x8001A7CC);
ZZ_MARK(0x8001A7D0);
ZZ_MARK(0x8001A7D4);
ZZ_MARK(0x8001A7D8);
ZZ_MARK(0x8001A7DC);
ZZ_MARK(0x8001A7E0);
ZZ_MARK(0x8001A7E4);
ZZ_MARK(0x8001A7E8);
ZZ_MARK(0x8001A7EC);
ZZ_MARK(0x8001A7F0);
ZZ_MARK(0x8001A7F4);
ZZ_MARK(0x8001A7F8);
ZZ_MARK(0x8001A7FC);
ZZ_MARK(0x8001A800);
ZZ_MARK(0x8001A804);
ZZ_MARK(0x8001A808);
ZZ_MARK(0x8001A80C);
ZZ_MARK(0x8001A810);
ZZ_MARK(0x8001A814);
ZZ_MARK(0x8001A818);
ZZ_MARK(0x8001A81C);
ZZ_MARK(0x8001A820);
ZZ_MARK_TARGET(0x8001A824,ZZ_1A5DC_248);
ZZ_MARK(0x8001A828);
ZZ_MARK(0x8001A82C);
ZZ_MARK_TARGET(0x8001A830,ZZ_1A5DC_254);
ZZ_MARK(0x8001A834);
ZZ_MARK(0x8001A838);
ZZ_MARK(0x8001A83C);
ZZ_MARK(0x8001A840);
ZZ_MARK(0x8001A844);
