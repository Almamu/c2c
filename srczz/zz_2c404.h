#ifdef ZZ_INCLUDE_CODE
ZZ_2C404:
	SP -= 104;
	EMU_Write32(SP + 84,S1); //+ 0x54
	S1 = A0;
	EMU_Write32(SP + 96,S4); //+ 0x60
	S4 = A1;
	EMU_Write32(SP + 80,S0); //+ 0x50
	S0 = A2;
	A0 = R0;
	V1 = SP + 32;
	EMU_Write32(SP + 100,RA); //+ 0x64
	EMU_Write32(SP + 92,S3); //+ 0x5C
	EMU_Write32(SP + 88,S2); //+ 0x58
	ZZ_CLOCKCYCLES(12,0x8002C434);
ZZ_2C404_30:
	V0 = EMU_ReadU32(A3);
	A3 += 4;
	A0 += 1;
	EMU_Write32(V1 + 16,V0); //+ 0x10
	V0 = (int32_t)A0 < 3;
	if (V0)
	{
		V1 += 4;
		ZZ_CLOCKCYCLES(7,0x8002C434);
		goto ZZ_2C404_30;
	}
	V1 += 4;
	A0 = R0;
	A1 = SP + 32;
	A2 = S0;
	ZZ_CLOCKCYCLES(10,0x8002C45C);
ZZ_2C404_58:
	V0 = EMU_ReadU32(A2);
	V1 = EMU_ReadU32(A1 + 16); //+ 0x10
	A2 += 4;
	A0 += 1;
	V0 += V1;
	EMU_Write32(A1,V0);
	V0 = (int32_t)A0 < 3;
	if (V0)
	{
		A1 += 4;
		ZZ_CLOCKCYCLES(9,0x8002C45C);
		goto ZZ_2C404_58;
	}
	A1 += 4;
	A0 = S1;
	A1 = S0;
	A2 = SP + 32;
	A3 = S4;
	V0 = SP + 64;
	RA = 0x8002C49C; //ZZ_2C404_98
	EMU_Write32(SP + 16,V0); //+ 0x10
	ZZ_CLOCKCYCLES(16,0x8002B478);
	goto ZZ_2B478;
ZZ_2C404_98:
	A0 = S0;
	A1 = SP + 32;
	A2 = S1;
	RA = 0x8002C4B0; //ZZ_2C404_AC
	A3 = S4;
	ZZ_CLOCKCYCLES(5,0x8002E11C);
	goto ZZ_2E11C;
ZZ_2C404_AC:
	V0 = EMU_ReadU32(SP + 32); //+ 0x20
	V1 = EMU_ReadU32(S0);
	V0 = V0 - V1;
	A0 = V0 << 2;
	if ((int32_t)A0 >= 0)
	{
		ZZ_CLOCKCYCLES(7,0x8002C4D0);
		goto ZZ_2C404_CC;
	}
	A0 += 8191;
	ZZ_CLOCKCYCLES(8,0x8002C4D0);
ZZ_2C404_CC:
	V0 = EMU_ReadU32(SP + 40); //+ 0x28
	V1 = EMU_ReadU32(S0 + 8); //+ 0x8
	V0 = V0 - V1;
	V1 = V0 << 2;
	V0 = (int32_t)A0 >> 13;
	if ((int32_t)V1 >= 0)
	{
		S2 = V0 + 16;
		ZZ_CLOCKCYCLES(8,0x8002C4F4);
		goto ZZ_2C404_F0;
	}
	S2 = V0 + 16;
	V1 += 8191;
	ZZ_CLOCKCYCLES(9,0x8002C4F4);
ZZ_2C404_F0:
	A0 = S0;
	A1 = S2;
	V0 = (int32_t)V1 >> 13;
	S3 = V0 + 16;
	A2 = S3;
	A3 = SP + 68;
	V0 = SP + 72;
	EMU_Write32(SP + 16,V0); //+ 0x10
	EMU_Write32(SP + 20,S1); //+ 0x14
	RA = 0x8002C520; //ZZ_2C404_11C
	EMU_Write32(SP + 24,R0); //+ 0x18
	ZZ_CLOCKCYCLES(11,0x8002E594);
	goto ZZ_2E594;
ZZ_2C404_11C:
	if (!V0)
	{
		ZZ_CLOCKCYCLES(2,0x8002C564);
		goto ZZ_2C404_160;
	}
	V0 = EMU_ReadU32(SP + 68); //+ 0x44
	A0 = EMU_ReadU32(S0);
	V1 = EMU_ReadU32(SP + 72); //+ 0x48
	V0 -= 16;
	V0 <<= 13;
	V0 = (int32_t)V0 >> 2;
	V0 += A0;
	EMU_Write32(SP + 32,V0); //+ 0x20
	V0 = EMU_ReadU32(S0 + 8); //+ 0x8
	V1 -= 16;
	V1 <<= 13;
	V1 = (int32_t)V1 >> 2;
	V1 += V0;
	EMU_Write32(SP + 40,V1); //+ 0x28
	ZZ_CLOCKCYCLES(17,0x8002C57C);
	goto ZZ_2C404_178;
ZZ_2C404_160:
	V0 = EMU_ReadU32(S0);
	EMU_Write32(SP + 32,V0); //+ 0x20
	V0 = EMU_ReadU32(S0 + 8); //+ 0x8
	EMU_Write32(SP + 40,V0); //+ 0x28
	ZZ_CLOCKCYCLES(6,0x8002C57C);
ZZ_2C404_178:
	V0 = EMU_ReadU32(S4 + 4172); //+ 0x104C
	V0 += 1;
	EMU_Write32(S4 + 4172,V0); //+ 0x104C
	V0 = 0x10;
	if (S2 != V0)
	{
		ZZ_CLOCKCYCLES(7,0x8002C5A0);
		goto ZZ_2C404_19C;
	}
	if (S3 == S2)
	{
		A0 = S1;
		ZZ_CLOCKCYCLES(9,0x8002C5D0);
		goto ZZ_2C404_1CC;
	}
	A0 = S1;
	ZZ_CLOCKCYCLES(9,0x8002C5A0);
ZZ_2C404_19C:
	V0 = EMU_ReadU32(SP + 68); //+ 0x44
	if (S2 != V0)
	{
		A0 = S1;
		ZZ_CLOCKCYCLES(4,0x8002C5D0);
		goto ZZ_2C404_1CC;
	}
	A0 = S1;
	V0 = EMU_ReadU32(SP + 72); //+ 0x48
	if (S3 != V0)
	{
		ZZ_CLOCKCYCLES(8,0x8002C5D0);
		goto ZZ_2C404_1CC;
	}
	V0 = EMU_ReadU32(S1 + 168); //+ 0xA8
	V0 |= 0x100;
	EMU_Write32(S1 + 168,V0); //+ 0xA8
	ZZ_CLOCKCYCLES(12,0x8002C5D0);
ZZ_2C404_1CC:
	A1 = S0;
	A2 = SP + 32;
	RA = 0x8002C5E0; //ZZ_2C404_1DC
	A3 = S4;
	ZZ_CLOCKCYCLES(4,0x8002BF4C);
	goto ZZ_2BF4C;
ZZ_2C404_1DC:
	A0 = S1;
	RA = 0x8002C5EC; //ZZ_2C404_1E8
	A1 = SP + 32;
	ZZ_CLOCKCYCLES(3,0x8002C26C);
	goto ZZ_2C26C;
ZZ_2C404_1E8:
	A0 = R0;
	A1 = EMU_ReadU32(SP + 120); //+ 0x78
	V1 = SP + 32;
	ZZ_CLOCKCYCLES(3,0x8002C5F8);
ZZ_2C404_1F4:
	V0 = EMU_ReadU32(V1);
	V1 += 4;
	A0 += 1;
	EMU_Write32(A1,V0);
	V0 = (int32_t)A0 < 3;
	if (V0)
	{
		A1 += 4;
		ZZ_CLOCKCYCLES(7,0x8002C5F8);
		goto ZZ_2C404_1F4;
	}
	A1 += 4;
	RA = EMU_ReadU32(SP + 100); //+ 0x64
	S4 = EMU_ReadU32(SP + 96); //+ 0x60
	S3 = EMU_ReadU32(SP + 92); //+ 0x5C
	S2 = EMU_ReadU32(SP + 88); //+ 0x58
	S1 = EMU_ReadU32(SP + 84); //+ 0x54
	S0 = EMU_ReadU32(SP + 80); //+ 0x50
	SP += 104;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(16);
	ZZ_JUMPREGISTER(0x8002A460,ZZ_29FA4_4BC);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8002C404,0x8002C434,ZZ_2C404);
ZZ_MARK_TARGET(0x8002C434,0x8002C45C,ZZ_2C404_30);
ZZ_MARK_TARGET(0x8002C45C,0x8002C49C,ZZ_2C404_58);
ZZ_MARK_TARGET(0x8002C49C,0x8002C4B0,ZZ_2C404_98);
ZZ_MARK_TARGET(0x8002C4B0,0x8002C4D0,ZZ_2C404_AC);
ZZ_MARK_TARGET(0x8002C4D0,0x8002C4F4,ZZ_2C404_CC);
ZZ_MARK_TARGET(0x8002C4F4,0x8002C520,ZZ_2C404_F0);
ZZ_MARK_TARGET(0x8002C520,0x8002C564,ZZ_2C404_11C);
ZZ_MARK_TARGET(0x8002C564,0x8002C57C,ZZ_2C404_160);
ZZ_MARK_TARGET(0x8002C57C,0x8002C5A0,ZZ_2C404_178);
ZZ_MARK_TARGET(0x8002C5A0,0x8002C5D0,ZZ_2C404_19C);
ZZ_MARK_TARGET(0x8002C5D0,0x8002C5E0,ZZ_2C404_1CC);
ZZ_MARK_TARGET(0x8002C5E0,0x8002C5EC,ZZ_2C404_1DC);
ZZ_MARK_TARGET(0x8002C5EC,0x8002C5F8,ZZ_2C404_1E8);
ZZ_MARK_TARGET(0x8002C5F8,0x8002C638,ZZ_2C404_1F4);
