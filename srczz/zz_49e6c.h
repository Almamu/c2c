#ifdef ZZ_INCLUDE_CODE
	ZZ_CLOCKCYCLES(1,0x80049E6C);
ZZ_49E6C:
	T0 = 0x80060000;
	T0 = EMU_ReadU32(T0 - 12868); //+ 0xFFFFCDBC
	SP -= 16;
	EMU_Write32(SP + 4,S0); //+ 0x4
	EMU_Write32(SP + 8,S1); //+ 0x8
	EMU_Write32(SP + 12,RA); //+ 0xC
	if (T0)
	{
		T0 = 0x1;
		ZZ_CLOCKCYCLES(8,0x80049EC4);
		goto ZZ_49E6C_58;
	}
	T0 = 0x1;
	AT = 0x80060000;
	EMU_Write32(AT - 12868,T0); //+ 0xFFFFCDBC
	S0 = 0x80010000;
	S0 += 0;
	S1 = 0x00000;
	S1 += 0;
	if (!S1)
	{
		ZZ_CLOCKCYCLES(16,0x80049EC4);
		goto ZZ_49E6C_58;
	}
	ZZ_CLOCKCYCLES(16,0x80049EAC);
ZZ_49E6C_40:
	T0 = EMU_ReadU32(S0);
	S0 += 4;
	ZZ_JUMPREGISTER_BEGIN(T0);
	RA = 0x80049EBC; //ZZ_49E6C_50
	S1 -= 1;
	ZZ_CLOCKCYCLES_JR(4);
	// UNIMPLEMENTED JUMP-TO-REGISTER-AND-LINK (T0,80049EB4)
	ZZ_JUMPREGISTER_END();
ZZ_49E6C_50:
	if (S1)
	{
		ZZ_CLOCKCYCLES(2,0x80049EAC);
		goto ZZ_49E6C_40;
	}
	ZZ_CLOCKCYCLES(2,0x80049EC4);
ZZ_49E6C_58:
	RA = EMU_ReadU32(SP + 12); //+ 0xC
	S1 = EMU_ReadU32(SP + 8); //+ 0x8
	S0 = EMU_ReadU32(SP + 4); //+ 0x4
	SP += 16;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(6);
	ZZ_JUMPREGISTER(0x800117CC,ZZ_117BC_10);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80049E6C,ZZ_49E6C);
ZZ_MARK(0x80049E70);
ZZ_MARK(0x80049E74);
ZZ_MARK(0x80049E78);
ZZ_MARK(0x80049E7C);
ZZ_MARK(0x80049E80);
ZZ_MARK(0x80049E84);
ZZ_MARK(0x80049E88);
ZZ_MARK(0x80049E8C);
ZZ_MARK(0x80049E90);
ZZ_MARK(0x80049E94);
ZZ_MARK(0x80049E98);
ZZ_MARK(0x80049E9C);
ZZ_MARK(0x80049EA0);
ZZ_MARK(0x80049EA4);
ZZ_MARK(0x80049EA8);
ZZ_MARK_TARGET(0x80049EAC,ZZ_49E6C_40);
ZZ_MARK(0x80049EB0);
ZZ_MARK(0x80049EB4);
ZZ_MARK(0x80049EB8);
ZZ_MARK_TARGET(0x80049EBC,ZZ_49E6C_50);
ZZ_MARK(0x80049EC0);
ZZ_MARK_TARGET(0x80049EC4,ZZ_49E6C_58);
ZZ_MARK(0x80049EC8);
ZZ_MARK(0x80049ECC);
ZZ_MARK(0x80049ED0);
ZZ_MARK(0x80049ED4);
ZZ_MARK(0x80049ED8);
