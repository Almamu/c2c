#ifdef ZZ_INCLUDE_CODE
ZZ_34F00:
	A3 = EMU_ReadU32(GP + 232); //+ 0xE8
	SP -= 664;
	EMU_Write32(SP + 656,RA); //+ 0x290
	EMU_Write32(SP + 652,S7); //+ 0x28C
	EMU_Write32(SP + 648,S6); //+ 0x288
	EMU_Write32(SP + 644,S5); //+ 0x284
	EMU_Write32(SP + 640,S4); //+ 0x280
	EMU_Write32(SP + 636,S3); //+ 0x27C
	EMU_Write32(SP + 632,S2); //+ 0x278
	EMU_Write32(SP + 628,S1); //+ 0x274
	EMU_Write32(SP + 624,S0); //+ 0x270
	S3 = EMU_ReadU32(A3 + 8); //+ 0x8
	V0 = SP + 616;
	EMU_Write32(SP + 592,V0); //+ 0x250
	EMU_Write32(SP + 596,S3); //+ 0x254
	T0 = EMU_ReadU32(A3 + 36); //+ 0x24
	V1 = EMU_ReadU32(A3 + 32); //+ 0x20
	S6 = R0;
	V0 = -1;
	V1 = (int32_t)T0 < (int32_t)V1;
	if (V1)
	{
		EMU_Write32(SP + 616,V0); //+ 0x268
		ZZ_CLOCKCYCLES(22,0x80034F78);
		goto ZZ_34F00_78;
	}
	EMU_Write32(SP + 616,V0); //+ 0x268
	RA = 0x80034F60; //ZZ_34F00_60
	A0 = 0x2;
	ZZ_CLOCKCYCLES(24,0x800363F0);
	goto ZZ_363F0;
ZZ_34F00_60:
	RA = 0x80034F68; //ZZ_34F00_68
	ZZ_CLOCKCYCLES(2,0x800361C0);
	goto ZZ_361C0;
ZZ_34F00_68:
	RA = 0x80034F70; //ZZ_34F00_70
	A0 = R0;
	ZZ_CLOCKCYCLES(2,0x80036410);
	goto ZZ_36410;
ZZ_34F00_70:
	ZZ_CLOCKCYCLES(2,0x80035484);
	goto ZZ_34F00_584;
ZZ_34F00_78:
	A0 = SP + 16;
	A1 = 0x80060000;
	A1 -= 2796;
	A2 = 0x80060000;
	A2 -= 2804;
	S2 = T0;
	V0 = S2 << 2;
	V0 += S2;
	V0 <<= 3;
	S0 = V0 + 1180;
	RA = 0x80034FA8; //ZZ_34F00_A8
	A3 += S0;
	ZZ_CLOCKCYCLES(12,0x800494EC);
	goto ZZ_494EC;
ZZ_34F00_A8:
	A0 = EMU_ReadU32(GP + 232); //+ 0xE8
	V0 = EMU_ReadU32(A0 + 32); //+ 0x20
	V0 -= 1;
	if (S2 != V0)
	{
		ZZ_CLOCKCYCLES(7,0x80034FF8);
		goto ZZ_34F00_F8;
	}
	RA = 0x80034FCC; //ZZ_34F00_CC
	A0 += S0;
	ZZ_CLOCKCYCLES(9,0x80036244);
	goto ZZ_36244;
ZZ_34F00_CC:
	if (!V0)
	{
		V1 = S3 << 2;
		ZZ_CLOCKCYCLES(2,0x80034FF8);
		goto ZZ_34F00_F8;
	}
	V1 = S3 << 2;
	V0 = EMU_ReadU32(GP + 232); //+ 0xE8
	V1 += S3;
	V1 <<= 2;
	V1 = V1 - S3;
	V1 <<= 2;
	V0 += V1;
	V1 = 0x1;
	EMU_Write32(V0 + 40,V1); //+ 0x28
	ZZ_CLOCKCYCLES(11,0x80035018);
	goto ZZ_34F00_118;
ZZ_34F00_F8:
	V1 = EMU_ReadU32(GP + 232); //+ 0xE8
	V0 = S3 << 2;
	V0 += S3;
	V0 <<= 2;
	V0 = V0 - S3;
	V0 <<= 2;
	V1 += V0;
	EMU_Write32(V1 + 40,R0); //+ 0x28
	ZZ_CLOCKCYCLES(8,0x80035018);
ZZ_34F00_118:
	S0 = R0;
	A0 = SP + 16;
	ZZ_CLOCKCYCLES(2,0x80035020);
ZZ_34F00_120:
	RA = 0x80035028; //ZZ_34F00_128
	A1 = 0x1;
	ZZ_CLOCKCYCLES(2,0x80049FD4);
	goto ZZ_49FD4;
ZZ_34F00_128:
	if ((int32_t)V0 >= 0)
	{
		EMU_Write32(SP + 616,V0); //+ 0x268
		ZZ_CLOCKCYCLES(2,0x80035040);
		goto ZZ_34F00_140;
	}
	EMU_Write32(SP + 616,V0); //+ 0x268
	S0 += 1;
	V0 = (int32_t)S0 < 3;
	if (V0)
	{
		A0 = SP + 16;
		ZZ_CLOCKCYCLES(6,0x80035020);
		goto ZZ_34F00_120;
	}
	A0 = SP + 16;
	ZZ_CLOCKCYCLES(6,0x80035040);
ZZ_34F00_140:
	A0 = S0;
	A1 = 0x3;
	A2 = 0x80030000;
	A2 += 19828;
	RA = 0x80035058; //ZZ_34F00_158
	A3 = SP + 592;
	ZZ_CLOCKCYCLES(6,0x80034D40);
	goto ZZ_34D40;
ZZ_34F00_158:
	if (V0)
	{
		S0 = R0;
		ZZ_CLOCKCYCLES(2,0x80035484);
		goto ZZ_34F00_584;
	}
	S0 = R0;
	S1 = 0x80;
	ZZ_CLOCKCYCLES(3,0x80035064);
ZZ_34F00_164:
	A0 = EMU_ReadU32(SP + 616); //+ 0x268
	A1 = SP + 464;
	RA = 0x80035074; //ZZ_34F00_174
	A2 = 0x80;
	ZZ_CLOCKCYCLES(4,0x80049FE4);
	goto ZZ_49FE4;
ZZ_34F00_174:
	if (V0 == S1)
	{
		A0 = S0;
		ZZ_CLOCKCYCLES(2,0x8003508C);
		goto ZZ_34F00_18C;
	}
	A0 = S0;
	S0 += 1;
	V0 = (int32_t)S0 < 3;
	if (V0)
	{
		A0 = S0;
		ZZ_CLOCKCYCLES(6,0x80035064);
		goto ZZ_34F00_164;
	}
	A0 = S0;
	ZZ_CLOCKCYCLES(6,0x8003508C);
ZZ_34F00_18C:
	A1 = 0x3;
	A2 = 0x80030000;
	A2 += 19828;
	S0 = SP + 592;
	RA = 0x800350A4; //ZZ_34F00_1A4
	A3 = S0;
	ZZ_CLOCKCYCLES(6,0x80034D40);
	goto ZZ_34D40;
ZZ_34F00_1A4:
	if (V0)
	{
		V0 = S3 << 2;
		ZZ_CLOCKCYCLES(2,0x80035484);
		goto ZZ_34F00_584;
	}
	V0 = S3 << 2;
	A1 = EMU_ReadU32(GP + 232); //+ 0xE8
	V0 += S3;
	V0 <<= 2;
	V1 = EMU_ReadU8(SP + 466); //+ 0x1D2
	V0 = V0 - S3;
	V0 <<= 2;
	A0 = A1 + V0;
	V0 = V1 - 16;
	V1 -= 17;
	V1 = V1 < 3;
	if (V1)
	{
		EMU_Write32(A0 + 44,V0); //+ 0x2C
		ZZ_CLOCKCYCLES(14,0x80035118);
		goto ZZ_34F00_218;
	}
	EMU_Write32(A0 + 44,V0); //+ 0x2C
	V1 = EMU_ReadU32(A0 + 40); //+ 0x28
	S6 = 0x1;
	V0 = 0x1;
	if (!V1)
	{
		EMU_Write32(A0 + 44,V0); //+ 0x2C
		ZZ_CLOCKCYCLES(19,0x80035118);
		goto ZZ_34F00_218;
	}
	EMU_Write32(A0 + 44,V0); //+ 0x2C
	V0 = EMU_ReadU32(A1 + 20); //+ 0x14
	V1 = EMU_ReadU32(A1 + 16); //+ 0x10
	V0 = (int32_t)V0 < (int32_t)V1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(25,0x80035118);
		goto ZZ_34F00_218;
	}
	RA = 0x80035110; //ZZ_34F00_210
	A0 = S0;
	ZZ_CLOCKCYCLES(27,0x80034D74);
	goto ZZ_34D74;
ZZ_34F00_210:
	ZZ_CLOCKCYCLES(2,0x80035484);
	goto ZZ_34F00_584;
ZZ_34F00_218:
	if (S6)
	{
		S7 = 0x1;
		ZZ_CLOCKCYCLES(2,0x80035124);
		goto ZZ_34F00_224;
	}
	S7 = 0x1;
	S7 = EMU_ReadU8(SP + 467); //+ 0x1D3
	ZZ_CLOCKCYCLES(3,0x80035124);
ZZ_34F00_224:
	V1 = EMU_ReadU32(GP + 232); //+ 0xE8
	V0 = S3 << 2;
	V0 += S3;
	V0 <<= 2;
	V0 = V0 - S3;
	S0 = V0 << 2;
	A2 = V1 + S0;
	if (S6)
	{
		EMU_Write32(A2 + 48,S2); //+ 0x30
		ZZ_CLOCKCYCLES(9,0x80035188);
		goto ZZ_34F00_288;
	}
	EMU_Write32(A2 + 48,S2); //+ 0x30
	EMU_Write8(A2 + 52,R0); //+ 0x34
	V0 = EMU_ReadU8(SP + 468); //+ 0x1D4
	V0 = V0 < 128;
	if (V0)
	{
		ZZ_CLOCKCYCLES(15,0x80035168);
		goto ZZ_34F00_268;
	}
	RA = 0x80035168; //ZZ_34F00_268
	A0 = SP + 464;
	ZZ_CLOCKCYCLES(17,0x800354B4);
	goto ZZ_354B4;
ZZ_34F00_268:
	A0 = EMU_ReadU32(GP + 232); //+ 0xE8
	A1 = SP + 468;
	EMU_Write8(SP + 499,R0); //+ 0x1F3
	A0 += S0;
	RA = 0x80035180; //ZZ_34F00_280
	A0 += 52;
	ZZ_CLOCKCYCLES(6,0x8004947C);
	goto ZZ_4947C;
ZZ_34F00_280:
	S0 = S3 << 2;
	ZZ_CLOCKCYCLES(2,0x800351B8);
	goto ZZ_34F00_2B8;
ZZ_34F00_288:
	A1 = 0x80010000;
	A1 += 1660;
	V0 = EMU_ReadU32(A1);
	V1 = EMU_ReadU32(A1 + 4); //+ 0x4
	A0 = EMU_ReadU32(A1 + 8); //+ 0x8
	EMU_Write32(A2 + 52,V0); //+ 0x34
	EMU_Write32(A2 + 56,V1); //+ 0x38
	EMU_Write32(A2 + 60,A0); //+ 0x3C
	V0 = EMU_ReadS8(A1 + 12); //+ 0xC
	EMU_Write8(A2 + 64,V0); //+ 0x40
	S0 = S3 << 2;
	ZZ_CLOCKCYCLES(12,0x800351B8);
ZZ_34F00_2B8:
	S0 += S3;
	A0 = EMU_ReadU32(GP + 232); //+ 0xE8
	S0 <<= 2;
	S0 = S0 - S3;
	S0 <<= 2;
	A0 += S0;
	RA = 0x800351D8; //ZZ_34F00_2D8
	A0 += 52;
	ZZ_CLOCKCYCLES(8,0x800362E0);
	goto ZZ_362E0;
ZZ_34F00_2D8:
	V0 = EMU_ReadU32(GP + 232); //+ 0xE8
	V1 = V0 + S0;
	V0 = EMU_ReadU32(V1 + 40); //+ 0x28
	if (!V0)
	{
		ZZ_CLOCKCYCLES(7,0x80035368);
		goto ZZ_34F00_468;
	}
	if (S6)
	{
		ZZ_CLOCKCYCLES(9,0x80035290);
		goto ZZ_34F00_390;
	}
	V0 = EMU_ReadU32(V1 + 44); //+ 0x2C
	V0 = (int32_t)S6 < (int32_t)V0;
	if (!V0)
	{
		S1 = R0;
		ZZ_CLOCKCYCLES(14,0x80035290);
		goto ZZ_34F00_390;
	}
	S1 = R0;
	S4 = SP + 80;
	S5 = 0x80;
	ZZ_CLOCKCYCLES(16,0x80035218);
ZZ_34F00_318:
	S0 = R0;
	S2 = S1 << 7;
	ZZ_CLOCKCYCLES(2,0x80035220);
ZZ_34F00_320:
	A0 = EMU_ReadU32(SP + 616); //+ 0x268
	A1 = S4 + S2;
	RA = 0x80035230; //ZZ_34F00_330
	A2 = 0x80;
	ZZ_CLOCKCYCLES(4,0x80049FE4);
	goto ZZ_49FE4;
ZZ_34F00_330:
	if (V0 == S5)
	{
		A0 = S0;
		ZZ_CLOCKCYCLES(2,0x80035248);
		goto ZZ_34F00_348;
	}
	A0 = S0;
	S0 += 1;
	V0 = (int32_t)S0 < 3;
	if (V0)
	{
		A0 = S0;
		ZZ_CLOCKCYCLES(6,0x80035220);
		goto ZZ_34F00_320;
	}
	A0 = S0;
	ZZ_CLOCKCYCLES(6,0x80035248);
ZZ_34F00_348:
	A1 = 0x3;
	A2 = 0x80030000;
	A2 += 19828;
	RA = 0x8003525C; //ZZ_34F00_35C
	A3 = SP + 592;
	ZZ_CLOCKCYCLES(5,0x80034D40);
	goto ZZ_34D40;
ZZ_34F00_35C:
	if (V0)
	{
		V1 = S3 << 2;
		ZZ_CLOCKCYCLES(2,0x80035484);
		goto ZZ_34F00_584;
	}
	V1 = S3 << 2;
	V0 = EMU_ReadU32(GP + 232); //+ 0xE8
	V1 += S3;
	V1 <<= 2;
	V1 = V1 - S3;
	V1 <<= 2;
	V0 += V1;
	V0 = EMU_ReadU32(V0 + 44); //+ 0x2C
	S1 += 1;
	V0 = (int32_t)S1 < (int32_t)V0;
	if (V0)
	{
		ZZ_CLOCKCYCLES(13,0x80035218);
		goto ZZ_34F00_318;
	}
	ZZ_CLOCKCYCLES(13,0x80035290);
ZZ_34F00_390:
	A1 = EMU_ReadU32(GP + 232); //+ 0xE8
	V0 = S3 << 2;
	V0 += S3;
	V0 <<= 2;
	V0 = V0 - S3;
	V0 <<= 2;
	V0 += A1;
	V0 = EMU_ReadU32(V0 + 40); //+ 0x28
	if (!V0)
	{
		ZZ_CLOCKCYCLES(11,0x80035368);
		goto ZZ_34F00_468;
	}
	if (S6)
	{
		S2 = A1 + 1780;
		ZZ_CLOCKCYCLES(13,0x80035368);
		goto ZZ_34F00_468;
	}
	S2 = A1 + 1780;
	S1 = R0;
	S4 = 0x80;
	ZZ_CLOCKCYCLES(15,0x800352CC);
ZZ_34F00_3CC:
	S0 = R0;
	ZZ_CLOCKCYCLES(1,0x800352D0);
ZZ_34F00_3D0:
	A0 = EMU_ReadU32(SP + 616); //+ 0x268
	A1 = S2;
	RA = 0x800352E0; //ZZ_34F00_3E0
	A2 = 0x80;
	ZZ_CLOCKCYCLES(4,0x80049FE4);
	goto ZZ_49FE4;
ZZ_34F00_3E0:
	if (V0 == S4)
	{
		A0 = S0;
		ZZ_CLOCKCYCLES(2,0x800352F8);
		goto ZZ_34F00_3F8;
	}
	A0 = S0;
	S0 += 1;
	V0 = (int32_t)S0 < 3;
	if (V0)
	{
		A0 = S0;
		ZZ_CLOCKCYCLES(6,0x800352D0);
		goto ZZ_34F00_3D0;
	}
	A0 = S0;
	ZZ_CLOCKCYCLES(6,0x800352F8);
ZZ_34F00_3F8:
	A1 = 0x3;
	A2 = 0x80030000;
	A2 += 19828;
	RA = 0x8003530C; //ZZ_34F00_40C
	A3 = SP + 592;
	ZZ_CLOCKCYCLES(5,0x80034D40);
	goto ZZ_34D40;
ZZ_34F00_40C:
	if (V0)
	{
		S1 += 1;
		ZZ_CLOCKCYCLES(2,0x80035484);
		goto ZZ_34F00_584;
	}
	S1 += 1;
	V0 = S1 < 22;
	if (V0)
	{
		S2 += 128;
		ZZ_CLOCKCYCLES(5,0x800352CC);
		goto ZZ_34F00_3CC;
	}
	S2 += 128;
	RA = 0x80035328; //ZZ_34F00_428
	ZZ_CLOCKCYCLES(7,0x80036C8C);
	goto ZZ_36C8C;
ZZ_34F00_428:
	if (!V0)
	{
		ZZ_CLOCKCYCLES(2,0x80035360);
		goto ZZ_34F00_460;
	}
	V0 = EMU_ReadU32(GP + 232); //+ 0xE8
	V1 = EMU_ReadU32(V0 + 20); //+ 0x14
	V0 = EMU_ReadU32(V0 + 16); //+ 0x10
	V1 = (int32_t)V1 < (int32_t)V0;
	if (!V1)
	{
		S6 = 0x1;
		ZZ_CLOCKCYCLES(10,0x80035368);
		goto ZZ_34F00_468;
	}
	S6 = 0x1;
	RA = 0x80035358; //ZZ_34F00_458
	A0 = SP + 592;
	ZZ_CLOCKCYCLES(12,0x80034D74);
	goto ZZ_34D74;
ZZ_34F00_458:
	ZZ_CLOCKCYCLES(2,0x80035484);
	goto ZZ_34F00_584;
ZZ_34F00_460:
	RA = 0x80035368; //ZZ_34F00_468
	ZZ_CLOCKCYCLES(2,0x80036AE8);
	goto ZZ_36AE8;
ZZ_34F00_468:
	RA = 0x80035370; //ZZ_34F00_470
	A0 = SP + 616;
	ZZ_CLOCKCYCLES(2,0x80036270);
	goto ZZ_36270;
ZZ_34F00_470:
	if (!S6)
	{
		V1 = S3 << 2;
		ZZ_CLOCKCYCLES(2,0x800353C0);
		goto ZZ_34F00_4C0;
	}
	V1 = S3 << 2;
	V0 = EMU_ReadU32(GP + 232); //+ 0xE8
	V1 += S3;
	V1 <<= 2;
	V1 = V1 - S3;
	V1 <<= 2;
	V0 += V1;
	V0 = EMU_ReadU32(V0 + 40); //+ 0x28
	if (!V0)
	{
		ZZ_CLOCKCYCLES(12,0x80035464);
		goto ZZ_34F00_564;
	}
	RA = 0x800353A8; //ZZ_34F00_4A8
	A0 = 0x80;
	ZZ_CLOCKCYCLES(14,0x800363C8);
	goto ZZ_363C8;
ZZ_34F00_4A8:
	RA = 0x800353B0; //ZZ_34F00_4B0
	ZZ_CLOCKCYCLES(2,0x80036B58);
	goto ZZ_36B58;
ZZ_34F00_4B0:
	RA = 0x800353B8; //ZZ_34F00_4B8
	ZZ_CLOCKCYCLES(2,0x80036AE8);
	goto ZZ_36AE8;
ZZ_34F00_4B8:
	ZZ_CLOCKCYCLES(2,0x80035464);
	goto ZZ_34F00_564;
ZZ_34F00_4C0:
	S0 = 0x1;
	V0 = (int32_t)S0 < (int32_t)S7;
	if (!V0)
	{
		V0 = S3 << 2;
		ZZ_CLOCKCYCLES(4,0x80035464);
		goto ZZ_34F00_564;
	}
	V0 = S3 << 2;
	V0 += S3;
	V0 <<= 2;
	V0 = V0 - S3;
	T1 = V0 << 2;
	ZZ_CLOCKCYCLES(8,0x800353E0);
ZZ_34F00_4E0:
	A0 = EMU_ReadU32(GP + 232); //+ 0xE8
	V1 = S3 + S0;
	V0 = V1 << 2;
	V0 += V1;
	V0 <<= 2;
	V0 = V0 - V1;
	V0 <<= 2;
	V0 += A0;
	A3 = V0 + 40;
	A0 += T1;
	A2 = A0 + 40;
	T0 = A0 + 104;
	ZZ_CLOCKCYCLES(12,0x80035410);
ZZ_34F00_510:
	V0 = EMU_ReadU32(A2);
	V1 = EMU_ReadU32(A2 + 4); //+ 0x4
	A0 = EMU_ReadU32(A2 + 8); //+ 0x8
	A1 = EMU_ReadU32(A2 + 12); //+ 0xC
	EMU_Write32(A3,V0);
	EMU_Write32(A3 + 4,V1); //+ 0x4
	EMU_Write32(A3 + 8,A0); //+ 0x8
	EMU_Write32(A3 + 12,A1); //+ 0xC
	A2 += 16;
	if (A2 != T0)
	{
		A3 += 16;
		ZZ_CLOCKCYCLES(11,0x80035410);
		goto ZZ_34F00_510;
	}
	A3 += 16;
	V0 = EMU_ReadU32(A2);
	V1 = EMU_ReadU32(A2 + 4); //+ 0x4
	A0 = EMU_ReadU32(A2 + 8); //+ 0x8
	EMU_Write32(A3,V0);
	EMU_Write32(A3 + 4,V1); //+ 0x4
	EMU_Write32(A3 + 8,A0); //+ 0x8
	S0 += 1;
	V0 = (int32_t)S0 < (int32_t)S7;
	if (V0)
	{
		ZZ_CLOCKCYCLES(21,0x800353E0);
		goto ZZ_34F00_4E0;
	}
	ZZ_CLOCKCYCLES(21,0x80035464);
ZZ_34F00_564:
	V0 = EMU_ReadU32(GP + 232); //+ 0xE8
	V1 = EMU_ReadU32(V0 + 36); //+ 0x24
	A0 = EMU_ReadU32(V0 + 8); //+ 0x8
	V1 += 1;
	A0 += S7;
	EMU_Write32(V0 + 36,V1); //+ 0x24
	EMU_Write32(V0 + 8,A0); //+ 0x8
	ZZ_CLOCKCYCLES(8,0x80035484);
ZZ_34F00_584:
	RA = EMU_ReadU32(SP + 656); //+ 0x290
	S7 = EMU_ReadU32(SP + 652); //+ 0x28C
	S6 = EMU_ReadU32(SP + 648); //+ 0x288
	S5 = EMU_ReadU32(SP + 644); //+ 0x284
	S4 = EMU_ReadU32(SP + 640); //+ 0x280
	S3 = EMU_ReadU32(SP + 636); //+ 0x27C
	S2 = EMU_ReadU32(SP + 632); //+ 0x278
	S1 = EMU_ReadU32(SP + 628); //+ 0x274
	S0 = EMU_ReadU32(SP + 624); //+ 0x270
	SP += 664;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(12);
	ZZ_JUMPREGISTER(0x800349A4,ZZ_348EC_B8);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80034F00,0x80034F60,ZZ_34F00);
ZZ_MARK_TARGET(0x80034F60,0x80034F68,ZZ_34F00_60);
ZZ_MARK_TARGET(0x80034F68,0x80034F70,ZZ_34F00_68);
ZZ_MARK_TARGET(0x80034F70,0x80034F78,ZZ_34F00_70);
ZZ_MARK_TARGET(0x80034F78,0x80034FA8,ZZ_34F00_78);
ZZ_MARK_TARGET(0x80034FA8,0x80034FCC,ZZ_34F00_A8);
ZZ_MARK_TARGET(0x80034FCC,0x80034FF8,ZZ_34F00_CC);
ZZ_MARK_TARGET(0x80034FF8,0x80035018,ZZ_34F00_F8);
ZZ_MARK_TARGET(0x80035018,0x80035020,ZZ_34F00_118);
ZZ_MARK_TARGET(0x80035020,0x80035028,ZZ_34F00_120);
ZZ_MARK_TARGET(0x80035028,0x80035040,ZZ_34F00_128);
ZZ_MARK_TARGET(0x80035040,0x80035058,ZZ_34F00_140);
ZZ_MARK_TARGET(0x80035058,0x80035064,ZZ_34F00_158);
ZZ_MARK_TARGET(0x80035064,0x80035074,ZZ_34F00_164);
ZZ_MARK_TARGET(0x80035074,0x8003508C,ZZ_34F00_174);
ZZ_MARK_TARGET(0x8003508C,0x800350A4,ZZ_34F00_18C);
ZZ_MARK_TARGET(0x800350A4,0x80035110,ZZ_34F00_1A4);
ZZ_MARK_TARGET(0x80035110,0x80035118,ZZ_34F00_210);
ZZ_MARK_TARGET(0x80035118,0x80035124,ZZ_34F00_218);
ZZ_MARK_TARGET(0x80035124,0x80035168,ZZ_34F00_224);
ZZ_MARK_TARGET(0x80035168,0x80035180,ZZ_34F00_268);
ZZ_MARK_TARGET(0x80035180,0x80035188,ZZ_34F00_280);
ZZ_MARK_TARGET(0x80035188,0x800351B8,ZZ_34F00_288);
ZZ_MARK_TARGET(0x800351B8,0x800351D8,ZZ_34F00_2B8);
ZZ_MARK_TARGET(0x800351D8,0x80035218,ZZ_34F00_2D8);
ZZ_MARK_TARGET(0x80035218,0x80035220,ZZ_34F00_318);
ZZ_MARK_TARGET(0x80035220,0x80035230,ZZ_34F00_320);
ZZ_MARK_TARGET(0x80035230,0x80035248,ZZ_34F00_330);
ZZ_MARK_TARGET(0x80035248,0x8003525C,ZZ_34F00_348);
ZZ_MARK_TARGET(0x8003525C,0x80035290,ZZ_34F00_35C);
ZZ_MARK_TARGET(0x80035290,0x800352CC,ZZ_34F00_390);
ZZ_MARK_TARGET(0x800352CC,0x800352D0,ZZ_34F00_3CC);
ZZ_MARK_TARGET(0x800352D0,0x800352E0,ZZ_34F00_3D0);
ZZ_MARK_TARGET(0x800352E0,0x800352F8,ZZ_34F00_3E0);
ZZ_MARK_TARGET(0x800352F8,0x8003530C,ZZ_34F00_3F8);
ZZ_MARK_TARGET(0x8003530C,0x80035328,ZZ_34F00_40C);
ZZ_MARK_TARGET(0x80035328,0x80035358,ZZ_34F00_428);
ZZ_MARK_TARGET(0x80035358,0x80035360,ZZ_34F00_458);
ZZ_MARK_TARGET(0x80035360,0x80035368,ZZ_34F00_460);
ZZ_MARK_TARGET(0x80035368,0x80035370,ZZ_34F00_468);
ZZ_MARK_TARGET(0x80035370,0x800353A8,ZZ_34F00_470);
ZZ_MARK_TARGET(0x800353A8,0x800353B0,ZZ_34F00_4A8);
ZZ_MARK_TARGET(0x800353B0,0x800353B8,ZZ_34F00_4B0);
ZZ_MARK_TARGET(0x800353B8,0x800353C0,ZZ_34F00_4B8);
ZZ_MARK_TARGET(0x800353C0,0x800353E0,ZZ_34F00_4C0);
ZZ_MARK_TARGET(0x800353E0,0x80035410,ZZ_34F00_4E0);
ZZ_MARK_TARGET(0x80035410,0x80035464,ZZ_34F00_510);
ZZ_MARK_TARGET(0x80035464,0x80035484,ZZ_34F00_564);
ZZ_MARK_TARGET(0x80035484,0x800354B4,ZZ_34F00_584);
