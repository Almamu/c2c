#ifdef ZZ_INCLUDE_CODE
ZZ_54C08:
	A0 <<= 16;
	V0 = 0x80070000;
	V0 -= 15268;
	A0 = (int32_t)A0 >> 14;
	A0 += V0;
	A1 <<= 16;
	A1 = (int32_t)A1 >> 16;
	V0 = A1 << 1;
	V0 += A1;
	V0 <<= 2;
	V0 = V0 - A1;
	V1 = EMU_ReadU32(A0);
	A2 = V0 << 4;
	V1 += A2;
	A1 = EMU_ReadU32(V1 + 152); //+ 0x98
	V0 = A1 & 0x204;
	if (V0)
	{
		V0 = A1 & 0x100;
		ZZ_CLOCKCYCLES(19,0x80054C9C);
		goto ZZ_54C08_94;
	}
	V0 = A1 & 0x100;
	if (V0)
	{
		V0 = -3;
		ZZ_CLOCKCYCLES(21,0x80054C9C);
		goto ZZ_54C08_94;
	}
	V0 = -3;
	V0 &= A1;
	EMU_Write32(V1 + 152,V0); //+ 0x98
	V1 = EMU_ReadU32(A0);
	V1 += A2;
	V0 = EMU_ReadU32(V1 + 152); //+ 0x98
	V0 |= 0x8;
	EMU_Write32(V1 + 152,V0); //+ 0x98
	V1 = EMU_ReadU32(A0);
	V1 += A2;
	V0 = EMU_ReadU32(V1 + 152); //+ 0x98
	V0 |= 0x1;
	EMU_Write32(V1 + 152,V0); //+ 0x98
	ZZ_CLOCKCYCLES(37,0x80054C9C);
ZZ_54C08_94:
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(2);
	ZZ_JUMPREGISTER(0x80054CE8,ZZ_54CCC_1C);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80054C08,ZZ_54C08);
ZZ_MARK(0x80054C0C);
ZZ_MARK(0x80054C10);
ZZ_MARK(0x80054C14);
ZZ_MARK(0x80054C18);
ZZ_MARK(0x80054C1C);
ZZ_MARK(0x80054C20);
ZZ_MARK(0x80054C24);
ZZ_MARK(0x80054C28);
ZZ_MARK(0x80054C2C);
ZZ_MARK(0x80054C30);
ZZ_MARK(0x80054C34);
ZZ_MARK(0x80054C38);
ZZ_MARK(0x80054C3C);
ZZ_MARK(0x80054C40);
ZZ_MARK(0x80054C44);
ZZ_MARK(0x80054C48);
ZZ_MARK(0x80054C4C);
ZZ_MARK(0x80054C50);
ZZ_MARK(0x80054C54);
ZZ_MARK(0x80054C58);
ZZ_MARK(0x80054C5C);
ZZ_MARK(0x80054C60);
ZZ_MARK(0x80054C64);
ZZ_MARK(0x80054C68);
ZZ_MARK(0x80054C6C);
ZZ_MARK(0x80054C70);
ZZ_MARK(0x80054C74);
ZZ_MARK(0x80054C78);
ZZ_MARK(0x80054C7C);
ZZ_MARK(0x80054C80);
ZZ_MARK(0x80054C84);
ZZ_MARK(0x80054C88);
ZZ_MARK(0x80054C8C);
ZZ_MARK(0x80054C90);
ZZ_MARK(0x80054C94);
ZZ_MARK(0x80054C98);
ZZ_MARK_TARGET(0x80054C9C,ZZ_54C08_94);
ZZ_MARK(0x80054CA0);
