#ifdef ZZ_INCLUDE_CODE
ZZ_58740:
	A1 = 0x80070000;
	A1 = EMU_ReadU8(A1 - 26611); //+ 0xFFFF980D
	V0 = 0x80070000;
	V0 = EMU_ReadU8(V0 - 26626); //+ 0xFFFF97FE
	V1 = 0x80070000;
	V1 = EMU_ReadU8(V1 - 26612); //+ 0xFFFF980C
	V0 += 60;
	if ((int32_t)A1 >= 0)
	{
		V0 = V0 - V1;
		ZZ_CLOCKCYCLES(9,0x80058768);
		goto ZZ_58740_28;
	}
	V0 = V0 - V1;
	A1 += 7;
	ZZ_CLOCKCYCLES(10,0x80058768);
ZZ_58740_28:
	V1 = 0x2AAA0000;
	V1 |= 0xAAAB;
	V0 <<= 16;
	A0 = (int32_t)V0 >> 16;
	EMU_SMultiply(A0,V1);
	A1 >>= 3;
	V0 = (int32_t)V0 >> 31;
	A3 = HI;
	V1 = (int32_t)A3 >> 1;
	A2 = V1 - V0;
	V0 = A2 << 1;
	V0 += A2;
	V0 <<= 2;
	A0 = A0 - V0;
	V0 = A1 < 16;
	if (V0)
	{
		V0 = A0 << 16;
		ZZ_CLOCKCYCLES(17,0x800587B0);
		goto ZZ_58740_70;
	}
	V0 = A0 << 16;
	A1 = 15;
	ZZ_CLOCKCYCLES(18,0x800587B0);
ZZ_58740_70:
	V0 = (int32_t)V0 >> 12;
	V1 = A1 & 0xFFFF;
	V0 += V1;
	V0 <<= 1;
	AT = 0x80060000;
	AT += V0;
	V1 = EMU_ReadU16(AT - 3448); //+ 0xFFFFF288
	V0 = A2 - 5;
	V0 <<= 16;
	V0 = (int32_t)V0 >> 16;
	if ((int32_t)V0 <= 0)
	{
		ZZ_CLOCKCYCLES(12,0x800587E8);
		goto ZZ_58740_A8;
	}
	V1 <<= V0;
	ZZ_CLOCKCYCLES(14,0x800587FC);
	goto ZZ_58740_BC;
ZZ_58740_A8:
	if ((int32_t)V0 >= 0)
	{
		ZZ_CLOCKCYCLES(2,0x800587FC);
		goto ZZ_58740_BC;
	}
	V1 &= 0xFFFF;
	V0 = -V0;
	V1 = (int32_t)V1 >> V0;
	ZZ_CLOCKCYCLES(5,0x800587FC);
ZZ_58740_BC:
	ZZ_JUMPREGISTER_BEGIN(RA);
	V0 = V1 & 0xFFFF;
	ZZ_CLOCKCYCLES_JR(2);
	ZZ_JUMPREGISTER(0x80057FB8,ZZ_57AAC_50C);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80058740,0x80058768,ZZ_58740);
ZZ_MARK_TARGET(0x80058768,0x800587B0,ZZ_58740_28);
ZZ_MARK_TARGET(0x800587B0,0x800587E8,ZZ_58740_70);
ZZ_MARK_TARGET(0x800587E8,0x800587FC,ZZ_58740_A8);
ZZ_MARK_TARGET(0x800587FC,0x80058804,ZZ_58740_BC);
