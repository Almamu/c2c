#ifdef ZZ_INCLUDE_CODE
ZZ_14C94:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 30760); //+ 0x7828
	V1 = A0 >> 13;
	V1 &= 0x3FC;
	V1 += V0;
	V1 = EMU_ReadU32(V1);
	V0 = EMU_ReadU32(V1 + 4); //+ 0x4
	if (V0 == A0)
	{
		V0 = V1;
		ZZ_CLOCKCYCLES(11,0x80014D04);
		goto ZZ_14C94_70;
	}
	V0 = V1;
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 30776); //+ 0x7838
	A2 = 0x80060000;
	A2 = EMU_ReadU32(A2 + 30764); //+ 0x782C
	A1 = EMU_ReadU32(V0 + 1028); //+ 0x404
	V1 += 8;
	ZZ_CLOCKCYCLES(17,0x80014CD8);
ZZ_14C94_44:
	V0 = V1 - A2;
	V0 = (int32_t)V0 >> 3;
	V0 = (int32_t)V0 < (int32_t)A1;
	if (!V0)
	{
		V0 = -10;
		ZZ_CLOCKCYCLES(5,0x80014D04);
		goto ZZ_14C94_70;
	}
	V0 = -10;
	V0 = EMU_ReadU32(V1 + 4); //+ 0x4
	if (V0 != A0)
	{
		V1 += 8;
		ZZ_CLOCKCYCLES(9,0x80014CD8);
		goto ZZ_14C94_44;
	}
	V1 += 8;
	V1 -= 8;
	V0 = V1;
	ZZ_CLOCKCYCLES(11,0x80014D04);
ZZ_14C94_70:
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(2);
	ZZ_JUMPREGISTER(0x80015174,ZZ_14D6C_408);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80014C94,ZZ_14C94);
ZZ_MARK(0x80014C98);
ZZ_MARK(0x80014C9C);
ZZ_MARK(0x80014CA0);
ZZ_MARK(0x80014CA4);
ZZ_MARK(0x80014CA8);
ZZ_MARK(0x80014CAC);
ZZ_MARK(0x80014CB0);
ZZ_MARK(0x80014CB4);
ZZ_MARK(0x80014CB8);
ZZ_MARK(0x80014CBC);
ZZ_MARK(0x80014CC0);
ZZ_MARK(0x80014CC4);
ZZ_MARK(0x80014CC8);
ZZ_MARK(0x80014CCC);
ZZ_MARK(0x80014CD0);
ZZ_MARK(0x80014CD4);
ZZ_MARK_TARGET(0x80014CD8,ZZ_14C94_44);
ZZ_MARK(0x80014CDC);
ZZ_MARK(0x80014CE0);
ZZ_MARK(0x80014CE4);
ZZ_MARK(0x80014CE8);
ZZ_MARK(0x80014CEC);
ZZ_MARK(0x80014CF0);
ZZ_MARK(0x80014CF4);
ZZ_MARK(0x80014CF8);
ZZ_MARK(0x80014CFC);
ZZ_MARK(0x80014D00);
ZZ_MARK_TARGET(0x80014D04,ZZ_14C94_70);
ZZ_MARK(0x80014D08);
