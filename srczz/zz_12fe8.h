#ifdef ZZ_INCLUDE_CODE
ZZ_12FE8:
	SP -= 48;
	A2 = A0;
	EMU_Write32(SP + 44,RA); //+ 0x2C
	EMU_Write32(SP + 40,S2); //+ 0x28
	EMU_Write32(SP + 36,S1); //+ 0x24
	EMU_Write32(SP + 32,S0); //+ 0x20
	V0 = EMU_ReadS16(A2 + 10); //+ 0xA
	A3 = EMU_ReadU32(A2 + 20); //+ 0x14
	if (!V0)
	{
		V0 = A1 << 5;
		ZZ_CLOCKCYCLES(10,0x80013050);
		goto ZZ_12FE8_68;
	}
	V0 = A1 << 5;
	V1 = EMU_ReadS16(A2 + 8); //+ 0x8
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 + 30776); //+ 0x7838
	S2 = V0 - V1;
	V0 = (int32_t)A3 >> 1;
	V0 <<= 2;
	V0 += A0;
	A0 = EMU_ReadU32(A2);
	V0 = EMU_ReadU32(V0 + 1056); //+ 0x420
	A1 = 0x80060000;
	A1 = EMU_ReadU32(A1 + 30784); //+ 0x7840
	V1 <<= 11;
	S1 = A0 + V1;
	V0 >>= 6;
	S0 = A1 + V0;
	ZZ_CLOCKCYCLES(26,0x8001307C);
	goto ZZ_12FE8_94;
ZZ_12FE8_68:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 30776); //+ 0x7838
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 + 30784); //+ 0x7840
	V0 = EMU_ReadU32(V0 + 1048); //+ 0x418
	S2 = A1 << 5;
	S1 = EMU_ReadU32(A2);
	V1 += V0;
	V0 = (int32_t)A3 >> 1;
	V0 <<= 5;
	S0 = V1 + V0;
	ZZ_CLOCKCYCLES(11,0x8001307C);
ZZ_12FE8_94:
	A0 = S0;
	ZZ_CLOCKCYCLES(1,0x80013080);
ZZ_12FE8_98:
	RA = 0x80013088; //ZZ_12FE8_A0
	A1 = SP + 16;
	ZZ_CLOCKCYCLES(2,0x80047234);
	goto ZZ_47234;
ZZ_12FE8_A0:
	A0 = 0x2;
	RA = 0x80013094; //ZZ_12FE8_AC
	A1 = SP + 16;
	ZZ_CLOCKCYCLES(3,0x80046F20);
	goto ZZ_46F20;
ZZ_12FE8_AC:
	if (!V0)
	{
		A0 = 0x1;
		ZZ_CLOCKCYCLES(2,0x8001307C);
		goto ZZ_12FE8_94;
	}
	A0 = 0x1;
	RA = 0x800130A4; //ZZ_12FE8_BC
	A1 = R0;
	ZZ_CLOCKCYCLES(4,0x80046D78);
	goto ZZ_46D78;
ZZ_12FE8_BC:
	V1 = V0;
	if (V1)
	{
		V0 = 0x5;
		ZZ_CLOCKCYCLES(3,0x800130C0);
		goto ZZ_12FE8_D8;
	}
	V0 = 0x5;
	A0 = R0;
	RA = 0x800130BC; //ZZ_12FE8_D4
	A1 = R0;
	ZZ_CLOCKCYCLES(6,0x80046D78);
	goto ZZ_46D78;
ZZ_12FE8_D4:
	V1 = 0x5;
	ZZ_CLOCKCYCLES(1,0x800130C0);
ZZ_12FE8_D8:
	if (V0 == V1)
	{
		A0 = S2;
		ZZ_CLOCKCYCLES(2,0x8001307C);
		goto ZZ_12FE8_94;
	}
	A0 = S2;
	A1 = S1;
	RA = 0x800130D4; //ZZ_12FE8_EC
	A2 = 0x80;
	ZZ_CLOCKCYCLES(5,0x8004920C);
	goto ZZ_4920C;
ZZ_12FE8_EC:
	if (!V0)
	{
		A0 = S0;
		ZZ_CLOCKCYCLES(2,0x80013080);
		goto ZZ_12FE8_98;
	}
	A0 = S0;
	V0 = -255;
	RA = EMU_ReadU32(SP + 44); //+ 0x2C
	S2 = EMU_ReadU32(SP + 40); //+ 0x28
	S1 = EMU_ReadU32(SP + 36); //+ 0x24
	S0 = EMU_ReadU32(SP + 32); //+ 0x20
	SP += 48;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(10);
	ZZ_JUMPREGISTER(0x8001342C,ZZ_13304_128);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80012FE8,ZZ_12FE8);
ZZ_MARK(0x80012FEC);
ZZ_MARK(0x80012FF0);
ZZ_MARK(0x80012FF4);
ZZ_MARK(0x80012FF8);
ZZ_MARK(0x80012FFC);
ZZ_MARK(0x80013000);
ZZ_MARK(0x80013004);
ZZ_MARK(0x80013008);
ZZ_MARK(0x8001300C);
ZZ_MARK(0x80013010);
ZZ_MARK(0x80013014);
ZZ_MARK(0x80013018);
ZZ_MARK(0x8001301C);
ZZ_MARK(0x80013020);
ZZ_MARK(0x80013024);
ZZ_MARK(0x80013028);
ZZ_MARK(0x8001302C);
ZZ_MARK(0x80013030);
ZZ_MARK(0x80013034);
ZZ_MARK(0x80013038);
ZZ_MARK(0x8001303C);
ZZ_MARK(0x80013040);
ZZ_MARK(0x80013044);
ZZ_MARK(0x80013048);
ZZ_MARK(0x8001304C);
ZZ_MARK_TARGET(0x80013050,ZZ_12FE8_68);
ZZ_MARK(0x80013054);
ZZ_MARK(0x80013058);
ZZ_MARK(0x8001305C);
ZZ_MARK(0x80013060);
ZZ_MARK(0x80013064);
ZZ_MARK(0x80013068);
ZZ_MARK(0x8001306C);
ZZ_MARK(0x80013070);
ZZ_MARK(0x80013074);
ZZ_MARK(0x80013078);
ZZ_MARK_TARGET(0x8001307C,ZZ_12FE8_94);
ZZ_MARK_TARGET(0x80013080,ZZ_12FE8_98);
ZZ_MARK(0x80013084);
ZZ_MARK_TARGET(0x80013088,ZZ_12FE8_A0);
ZZ_MARK(0x8001308C);
ZZ_MARK(0x80013090);
ZZ_MARK_TARGET(0x80013094,ZZ_12FE8_AC);
ZZ_MARK(0x80013098);
ZZ_MARK(0x8001309C);
ZZ_MARK(0x800130A0);
ZZ_MARK_TARGET(0x800130A4,ZZ_12FE8_BC);
ZZ_MARK(0x800130A8);
ZZ_MARK(0x800130AC);
ZZ_MARK(0x800130B0);
ZZ_MARK(0x800130B4);
ZZ_MARK(0x800130B8);
ZZ_MARK_TARGET(0x800130BC,ZZ_12FE8_D4);
ZZ_MARK_TARGET(0x800130C0,ZZ_12FE8_D8);
ZZ_MARK(0x800130C4);
ZZ_MARK(0x800130C8);
ZZ_MARK(0x800130CC);
ZZ_MARK(0x800130D0);
ZZ_MARK_TARGET(0x800130D4,ZZ_12FE8_EC);
ZZ_MARK(0x800130D8);
ZZ_MARK(0x800130DC);
ZZ_MARK(0x800130E0);
ZZ_MARK(0x800130E4);
ZZ_MARK(0x800130E8);
ZZ_MARK(0x800130EC);
ZZ_MARK(0x800130F0);
ZZ_MARK(0x800130F4);
ZZ_MARK(0x800130F8);
