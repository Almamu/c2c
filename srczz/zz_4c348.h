#ifdef ZZ_INCLUDE_CODE
ZZ_4C348:
	SP -= 32;
	T0 = A0;
	EMU_Write32(SP + 24,S0); //+ 0x18
	S0 = A1;
	V1 = 0x80060000;
	V1 = EMU_ReadU8(V1 - 8266); //+ 0xFFFFDFB6
	V0 = 1;
	if (V1 == V0)
	{
		EMU_Write32(SP + 28,RA); //+ 0x1C
		ZZ_CLOCKCYCLES(9,0x8004C380);
		goto ZZ_4C348_38;
	}
	EMU_Write32(SP + 28,RA); //+ 0x1C
	V0 = 2;
	if (V1 == V0)
	{
		ZZ_CLOCKCYCLES(12,0x8004C418);
		goto ZZ_4C348_D0;
	}
	ZZ_CLOCKCYCLES(14,0x8004C45C);
	goto ZZ_4C348_114;
ZZ_4C348_38:
	A1 = EMU_ReadS16(S0 + 4); //+ 0x4
	V1 = 0x80060000;
	V1 = EMU_ReadS16(V1 - 8264); //+ 0xFFFFDFB8
	V0 = (int32_t)V1 < (int32_t)A1;
	if (V0)
	{
		ZZ_CLOCKCYCLES(7,0x8004C408);
		goto ZZ_4C348_C0;
	}
	A3 = EMU_ReadS16(S0);
	V0 = A1 + A3;
	V0 = (int32_t)V1 < (int32_t)V0;
	if (V0)
	{
		ZZ_CLOCKCYCLES(13,0x8004C408);
		goto ZZ_4C348_C0;
	}
	V1 = EMU_ReadS16(S0 + 2); //+ 0x2
	A0 = 0x80060000;
	A0 = EMU_ReadS16(A0 - 8262); //+ 0xFFFFDFBA
	V0 = (int32_t)A0 < (int32_t)V1;
	if (V0)
	{
		ZZ_CLOCKCYCLES(20,0x8004C408);
		goto ZZ_4C348_C0;
	}
	A2 = EMU_ReadS16(S0 + 6); //+ 0x6
	V0 = V1 + A2;
	V0 = (int32_t)A0 < (int32_t)V0;
	if (V0)
	{
		ZZ_CLOCKCYCLES(26,0x8004C408);
		goto ZZ_4C348_C0;
	}
	if ((int32_t)A1 <= 0)
	{
		ZZ_CLOCKCYCLES(28,0x8004C408);
		goto ZZ_4C348_C0;
	}
	if ((int32_t)A3 < 0)
	{
		ZZ_CLOCKCYCLES(30,0x8004C408);
		goto ZZ_4C348_C0;
	}
	if ((int32_t)V1 < 0)
	{
		ZZ_CLOCKCYCLES(32,0x8004C408);
		goto ZZ_4C348_C0;
	}
	if ((int32_t)A2 > 0)
	{
		ZZ_CLOCKCYCLES(34,0x8004C45C);
		goto ZZ_4C348_114;
	}
	ZZ_CLOCKCYCLES(34,0x8004C408);
ZZ_4C348_C0:
	A0 = 0x80010000;
	A0 += 3932;
	ZZ_CLOCKCYCLES(4,0x8004C420);
	goto ZZ_4C348_D8;
ZZ_4C348_D0:
	A0 = 0x80010000;
	A0 += 3964;
	ZZ_CLOCKCYCLES(2,0x8004C420);
ZZ_4C348_D8:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 8272); //+ 0xFFFFDFB0
	ZZ_JUMPREGISTER_BEGIN(V0);
	RA = 0x8004C434; //ZZ_4C348_EC
	A1 = T0;
	ZZ_CLOCKCYCLES_JR(5);
	// UNIMPLEMENTED JUMP-TO-REGISTER-AND-LINK (V0,8004C42C)
	ZZ_JUMPREGISTER_END();
ZZ_4C348_EC:
	A1 = EMU_ReadS16(S0);
	A2 = EMU_ReadS16(S0 + 2); //+ 0x2
	A3 = EMU_ReadS16(S0 + 4); //+ 0x4
	V0 = EMU_ReadS16(S0 + 6); //+ 0x6
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 8272); //+ 0xFFFFDFB0
	A0 = 0x80010000;
	A0 += 3944;
	ZZ_JUMPREGISTER_BEGIN(V1);
	RA = 0x8004C45C; //ZZ_4C348_114
	EMU_Write32(SP + 16,V0); //+ 0x10
	ZZ_CLOCKCYCLES_JR(10);
	// UNIMPLEMENTED JUMP-TO-REGISTER-AND-LINK (V1,8004C454)
	ZZ_JUMPREGISTER_END();
ZZ_4C348_114:
	RA = EMU_ReadU32(SP + 28); //+ 0x1C
	S0 = EMU_ReadU32(SP + 24); //+ 0x18
	SP += 32;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(5);
	ZZ_JUMPREGISTER(0x8004C62C,ZZ_4C604_28);
	ZZ_JUMPREGISTER(0x8004C5C8,ZZ_4C5A0_28);
	ZZ_JUMPREGISTER(0x8004C698,ZZ_4C668_30);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8004C348,ZZ_4C348);
ZZ_MARK(0x8004C34C);
ZZ_MARK(0x8004C350);
ZZ_MARK(0x8004C354);
ZZ_MARK(0x8004C358);
ZZ_MARK(0x8004C35C);
ZZ_MARK(0x8004C360);
ZZ_MARK(0x8004C364);
ZZ_MARK(0x8004C368);
ZZ_MARK(0x8004C36C);
ZZ_MARK(0x8004C370);
ZZ_MARK(0x8004C374);
ZZ_MARK(0x8004C378);
ZZ_MARK(0x8004C37C);
ZZ_MARK_TARGET(0x8004C380,ZZ_4C348_38);
ZZ_MARK(0x8004C384);
ZZ_MARK(0x8004C388);
ZZ_MARK(0x8004C38C);
ZZ_MARK(0x8004C390);
ZZ_MARK(0x8004C394);
ZZ_MARK(0x8004C398);
ZZ_MARK(0x8004C39C);
ZZ_MARK(0x8004C3A0);
ZZ_MARK(0x8004C3A4);
ZZ_MARK(0x8004C3A8);
ZZ_MARK(0x8004C3AC);
ZZ_MARK(0x8004C3B0);
ZZ_MARK(0x8004C3B4);
ZZ_MARK(0x8004C3B8);
ZZ_MARK(0x8004C3BC);
ZZ_MARK(0x8004C3C0);
ZZ_MARK(0x8004C3C4);
ZZ_MARK(0x8004C3C8);
ZZ_MARK(0x8004C3CC);
ZZ_MARK(0x8004C3D0);
ZZ_MARK(0x8004C3D4);
ZZ_MARK(0x8004C3D8);
ZZ_MARK(0x8004C3DC);
ZZ_MARK(0x8004C3E0);
ZZ_MARK(0x8004C3E4);
ZZ_MARK(0x8004C3E8);
ZZ_MARK(0x8004C3EC);
ZZ_MARK(0x8004C3F0);
ZZ_MARK(0x8004C3F4);
ZZ_MARK(0x8004C3F8);
ZZ_MARK(0x8004C3FC);
ZZ_MARK(0x8004C400);
ZZ_MARK(0x8004C404);
ZZ_MARK_TARGET(0x8004C408,ZZ_4C348_C0);
ZZ_MARK(0x8004C40C);
ZZ_MARK(0x8004C410);
ZZ_MARK(0x8004C414);
ZZ_MARK_TARGET(0x8004C418,ZZ_4C348_D0);
ZZ_MARK(0x8004C41C);
ZZ_MARK_TARGET(0x8004C420,ZZ_4C348_D8);
ZZ_MARK(0x8004C424);
ZZ_MARK(0x8004C428);
ZZ_MARK(0x8004C42C);
ZZ_MARK(0x8004C430);
ZZ_MARK_TARGET(0x8004C434,ZZ_4C348_EC);
ZZ_MARK(0x8004C438);
ZZ_MARK(0x8004C43C);
ZZ_MARK(0x8004C440);
ZZ_MARK(0x8004C444);
ZZ_MARK(0x8004C448);
ZZ_MARK(0x8004C44C);
ZZ_MARK(0x8004C450);
ZZ_MARK(0x8004C454);
ZZ_MARK(0x8004C458);
ZZ_MARK_TARGET(0x8004C45C,ZZ_4C348_114);
ZZ_MARK(0x8004C460);
ZZ_MARK(0x8004C464);
ZZ_MARK(0x8004C468);
ZZ_MARK(0x8004C46C);
